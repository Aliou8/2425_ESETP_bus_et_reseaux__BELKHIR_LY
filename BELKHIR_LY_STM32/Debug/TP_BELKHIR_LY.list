
TP_BELKHIR_LY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  000080b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006914  08006914  000080b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0800691c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200000b4  080069d0  000080b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080069d0  00008448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f584  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b95  00000000  00000000  00017668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0001a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  0001af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d62  00000000  00000000  0001b999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135c8  00000000  00000000  0003f6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf799  00000000  00000000  00052cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012245c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041bc  00000000  00000000  001224a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012665c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006444 	.word	0x08006444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08006444 	.word	0x08006444

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setK>:

int32_t coefficientK ;
int32_t Angle ;

void setK(int32_t k)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    coefficientK = k ;
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <setK+0x1c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000d0 	.word	0x200000d0

080005f0 <uart_write>:
uint8_t start[] = "\r\n Communication entre STM32 et Raspberry PI\r\n " ;
static int uartRxReceived = 0;  // Flag pour indiquer la réception d'un caractère

// Fonction pour écrire une chaîne via UART
static int uart_write(char *s, uint16_t size)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&UART_PI, (uint8_t *)s, size, HAL_MAX_DELAY);
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <uart_write+0x24>)
 8000606:	f003 fcd3 	bl	8003fb0 <HAL_UART_Transmit>
    return size;
 800060a:	887b      	ldrh	r3, [r7, #2]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200002b0 	.word	0x200002b0

08000618 <PI_Init>:

// Initialisation de la communication
void PI_Init(void)
 {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&UART_PI, (uint8_t *)uartRxBuffer, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	490e      	ldr	r1, [pc, #56]	@ (8000658 <PI_Init+0x40>)
 8000620:	480e      	ldr	r0, [pc, #56]	@ (800065c <PI_Init+0x44>)
 8000622:	f003 fd50 	bl	80040c6 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&UART_PI, start, strlen((char *)start), HAL_MAX_DELAY);
 8000626:	480e      	ldr	r0, [pc, #56]	@ (8000660 <PI_Init+0x48>)
 8000628:	f7ff fdfc 	bl	8000224 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	490a      	ldr	r1, [pc, #40]	@ (8000660 <PI_Init+0x48>)
 8000636:	4809      	ldr	r0, [pc, #36]	@ (800065c <PI_Init+0x44>)
 8000638:	f003 fcba 	bl	8003fb0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&UART_PI, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <PI_Init+0x4c>)
 800063e:	f7ff fdf1 	bl	8000224 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	4906      	ldr	r1, [pc, #24]	@ (8000664 <PI_Init+0x4c>)
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <PI_Init+0x44>)
 800064e:	f003 fcaf 	bl	8003fb0 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000138 	.word	0x20000138
 800065c:	200002b0 	.word	0x200002b0
 8000660:	2000000c 	.word	0x2000000c
 8000664:	20000000 	.word	0x20000000

08000668 <PI_GetCommand>:

// Fonction pour traiter les commandes reçues via UART
static void PI_GetCommand(char *buffer)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af04      	add	r7, sp, #16
 800066e:	6078      	str	r0, [r7, #4]
    // Vérifiez la commande et construisez la réponse sans afficher la commande
    if (strcmp(buffer, "GET_T") == 0) {
 8000670:	49b9      	ldr	r1, [pc, #740]	@ (8000958 <PI_GetCommand+0x2f0>)
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff fdcc 	bl	8000210 <strcmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d159      	bne.n	8000732 <PI_GetCommand+0xca>
       int32_t tempNc = BMP280_ReadTemperature() ;
 800067e:	f000 fb2f 	bl	8000ce0 <BMP280_ReadTemperature>
 8000682:	61b8      	str	r0, [r7, #24]
        int32_t temp = BMP280_ConvertTemperature(tempNc) ;
 8000684:	69b8      	ldr	r0, [r7, #24]
 8000686:	f000 fb49 	bl	8000d1c <BMP280_ConvertTemperature>
 800068a:	6178      	str	r0, [r7, #20]
        int size = snprintf(printfBuffer, BUFFER_SIZE, "T=+%ld%ld.%ld%ld_C\r\n",(temp/1000)%10,(temp/100)%10,(temp/10)%10,temp%10);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4ab3      	ldr	r2, [pc, #716]	@ (800095c <PI_GetCommand+0x2f4>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1192      	asrs	r2, r2, #6
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad2      	subs	r2, r2, r3
 800069a:	4bb1      	ldr	r3, [pc, #708]	@ (8000960 <PI_GetCommand+0x2f8>)
 800069c:	fb83 1302 	smull	r1, r3, r3, r2
 80006a0:	1099      	asrs	r1, r3, #2
 80006a2:	17d3      	asrs	r3, r2, #31
 80006a4:	1acd      	subs	r5, r1, r3
 80006a6:	462b      	mov	r3, r5
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	442b      	add	r3, r5
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	1ad5      	subs	r5, r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	4aac      	ldr	r2, [pc, #688]	@ (8000964 <PI_GetCommand+0x2fc>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1152      	asrs	r2, r2, #5
 80006ba:	17db      	asrs	r3, r3, #31
 80006bc:	1ad1      	subs	r1, r2, r3
 80006be:	4ba8      	ldr	r3, [pc, #672]	@ (8000960 <PI_GetCommand+0x2f8>)
 80006c0:	fb83 2301 	smull	r2, r3, r3, r1
 80006c4:	109a      	asrs	r2, r3, #2
 80006c6:	17cb      	asrs	r3, r1, #31
 80006c8:	1ad2      	subs	r2, r2, r3
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	1aca      	subs	r2, r1, r3
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	49a2      	ldr	r1, [pc, #648]	@ (8000960 <PI_GetCommand+0x2f8>)
 80006d8:	fb81 0103 	smull	r0, r1, r1, r3
 80006dc:	1089      	asrs	r1, r1, #2
 80006de:	17db      	asrs	r3, r3, #31
 80006e0:	1ac8      	subs	r0, r1, r3
 80006e2:	4b9f      	ldr	r3, [pc, #636]	@ (8000960 <PI_GetCommand+0x2f8>)
 80006e4:	fb83 1300 	smull	r1, r3, r3, r0
 80006e8:	1099      	asrs	r1, r3, #2
 80006ea:	17c3      	asrs	r3, r0, #31
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ac1      	subs	r1, r0, r3
 80006f8:	697c      	ldr	r4, [r7, #20]
 80006fa:	4b99      	ldr	r3, [pc, #612]	@ (8000960 <PI_GetCommand+0x2f8>)
 80006fc:	fb83 0304 	smull	r0, r3, r3, r4
 8000700:	1098      	asrs	r0, r3, #2
 8000702:	17e3      	asrs	r3, r4, #31
 8000704:	1ac0      	subs	r0, r0, r3
 8000706:	4603      	mov	r3, r0
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4403      	add	r3, r0
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	1ae0      	subs	r0, r4, r3
 8000710:	9002      	str	r0, [sp, #8]
 8000712:	9101      	str	r1, [sp, #4]
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	462b      	mov	r3, r5
 8000718:	4a93      	ldr	r2, [pc, #588]	@ (8000968 <PI_GetCommand+0x300>)
 800071a:	2164      	movs	r1, #100	@ 0x64
 800071c:	4893      	ldr	r0, [pc, #588]	@ (800096c <PI_GetCommand+0x304>)
 800071e:	f004 f993 	bl	8004a48 <sniprintf>
 8000722:	6138      	str	r0, [r7, #16]
        uart_write(printfBuffer, size);
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	b29b      	uxth	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	4890      	ldr	r0, [pc, #576]	@ (800096c <PI_GetCommand+0x304>)
 800072c:	f7ff ff60 	bl	80005f0 <uart_write>
    else {
        int size = snprintf(printfBuffer, BUFFER_SIZE, "\r\nCommande inconnue\r\n");
        uart_write(printfBuffer, size);
    }
}
}
 8000730:	e10e      	b.n	8000950 <PI_GetCommand+0x2e8>
    } else if (strcmp(buffer, "GET_P") == 0) {
 8000732:	498f      	ldr	r1, [pc, #572]	@ (8000970 <PI_GetCommand+0x308>)
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fd6b 	bl	8000210 <strcmp>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d114      	bne.n	800076a <PI_GetCommand+0x102>
       int32_t PresNc =BMP280_ReadPressure() ;
 8000740:	f000 fb32 	bl	8000da8 <BMP280_ReadPressure>
 8000744:	6278      	str	r0, [r7, #36]	@ 0x24
        int32_t Pres = BMP280_ConvertPressure(PresNc) ;
 8000746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000748:	f000 fb4c 	bl	8000de4 <BMP280_ConvertPressure>
 800074c:	6238      	str	r0, [r7, #32]
        int size = snprintf(printfBuffer, BUFFER_SIZE, "P=%ldPa\r\n",Pres);
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	4a88      	ldr	r2, [pc, #544]	@ (8000974 <PI_GetCommand+0x30c>)
 8000752:	2164      	movs	r1, #100	@ 0x64
 8000754:	4885      	ldr	r0, [pc, #532]	@ (800096c <PI_GetCommand+0x304>)
 8000756:	f004 f977 	bl	8004a48 <sniprintf>
 800075a:	61f8      	str	r0, [r7, #28]
        uart_write(printfBuffer, size);
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	b29b      	uxth	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	4882      	ldr	r0, [pc, #520]	@ (800096c <PI_GetCommand+0x304>)
 8000764:	f7ff ff44 	bl	80005f0 <uart_write>
}
 8000768:	e0f2      	b.n	8000950 <PI_GetCommand+0x2e8>
    else if (strncmp(buffer, "SET_K=", 6) == 0) {  // Vérifie si le buffer commence par "SET_K="
 800076a:	2206      	movs	r2, #6
 800076c:	4982      	ldr	r1, [pc, #520]	@ (8000978 <PI_GetCommand+0x310>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f004 faaa 	bl	8004cc8 <strncmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	f040 80ea 	bne.w	8000950 <PI_GetCommand+0x2e8>
        if (sscanf(buffer + 6, "%ld", &value) == 1) {  // Extrait l'entier après "SET_K="
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3306      	adds	r3, #6
 8000780:	f107 020c 	add.w	r2, r7, #12
 8000784:	497d      	ldr	r1, [pc, #500]	@ (800097c <PI_GetCommand+0x314>)
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f992 	bl	8004ab0 <siscanf>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d111      	bne.n	80007b6 <PI_GetCommand+0x14e>
            setK(value);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff1b 	bl	80005d0 <setK>
            int size = snprintf(printfBuffer, BUFFER_SIZE, "SET_K=OK =%ld\r\n",value);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4a78      	ldr	r2, [pc, #480]	@ (8000980 <PI_GetCommand+0x318>)
 800079e:	2164      	movs	r1, #100	@ 0x64
 80007a0:	4872      	ldr	r0, [pc, #456]	@ (800096c <PI_GetCommand+0x304>)
 80007a2:	f004 f951 	bl	8004a48 <sniprintf>
 80007a6:	62b8      	str	r0, [r7, #40]	@ 0x28
            uart_write(printfBuffer, size) ;
 80007a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	486f      	ldr	r0, [pc, #444]	@ (800096c <PI_GetCommand+0x304>)
 80007b0:	f7ff ff1e 	bl	80005f0 <uart_write>
}
 80007b4:	e0cc      	b.n	8000950 <PI_GetCommand+0x2e8>
    else if(strcmp(buffer, "GET_K") == 0){
 80007b6:	4973      	ldr	r1, [pc, #460]	@ (8000984 <PI_GetCommand+0x31c>)
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fd29 	bl	8000210 <strcmp>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d163      	bne.n	800088c <PI_GetCommand+0x224>
        int16_t K= 1234 ; // getK() ;
 80007c4:	f240 43d2 	movw	r3, #1234	@ 0x4d2
 80007c8:	867b      	strh	r3, [r7, #50]	@ 0x32
        int size = snprintf(printfBuffer, BUFFER_SIZE, "K=%d%d.%d%d000\r\n",(K/1000)%10,(K/100)%10,(K/10)%10,K%10);
 80007ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80007ce:	4a63      	ldr	r2, [pc, #396]	@ (800095c <PI_GetCommand+0x2f4>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1192      	asrs	r2, r2, #6
 80007d6:	17db      	asrs	r3, r3, #31
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	b21a      	sxth	r2, r3
 80007dc:	4b60      	ldr	r3, [pc, #384]	@ (8000960 <PI_GetCommand+0x2f8>)
 80007de:	fb83 1302 	smull	r1, r3, r3, r2
 80007e2:	1099      	asrs	r1, r3, #2
 80007e4:	17d3      	asrs	r3, r2, #31
 80007e6:	1ac9      	subs	r1, r1, r3
 80007e8:	460b      	mov	r3, r1
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	461d      	mov	r5, r3
 80007f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80007fa:	4a5a      	ldr	r2, [pc, #360]	@ (8000964 <PI_GetCommand+0x2fc>)
 80007fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000800:	1152      	asrs	r2, r2, #5
 8000802:	17db      	asrs	r3, r3, #31
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	b21a      	sxth	r2, r3
 8000808:	4b55      	ldr	r3, [pc, #340]	@ (8000960 <PI_GetCommand+0x2f8>)
 800080a:	fb83 1302 	smull	r1, r3, r3, r2
 800080e:	1099      	asrs	r1, r3, #2
 8000810:	17d3      	asrs	r3, r2, #31
 8000812:	1ac9      	subs	r1, r1, r3
 8000814:	460b      	mov	r3, r1
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	440b      	add	r3, r1
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b21b      	sxth	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000826:	4a4e      	ldr	r2, [pc, #312]	@ (8000960 <PI_GetCommand+0x2f8>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1092      	asrs	r2, r2, #2
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b21a      	sxth	r2, r3
 8000834:	4b4a      	ldr	r3, [pc, #296]	@ (8000960 <PI_GetCommand+0x2f8>)
 8000836:	fb83 1302 	smull	r1, r3, r3, r2
 800083a:	1099      	asrs	r1, r3, #2
 800083c:	17d3      	asrs	r3, r2, #31
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	460b      	mov	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	b21b      	sxth	r3, r3
 800084c:	461c      	mov	r4, r3
 800084e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8000852:	4b43      	ldr	r3, [pc, #268]	@ (8000960 <PI_GetCommand+0x2f8>)
 8000854:	fb83 1302 	smull	r1, r3, r3, r2
 8000858:	1099      	asrs	r1, r3, #2
 800085a:	17d3      	asrs	r3, r2, #31
 800085c:	1ac9      	subs	r1, r1, r3
 800085e:	460b      	mov	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	b21b      	sxth	r3, r3
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	9401      	str	r4, [sp, #4]
 800086e:	9000      	str	r0, [sp, #0]
 8000870:	462b      	mov	r3, r5
 8000872:	4a45      	ldr	r2, [pc, #276]	@ (8000988 <PI_GetCommand+0x320>)
 8000874:	2164      	movs	r1, #100	@ 0x64
 8000876:	483d      	ldr	r0, [pc, #244]	@ (800096c <PI_GetCommand+0x304>)
 8000878:	f004 f8e6 	bl	8004a48 <sniprintf>
 800087c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        uart_write(printfBuffer, size);
 800087e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000880:	b29b      	uxth	r3, r3
 8000882:	4619      	mov	r1, r3
 8000884:	4839      	ldr	r0, [pc, #228]	@ (800096c <PI_GetCommand+0x304>)
 8000886:	f7ff feb3 	bl	80005f0 <uart_write>
}
 800088a:	e061      	b.n	8000950 <PI_GetCommand+0x2e8>
    else if(strcmp(buffer, "GET_A") == 0){
 800088c:	493f      	ldr	r1, [pc, #252]	@ (800098c <PI_GetCommand+0x324>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fcbe 	bl	8000210 <strcmp>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d14e      	bne.n	8000938 <PI_GetCommand+0x2d0>
        int16_t A= 90 ;//getAngle() ;
 800089a:	235a      	movs	r3, #90	@ 0x5a
 800089c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        int size = snprintf(printfBuffer, BUFFER_SIZE, "A=%d%d%d.%d000\r\n",(A/100)%10,(A/10)%10,(A)%10,(A*10)%10);
 800089e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80008a2:	4a30      	ldr	r2, [pc, #192]	@ (8000964 <PI_GetCommand+0x2fc>)
 80008a4:	fb82 1203 	smull	r1, r2, r2, r3
 80008a8:	1152      	asrs	r2, r2, #5
 80008aa:	17db      	asrs	r3, r3, #31
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <PI_GetCommand+0x2f8>)
 80008b2:	fb83 1302 	smull	r1, r3, r3, r2
 80008b6:	1099      	asrs	r1, r3, #2
 80008b8:	17d3      	asrs	r3, r2, #31
 80008ba:	1ac9      	subs	r1, r1, r3
 80008bc:	460b      	mov	r3, r1
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	461c      	mov	r4, r3
 80008ca:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80008ce:	4a24      	ldr	r2, [pc, #144]	@ (8000960 <PI_GetCommand+0x2f8>)
 80008d0:	fb82 1203 	smull	r1, r2, r2, r3
 80008d4:	1092      	asrs	r2, r2, #2
 80008d6:	17db      	asrs	r3, r3, #31
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b21a      	sxth	r2, r3
 80008dc:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <PI_GetCommand+0x2f8>)
 80008de:	fb83 1302 	smull	r1, r3, r3, r2
 80008e2:	1099      	asrs	r1, r3, #2
 80008e4:	17d3      	asrs	r3, r2, #31
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	460b      	mov	r3, r1
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <PI_GetCommand+0x2f8>)
 80008fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000900:	1099      	asrs	r1, r3, #2
 8000902:	17d3      	asrs	r3, r2, #31
 8000904:	1ac9      	subs	r1, r1, r3
 8000906:	460b      	mov	r3, r1
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	440b      	add	r3, r1
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	b21b      	sxth	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	2300      	movs	r3, #0
 8000916:	9302      	str	r3, [sp, #8]
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9000      	str	r0, [sp, #0]
 800091c:	4623      	mov	r3, r4
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <PI_GetCommand+0x328>)
 8000920:	2164      	movs	r1, #100	@ 0x64
 8000922:	4812      	ldr	r0, [pc, #72]	@ (800096c <PI_GetCommand+0x304>)
 8000924:	f004 f890 	bl	8004a48 <sniprintf>
 8000928:	6378      	str	r0, [r7, #52]	@ 0x34
        uart_write(printfBuffer, size);
 800092a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800092c:	b29b      	uxth	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	480e      	ldr	r0, [pc, #56]	@ (800096c <PI_GetCommand+0x304>)
 8000932:	f7ff fe5d 	bl	80005f0 <uart_write>
}
 8000936:	e00b      	b.n	8000950 <PI_GetCommand+0x2e8>
        int size = snprintf(printfBuffer, BUFFER_SIZE, "\r\nCommande inconnue\r\n");
 8000938:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <PI_GetCommand+0x32c>)
 800093a:	2164      	movs	r1, #100	@ 0x64
 800093c:	480b      	ldr	r0, [pc, #44]	@ (800096c <PI_GetCommand+0x304>)
 800093e:	f004 f883 	bl	8004a48 <sniprintf>
 8000942:	63f8      	str	r0, [r7, #60]	@ 0x3c
        uart_write(printfBuffer, size);
 8000944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000946:	b29b      	uxth	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	4808      	ldr	r0, [pc, #32]	@ (800096c <PI_GetCommand+0x304>)
 800094c:	f7ff fe50 	bl	80005f0 <uart_write>
}
 8000950:	bf00      	nop
 8000952:	3740      	adds	r7, #64	@ 0x40
 8000954:	46bd      	mov	sp, r7
 8000956:	bdb0      	pop	{r4, r5, r7, pc}
 8000958:	0800645c 	.word	0x0800645c
 800095c:	10624dd3 	.word	0x10624dd3
 8000960:	66666667 	.word	0x66666667
 8000964:	51eb851f 	.word	0x51eb851f
 8000968:	08006464 	.word	0x08006464
 800096c:	200000d4 	.word	0x200000d4
 8000970:	0800647c 	.word	0x0800647c
 8000974:	08006484 	.word	0x08006484
 8000978:	08006490 	.word	0x08006490
 800097c:	08006498 	.word	0x08006498
 8000980:	0800649c 	.word	0x0800649c
 8000984:	080064ac 	.word	0x080064ac
 8000988:	080064b4 	.word	0x080064b4
 800098c:	080064c8 	.word	0x080064c8
 8000990:	080064d0 	.word	0x080064d0
 8000994:	080064e4 	.word	0x080064e4

08000998 <PI_RUN>:

// Fonction principale pour gérer les commandes envoyées via UART

int PI_RUN(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
    static char cmd_buffer[BUFFER_SIZE];
    static int pos = 0;
    char c;

    // Si un caractère est reçu via UART (vérifié par l'interruption)
    if (uartRxReceived) {
 800099e:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <PI_RUN+0xa0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d042      	beq.n	8000a2c <PI_RUN+0x94>
        c = uartRxBuffer[0];  // Lire le caractère reçu via UART
 80009a6:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <PI_RUN+0xa4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
        uartRxReceived = 0;    // Réinitialiser le flag
 80009ac:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <PI_RUN+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]

        // Traitement des caractères reçus
        switch (c) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b0d      	cmp	r3, #13
 80009b6:	d002      	beq.n	80009be <PI_RUN+0x26>
 80009b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ba:	d014      	beq.n	80009e6 <PI_RUN+0x4e>
 80009bc:	e021      	b.n	8000a02 <PI_RUN+0x6a>
            case '\r':   // Touche RETURN
                uart_write("\n", 2);   // Sauter une ligne après Entrée
 80009be:	2102      	movs	r1, #2
 80009c0:	481f      	ldr	r0, [pc, #124]	@ (8000a40 <PI_RUN+0xa8>)
 80009c2:	f7ff fe15 	bl	80005f0 <uart_write>
                cmd_buffer[pos] = '\0';   // Terminer la chaîne
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <PI_RUN+0xac>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <PI_RUN+0xb0>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	54d1      	strb	r1, [r2, r3]
                PI_GetCommand(cmd_buffer);  // Exécuter la commande
 80009d0:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <PI_RUN+0xb0>)
 80009d2:	f7ff fe49 	bl	8000668 <PI_GetCommand>
                pos = 0;      // Réinitialiser la position du buffer
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <PI_RUN+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
                uart_write("STM32@pig3>", 12);
 80009dc:	210c      	movs	r1, #12
 80009de:	481b      	ldr	r0, [pc, #108]	@ (8000a4c <PI_RUN+0xb4>)
 80009e0:	f7ff fe06 	bl	80005f0 <uart_write>
                break;
 80009e4:	e022      	b.n	8000a2c <PI_RUN+0x94>

            case 127:    // Touche Backspace
                if (pos > 0) {
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <PI_RUN+0xac>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dd1b      	ble.n	8000a26 <PI_RUN+0x8e>
                    pos--;     // Supprimer le dernier caractère
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <PI_RUN+0xac>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <PI_RUN+0xac>)
 80009f6:	6013      	str	r3, [r2, #0]
                    uart_write("\b \b", 3); // Effacer le caractère sur le terminal
 80009f8:	2103      	movs	r1, #3
 80009fa:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <PI_RUN+0xb8>)
 80009fc:	f7ff fdf8 	bl	80005f0 <uart_write>
                }
                break;
 8000a00:	e011      	b.n	8000a26 <PI_RUN+0x8e>

            default:    // Autres caractères
                if (pos < BUFFER_SIZE - 1) {  // Vérifier si le buffer a de l'espace
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <PI_RUN+0xac>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b62      	cmp	r3, #98	@ 0x62
 8000a08:	dc0f      	bgt.n	8000a2a <PI_RUN+0x92>
                    uart_write(&c, 1);        // Afficher le caractère
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fdee 	bl	80005f0 <uart_write>
                    cmd_buffer[pos++] = c;    // Stocker le caractère
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <PI_RUN+0xac>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	490a      	ldr	r1, [pc, #40]	@ (8000a44 <PI_RUN+0xac>)
 8000a1c:	600a      	str	r2, [r1, #0]
 8000a1e:	79f9      	ldrb	r1, [r7, #7]
 8000a20:	4a09      	ldr	r2, [pc, #36]	@ (8000a48 <PI_RUN+0xb0>)
 8000a22:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8000a24:	e001      	b.n	8000a2a <PI_RUN+0x92>
                break;
 8000a26:	bf00      	nop
 8000a28:	e000      	b.n	8000a2c <PI_RUN+0x94>
                break;
 8000a2a:	bf00      	nop
        }

    }

    return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000013c 	.word	0x2000013c
 8000a3c:	20000138 	.word	0x20000138
 8000a40:	080064fc 	.word	0x080064fc
 8000a44:	20000140 	.word	0x20000140
 8000a48:	20000144 	.word	0x20000144
 8000a4c:	08006500 	.word	0x08006500
 8000a50:	0800650c 	.word	0x0800650c

08000a54 <BMP280_RegisterWrite>:
signed short dig_P8 = 0;
signed short dig_P9 = 0;

uint32_t t_fine;

static int BMP280_RegisterWrite(uint8_t reg, uint8_t data) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	733b      	strb	r3, [r7, #12]
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	737b      	strb	r3, [r7, #13]
    if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY)) {
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <BMP280_RegisterWrite+0x44>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f107 020c 	add.w	r2, r7, #12
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <BMP280_RegisterWrite+0x48>)
 8000a80:	f001 fd58 	bl	8002534 <HAL_I2C_Master_Transmit>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <BMP280_RegisterWrite+0x3a>
        return 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <BMP280_RegisterWrite+0x3c>
    }
    return 1;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000003c 	.word	0x2000003c
 8000a9c:	200001ec 	.word	0x200001ec

08000aa0 <BMP280_RegisterRead>:

static int BMP280_RegisterRead(uint8_t reg, uint8_t *data, uint16_t length) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	80bb      	strh	r3, [r7, #4]
    if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, &reg, 1, HAL_MAX_DELAY)) {
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <BMP280_RegisterRead+0x5c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	1dfa      	adds	r2, r7, #7
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	480f      	ldr	r0, [pc, #60]	@ (8000b00 <BMP280_RegisterRead+0x60>)
 8000ac2:	f001 fd37 	bl	8002534 <HAL_I2C_Master_Transmit>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <BMP280_RegisterRead+0x30>
        return 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e010      	b.n	8000af2 <BMP280_RegisterRead+0x52>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, length, HAL_MAX_DELAY)) {
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <BMP280_RegisterRead+0x5c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <BMP280_RegisterRead+0x60>)
 8000ae2:	f001 fe25 	bl	8002730 <HAL_I2C_Master_Receive>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <BMP280_RegisterRead+0x50>
        return 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <BMP280_RegisterRead+0x52>
    }
    return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000003c 	.word	0x2000003c
 8000b00:	200001ec 	.word	0x200001ec

08000b04 <BMP280_Init>:

void BMP280_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8
    uint8_t data[1];
    uint8_t ConfigValue = 0x57;
 8000b0a:	2357      	movs	r3, #87	@ 0x57
 8000b0c:	71fb      	strb	r3, [r7, #7]
    if (1 == BMP280_RegisterWrite(BMP280_REG_CONFIG, ConfigValue)) {
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <BMP280_Init+0x58>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff9c 	bl	8000a54 <BMP280_RegisterWrite>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d103      	bne.n	8000b2a <BMP280_Init+0x26>
        printf("Erreur pendant l'écriture de la configuration \r\n");
 8000b22:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <BMP280_Init+0x5c>)
 8000b24:	f003 ff88 	bl	8004a38 <puts>
        return;
 8000b28:	e014      	b.n	8000b54 <BMP280_Init+0x50>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, sizeof(data), HAL_MAX_DELAY)) {
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <BMP280_Init+0x60>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	1d3a      	adds	r2, r7, #4
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	480b      	ldr	r0, [pc, #44]	@ (8000b68 <BMP280_Init+0x64>)
 8000b3c:	f001 fdf8 	bl	8002730 <HAL_I2C_Master_Receive>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <BMP280_Init+0x4e>
        return;
    }
    printf("La valeur configurée est : 0x%X \r\n", data[0]);
 8000b46:	793b      	ldrb	r3, [r7, #4]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <BMP280_Init+0x68>)
 8000b4c:	f003 ff0c 	bl	8004968 <iprintf>
 8000b50:	e000      	b.n	8000b54 <BMP280_Init+0x50>
        return;
 8000b52:	bf00      	nop
}
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000003d 	.word	0x2000003d
 8000b60:	08006510 	.word	0x08006510
 8000b64:	2000003c 	.word	0x2000003c
 8000b68:	200001ec 	.word	0x200001ec
 8000b6c:	08006544 	.word	0x08006544

08000b70 <BMP280_ReadCalibrationData>:
        return;
    }
    printf("La valeur id = 0x%X\r\n", idValue);
}

void BMP280_ReadCalibrationData() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
    uint8_t calibData[BMP280_CALIB_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_CALIB_DATA, calibData, BMP280_CALIB_DATA_LEN)) {
 8000b76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca0 <BMP280_ReadCalibrationData+0x130>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	1d39      	adds	r1, r7, #4
 8000b7c:	2218      	movs	r2, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff8e 	bl	8000aa0 <BMP280_RegisterRead>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d103      	bne.n	8000b92 <BMP280_ReadCalibrationData+0x22>
        printf("La lecture de calibration a échoué \r\n");
 8000b8a:	4846      	ldr	r0, [pc, #280]	@ (8000ca4 <BMP280_ReadCalibrationData+0x134>)
 8000b8c:	f003 ff54 	bl	8004a38 <puts>
 8000b90:	e082      	b.n	8000c98 <BMP280_ReadCalibrationData+0x128>
        return;
    }

    printf("Lecture des données de calibration OK \r\n");
 8000b92:	4845      	ldr	r0, [pc, #276]	@ (8000ca8 <BMP280_ReadCalibrationData+0x138>)
 8000b94:	f003 ff50 	bl	8004a38 <puts>
    for (int i = 0; i < BMP280_CALIB_DATA_LEN; i++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	e00d      	b.n	8000bba <BMP280_ReadCalibrationData+0x4a>
        printf("Le contenu du registre 0x%X est  %d \r\n", 0x88 + i, calibData[i]);
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8000ba4:	1d3a      	adds	r2, r7, #4
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	483f      	ldr	r0, [pc, #252]	@ (8000cac <BMP280_ReadCalibrationData+0x13c>)
 8000bb0:	f003 feda 	bl	8004968 <iprintf>
    for (int i = 0; i < BMP280_CALIB_DATA_LEN; i++) {
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	2b17      	cmp	r3, #23
 8000bbe:	ddee      	ble.n	8000b9e <BMP280_ReadCalibrationData+0x2e>
    }

    dig_T1 = (calibData[0] | (calibData[1] << 8));
 8000bc0:	793b      	ldrb	r3, [r7, #4]
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	797b      	ldrb	r3, [r7, #5]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	4b38      	ldr	r3, [pc, #224]	@ (8000cb0 <BMP280_ReadCalibrationData+0x140>)
 8000bd0:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData[2] | (calibData[3] << 8));
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <BMP280_ReadCalibrationData+0x144>)
 8000be2:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData[4] | (calibData[5] << 8));
 8000be4:	7a3b      	ldrb	r3, [r7, #8]
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	7a7b      	ldrb	r3, [r7, #9]
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	4b31      	ldr	r3, [pc, #196]	@ (8000cb8 <BMP280_ReadCalibrationData+0x148>)
 8000bf4:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData[6] | (calibData[7] << 8));
 8000bf6:	7abb      	ldrb	r3, [r7, #10]
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	7afb      	ldrb	r3, [r7, #11]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <BMP280_ReadCalibrationData+0x14c>)
 8000c06:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData[8] | (calibData[9] << 8));
 8000c08:	7b3b      	ldrb	r3, [r7, #12]
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <BMP280_ReadCalibrationData+0x150>)
 8000c18:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData[10] | (calibData[11] << 8));
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <BMP280_ReadCalibrationData+0x154>)
 8000c2a:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData[12] | (calibData[13] << 8));
 8000c2c:	7c3b      	ldrb	r3, [r7, #16]
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	7c7b      	ldrb	r3, [r7, #17]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <BMP280_ReadCalibrationData+0x158>)
 8000c3c:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData[14] | (calibData[15] << 8));
 8000c3e:	7cbb      	ldrb	r3, [r7, #18]
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	7cfb      	ldrb	r3, [r7, #19]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <BMP280_ReadCalibrationData+0x15c>)
 8000c4e:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData[16] | (calibData[17] << 8));
 8000c50:	7d3b      	ldrb	r3, [r7, #20]
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	7d7b      	ldrb	r3, [r7, #21]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <BMP280_ReadCalibrationData+0x160>)
 8000c60:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData[18] | (calibData[19] << 8));
 8000c62:	7dbb      	ldrb	r3, [r7, #22]
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <BMP280_ReadCalibrationData+0x164>)
 8000c72:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData[20] | (calibData[21] << 8));
 8000c74:	7e3b      	ldrb	r3, [r7, #24]
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	7e7b      	ldrb	r3, [r7, #25]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <BMP280_ReadCalibrationData+0x168>)
 8000c84:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData[22] | (calibData[23] << 8));
 8000c86:	7ebb      	ldrb	r3, [r7, #26]
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	7efb      	ldrb	r3, [r7, #27]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <BMP280_ReadCalibrationData+0x16c>)
 8000c96:	801a      	strh	r2, [r3, #0]
}
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000003e 	.word	0x2000003e
 8000ca4:	080065d4 	.word	0x080065d4
 8000ca8:	080065fc 	.word	0x080065fc
 8000cac:	08006628 	.word	0x08006628
 8000cb0:	200001a8 	.word	0x200001a8
 8000cb4:	200001aa 	.word	0x200001aa
 8000cb8:	200001ac 	.word	0x200001ac
 8000cbc:	200001ae 	.word	0x200001ae
 8000cc0:	200001b0 	.word	0x200001b0
 8000cc4:	200001b2 	.word	0x200001b2
 8000cc8:	200001b4 	.word	0x200001b4
 8000ccc:	200001b6 	.word	0x200001b6
 8000cd0:	200001b8 	.word	0x200001b8
 8000cd4:	200001ba 	.word	0x200001ba
 8000cd8:	200001bc 	.word	0x200001bc
 8000cdc:	200001be 	.word	0x200001be

08000ce0 <BMP280_ReadTemperature>:

int32_t BMP280_ReadTemperature(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
    uint8_t tempData[BMP280_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_TEMP, tempData, BMP280_DATA_LEN)) {
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <BMP280_ReadTemperature+0x38>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	1d39      	adds	r1, r7, #4
 8000cec:	2203      	movs	r2, #3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fed6 	bl	8000aa0 <BMP280_RegisterRead>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d101      	bne.n	8000cfe <BMP280_ReadTemperature+0x1e>
        return 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e008      	b.n	8000d10 <BMP280_ReadTemperature+0x30>
    }
    return (int32_t)((tempData[0] << 12) | (tempData[1] << 4) | (tempData[2]>> 4));
 8000cfe:	793b      	ldrb	r3, [r7, #4]
 8000d00:	031a      	lsls	r2, r3, #12
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4313      	orrs	r3, r2
 8000d08:	79ba      	ldrb	r2, [r7, #6]
 8000d0a:	0912      	lsrs	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	4313      	orrs	r3, r2
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000003f 	.word	0x2000003f

08000d1c <BMP280_ConvertTemperature>:

int32_t BMP280_ConvertTemperature(int32_t rawTemp) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;

    var1 = (((rawTemp >> 3) - ((int32_t)dig_T1 << 1)) * (int32_t)dig_T2) >> 11;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	10da      	asrs	r2, r3, #3
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <BMP280_ConvertTemperature+0x7c>)
 8000d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <BMP280_ConvertTemperature+0x80>)
 8000d34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	12db      	asrs	r3, r3, #11
 8000d3e:	617b      	str	r3, [r7, #20]
    var2 = (((((rawTemp >> 4) - (int32_t)dig_T1) * ((rawTemp >> 4) - (int32_t)dig_T1)) >> 12) * (int32_t)dig_T3) >> 14;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	111b      	asrs	r3, r3, #4
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <BMP280_ConvertTemperature+0x7c>)
 8000d46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	1112      	asrs	r2, r2, #4
 8000d50:	4911      	ldr	r1, [pc, #68]	@ (8000d98 <BMP280_ConvertTemperature+0x7c>)
 8000d52:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	fb02 f303 	mul.w	r3, r2, r3
 8000d5c:	131b      	asrs	r3, r3, #12
 8000d5e:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <BMP280_ConvertTemperature+0x84>)
 8000d60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	139b      	asrs	r3, r3, #14
 8000d6a:	613b      	str	r3, [r7, #16]

    t_fine = var1 + var2;
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <BMP280_ConvertTemperature+0x88>)
 8000d76:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <BMP280_ConvertTemperature+0x88>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	3380      	adds	r3, #128	@ 0x80
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	60fb      	str	r3, [r7, #12]
    return T;
 8000d88:	68fb      	ldr	r3, [r7, #12]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001a8 	.word	0x200001a8
 8000d9c:	200001aa 	.word	0x200001aa
 8000da0:	200001ac 	.word	0x200001ac
 8000da4:	200001c0 	.word	0x200001c0

08000da8 <BMP280_ReadPressure>:

int32_t BMP280_ReadPressure(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
    uint8_t pressureData[BMP280_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_PRESSURE, pressureData, BMP280_DATA_LEN)) {
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <BMP280_ReadPressure+0x38>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	1d39      	adds	r1, r7, #4
 8000db4:	2203      	movs	r2, #3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe72 	bl	8000aa0 <BMP280_RegisterRead>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <BMP280_ReadPressure+0x1e>
        return 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e008      	b.n	8000dd8 <BMP280_ReadPressure+0x30>
    }
    return (int32_t)((pressureData[0] << 16) | (pressureData[1] << 4) |(pressureData[2] >> 4));
 8000dc6:	793b      	ldrb	r3, [r7, #4]
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	797b      	ldrb	r3, [r7, #5]
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	79ba      	ldrb	r2, [r7, #6]
 8000dd2:	0912      	lsrs	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	4313      	orrs	r3, r2
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000040 	.word	0x20000040

08000de4 <BMP280_ConvertPressure>:

int32_t BMP280_ConvertPressure(int32_t rawPressure) {
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, P;

    var1 = (t_fine >> 1) - 64000;
 8000dec:	4b49      	ldr	r3, [pc, #292]	@ (8000f14 <BMP280_ConvertPressure+0x130>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	085b      	lsrs	r3, r3, #1
 8000df2:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8000df6:	613b      	str	r3, [r7, #16]
    var2 = ((var1 >> 2) * (var1 >> 2) >> 11) * dig_P6;
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	109b      	asrs	r3, r3, #2
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	1092      	asrs	r2, r2, #2
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	12db      	asrs	r3, r3, #11
 8000e06:	4a44      	ldr	r2, [pc, #272]	@ (8000f18 <BMP280_ConvertPressure+0x134>)
 8000e08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	60fb      	str	r3, [r7, #12]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8000e12:	4b42      	ldr	r3, [pc, #264]	@ (8000f1c <BMP280_ConvertPressure+0x138>)
 8000e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4413      	add	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	109a      	asrs	r2, r3, #2
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <BMP280_ConvertPressure+0x13c>)
 8000e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e32:	041b      	lsls	r3, r3, #16
 8000e34:	4413      	add	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
    var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8000e38:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <BMP280_ConvertPressure+0x140>)
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	109b      	asrs	r3, r3, #2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	1092      	asrs	r2, r2, #2
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	135b      	asrs	r3, r3, #13
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	10da      	asrs	r2, r3, #3
 8000e54:	4b34      	ldr	r3, [pc, #208]	@ (8000f28 <BMP280_ConvertPressure+0x144>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	fb01 f303 	mul.w	r3, r1, r3
 8000e62:	105b      	asrs	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	149b      	asrs	r3, r3, #18
 8000e68:	613b      	str	r3, [r7, #16]
    var1 = ((32768 + var1) * dig_P1) >> 25;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000e70:	4a2e      	ldr	r2, [pc, #184]	@ (8000f2c <BMP280_ConvertPressure+0x148>)
 8000e72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
 8000e7a:	165b      	asrs	r3, r3, #25
 8000e7c:	613b      	str	r3, [r7, #16]

    if (var1 == 0) {
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <BMP280_ConvertPressure+0xa4>
        return 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e03e      	b.n	8000f06 <BMP280_ConvertPressure+0x122>
    }

    P = ((1048576 - rawPressure) - (var2 >> 12)) * 3125;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	131b      	asrs	r3, r3, #12
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    if (P < 0x80000000) {
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db06      	blt.n	8000eb2 <BMP280_ConvertPressure+0xce>
        P = (P << 1) / var1;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005a      	lsls	r2, r3, #1
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e005      	b.n	8000ebe <BMP280_ConvertPressure+0xda>
    } else {
        P = (P / var1) * 2;
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
    }

    var1 = (dig_P9 * ((P >> 3) * (P >> 3) >> 13)) >> 12;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <BMP280_ConvertPressure+0x14c>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	10db      	asrs	r3, r3, #3
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	10d2      	asrs	r2, r2, #3
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	135b      	asrs	r3, r3, #13
 8000ed4:	fb01 f303 	mul.w	r3, r1, r3
 8000ed8:	131b      	asrs	r3, r3, #12
 8000eda:	613b      	str	r3, [r7, #16]
    var2 = ((P >> 2) * dig_P8) >> 13;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	109b      	asrs	r3, r3, #2
 8000ee0:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <BMP280_ConvertPressure+0x150>)
 8000ee2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	135b      	asrs	r3, r3, #13
 8000eec:	60fb      	str	r3, [r7, #12]
    P = (int32_t)(P + ((var1 + var2 + dig_P7) >> 4));
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <BMP280_ConvertPressure+0x154>)
 8000ef6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000efa:	4413      	add	r3, r2
 8000efc:	111b      	asrs	r3, r3, #4
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
    return P;
 8000f04:	697b      	ldr	r3, [r7, #20]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200001c0 	.word	0x200001c0
 8000f18:	200001b8 	.word	0x200001b8
 8000f1c:	200001b6 	.word	0x200001b6
 8000f20:	200001b4 	.word	0x200001b4
 8000f24:	200001b2 	.word	0x200001b2
 8000f28:	200001b0 	.word	0x200001b0
 8000f2c:	200001ae 	.word	0x200001ae
 8000f30:	200001be 	.word	0x200001be
 8000f34:	200001bc 	.word	0x200001bc
 8000f38:	200001ba 	.word	0x200001ba

08000f3c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <MX_CAN1_Init+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f48:	2205      	movs	r2, #5
 8000f4a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f5a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f5e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_CAN1_Init+0x64>)
 8000f8e:	f000 fd03 	bl	8001998 <HAL_CAN_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f98:	f000 fa5a 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001c4 	.word	0x200001c4
 8000fa4:	40006400 	.word	0x40006400

08000fa8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	@ (800102c <HAL_CAN_MspInit+0x84>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12c      	bne.n	8001024 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_CAN_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <HAL_CAN_MspInit+0x88>)
 8000fd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_CAN_MspInit+0x88>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_CAN_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_CAN_MspInit+0x88>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_CAN_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001014:	2309      	movs	r3, #9
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <HAL_CAN_MspInit+0x8c>)
 8001020:	f000 ffb0 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40006400 	.word	0x40006400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020400 	.word	0x40020400

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a1d      	ldr	r2, [pc, #116]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a16      	ldr	r2, [pc, #88]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_GPIO_Init+0x84>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_GPIO_Init+0x84>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_GPIO_Init+0x84>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <MX_GPIO_Init+0x84>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_GPIO_Init+0x84>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 f8d5 	bl	80022ac <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 f9a2 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001ec 	.word	0x200001ec
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12b      	bne.n	8001196 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23c0      	movs	r3, #192	@ 0xc0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116a:	2304      	movs	r3, #4
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001176:	f000 ff05 	bl	8001f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001184:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart3, (uint8_t*)&chr,1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2201      	movs	r2, #1
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <__io_putchar+0x20>)
 80011be:	f002 fef7 	bl	8003fb0 <HAL_UART_Transmit>
	return chr;
 80011c2:	687b      	ldr	r3, [r7, #4]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000268 	.word	0x20000268

080011d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011d4:	f000 fb4a 	bl	800186c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d8:	f000 f840 	bl	800125c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011dc:	f7ff ff2c 	bl	8001038 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011e0:	f000 fa48 	bl	8001674 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80011e4:	f7ff ff6c 	bl	80010c0 <MX_I2C1_Init>
	MX_CAN1_Init();
 80011e8:	f7ff fea8 	bl	8000f3c <MX_CAN1_Init>
	MX_USART3_UART_Init();
 80011ec:	f000 fa6c 	bl	80016c8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("=============TP BUS & RESEAUX ===========\r\n") ;
 80011f0:	4815      	ldr	r0, [pc, #84]	@ (8001248 <main+0x78>)
 80011f2:	f003 fc21 	bl	8004a38 <puts>
	BMP280_Init() ;
 80011f6:	f7ff fc85 	bl	8000b04 <BMP280_Init>
	//BMP280_ReadID() ;
	BMP280_Init();
 80011fa:	f7ff fc83 	bl	8000b04 <BMP280_Init>
	BMP280_ReadCalibrationData();  // Lecture des paramètres de calibration
 80011fe:	f7ff fcb7 	bl	8000b70 <BMP280_ReadCalibrationData>
	PI_Init();
 8001202:	f7ff fa09 	bl	8000618 <PI_Init>
	PI_RUN();
 8001206:	f7ff fbc7 	bl	8000998 <PI_RUN>

	pHeader.IDE = CAN_ID_STD;
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <main+0x7c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <main+0x7c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
	HAL_CAN_Start(&hcan1);
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <main+0x80>)
 8001218:	f000 fcb9 	bl	8001b8e <HAL_CAN_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Mesurer et afficher les valeurs de température et de pression
		 Measure_Display_Temp_Pressure();
 800121c:	f000 f890 	bl	8001340 <Measure_Display_Temp_Pressure>
		 CAN_SendMessage(AngleID, Angle90p, 2) ;
 8001220:	2202      	movs	r2, #2
 8001222:	490c      	ldr	r1, [pc, #48]	@ (8001254 <main+0x84>)
 8001224:	2061      	movs	r0, #97	@ 0x61
 8001226:	f000 f8dd 	bl	80013e4 <CAN_SendMessage>
		 HAL_Delay(1000);
 800122a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122e:	f000 fb8f 	bl	8001950 <HAL_Delay>
		 CAN_SendMessage(AngleID, Angle90m, 2) ;
 8001232:	2202      	movs	r2, #2
 8001234:	4908      	ldr	r1, [pc, #32]	@ (8001258 <main+0x88>)
 8001236:	2061      	movs	r0, #97	@ 0x61
 8001238:	f000 f8d4 	bl	80013e4 <CAN_SendMessage>
		 HAL_Delay(1000);
 800123c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001240:	f000 fb86 	bl	8001950 <HAL_Delay>
		 Measure_Display_Temp_Pressure();
 8001244:	bf00      	nop
 8001246:	e7e9      	b.n	800121c <main+0x4c>
 8001248:	08006650 	.word	0x08006650
 800124c:	20000248 	.word	0x20000248
 8001250:	200001c4 	.word	0x200001c4
 8001254:	20000044 	.word	0x20000044
 8001258:	20000048 	.word	0x20000048

0800125c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2234      	movs	r2, #52	@ 0x34
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fd24 	bl	8004cb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <SystemClock_Config+0xdc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <SystemClock_Config+0xdc>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <SystemClock_Config+0xdc>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <SystemClock_Config+0xe0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a25      	ldr	r2, [pc, #148]	@ (800133c <SystemClock_Config+0xe0>)
 80012a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b23      	ldr	r3, [pc, #140]	@ (800133c <SystemClock_Config+0xe0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80012d0:	23b4      	movs	r3, #180	@ 0xb4
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fb75 	bl	80039d4 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80012f0:	f000 f8ae 	bl	8001450 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012f4:	f001 ffd4 	bl	80032a0 <HAL_PWREx_EnableOverDrive>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80012fe:	f000 f8a7 	bl	8001450 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001302:	230f      	movs	r3, #15
 8001304:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	2302      	movs	r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800130e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001312:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	2105      	movs	r1, #5
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f80d 	bl	8003340 <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 800132c:	f000 f890 	bl	8001450 <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	@ 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <Measure_Display_Temp_Pressure>:

/* USER CODE BEGIN 4 */
void Measure_Display_Temp_Pressure(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    temperature = BMP280_ReadTemperature();
 8001344:	f7ff fccc 	bl	8000ce0 <BMP280_ReadTemperature>
 8001348:	4603      	mov	r3, r0
 800134a:	4a1f      	ldr	r2, [pc, #124]	@ (80013c8 <Measure_Display_Temp_Pressure+0x88>)
 800134c:	6013      	str	r3, [r2, #0]
    pressure = BMP280_ReadPressure();
 800134e:	f7ff fd2b 	bl	8000da8 <BMP280_ReadPressure>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <Measure_Display_Temp_Pressure+0x8c>)
 8001356:	6013      	str	r3, [r2, #0]

    if (temperature && pressure) {
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <Measure_Display_Temp_Pressure+0x88>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d02c      	beq.n	80013ba <Measure_Display_Temp_Pressure+0x7a>
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <Measure_Display_Temp_Pressure+0x8c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d028      	beq.n	80013ba <Measure_Display_Temp_Pressure+0x7a>
        printf("Température non compensée : %ld\r\n", temperature);
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <Measure_Display_Temp_Pressure+0x88>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4818      	ldr	r0, [pc, #96]	@ (80013d0 <Measure_Display_Temp_Pressure+0x90>)
 8001370:	f003 fafa 	bl	8004968 <iprintf>
        printf("Pression non compensée : %ld\r\n", pressure);
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <Measure_Display_Temp_Pressure+0x8c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	4816      	ldr	r0, [pc, #88]	@ (80013d4 <Measure_Display_Temp_Pressure+0x94>)
 800137c:	f003 faf4 	bl	8004968 <iprintf>

        temperature = BMP280_ConvertTemperature(temperature);
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <Measure_Display_Temp_Pressure+0x88>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fcc9 	bl	8000d1c <BMP280_ConvertTemperature>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <Measure_Display_Temp_Pressure+0x88>)
 800138e:	6013      	str	r3, [r2, #0]
        pressure = BMP280_ConvertPressure(pressure);
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <Measure_Display_Temp_Pressure+0x8c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd25 	bl	8000de4 <BMP280_ConvertPressure>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <Measure_Display_Temp_Pressure+0x8c>)
 800139e:	6013      	str	r3, [r2, #0]

        printf("Température compensée : %ld\r\n", temperature);
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <Measure_Display_Temp_Pressure+0x88>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <Measure_Display_Temp_Pressure+0x98>)
 80013a8:	f003 fade 	bl	8004968 <iprintf>
        printf("Pression compensée : %ld\r\n", pressure);
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <Measure_Display_Temp_Pressure+0x8c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	480a      	ldr	r0, [pc, #40]	@ (80013dc <Measure_Display_Temp_Pressure+0x9c>)
 80013b4:	f003 fad8 	bl	8004968 <iprintf>
 80013b8:	e003      	b.n	80013c2 <Measure_Display_Temp_Pressure+0x82>
    } else {
        printf("Erreur de lecture des données de température ou de pression\r\n");
 80013ba:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <Measure_Display_Temp_Pressure+0xa0>)
 80013bc:	f003 fb3c 	bl	8004a38 <puts>
    }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000240 	.word	0x20000240
 80013cc:	20000244 	.word	0x20000244
 80013d0:	0800667c 	.word	0x0800667c
 80013d4:	080066a0 	.word	0x080066a0
 80013d8:	080066c0 	.word	0x080066c0
 80013dc:	080066e0 	.word	0x080066e0
 80013e0:	080066fc 	.word	0x080066fc

080013e4 <CAN_SendMessage>:

void CAN_SendMessage(uint16_t id, uint8_t *data, uint8_t length) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	717b      	strb	r3, [r7, #5]
    pHeader.StdId = id;
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4a11      	ldr	r2, [pc, #68]	@ (800143c <CAN_SendMessage+0x58>)
 80013f8:	6013      	str	r3, [r2, #0]
    pHeader.DLC = length;
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <CAN_SendMessage+0x58>)
 80013fe:	6113      	str	r3, [r2, #16]

    if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &pTxMailbox) != HAL_OK) {
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <CAN_SendMessage+0x5c>)
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	490d      	ldr	r1, [pc, #52]	@ (800143c <CAN_SendMessage+0x58>)
 8001406:	480f      	ldr	r0, [pc, #60]	@ (8001444 <CAN_SendMessage+0x60>)
 8001408:	f000 fc05 	bl	8001c16 <HAL_CAN_AddTxMessage>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <CAN_SendMessage+0x3a>
        printf("Erreur d'envoi CAN pour l'ID: 0x%X\r\n", id);
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4619      	mov	r1, r3
 8001416:	480c      	ldr	r0, [pc, #48]	@ (8001448 <CAN_SendMessage+0x64>)
 8001418:	f003 faa6 	bl	8004968 <iprintf>
    } else {
        printf("Message CAN envoyé, ID: 0x%X, Data: 0x%X 0x%X\r\n", id, data[0], data[1]);
    }
}
 800141c:	e009      	b.n	8001432 <CAN_SendMessage+0x4e>
        printf("Message CAN envoyé, ID: 0x%X, Data: 0x%X 0x%X\r\n", id, data[0], data[1]);
 800141e:	88f9      	ldrh	r1, [r7, #6]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <CAN_SendMessage+0x68>)
 800142e:	f003 fa9b 	bl	8004968 <iprintf>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000248 	.word	0x20000248
 8001440:	20000260 	.word	0x20000260
 8001444:	200001c4 	.word	0x200001c4
 8001448:	0800673c 	.word	0x0800673c
 800144c:	08006764 	.word	0x08006764

08001450 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149a:	2007      	movs	r0, #7
 800149c:	f000 fd3e 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <NMI_Handler+0x4>

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001502:	f000 fa05 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}

0800150a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e00a      	b.n	8001532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151c:	f3af 8000 	nop.w
 8001520:	4601      	mov	r1, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf0      	blt.n	800151c <_read+0x12>
  }

  return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e009      	b.n	800156a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fe24 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbf1      	blt.n	8001556 <_write+0x12>
  }
  return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_close>:

int _close(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a4:	605a      	str	r2, [r3, #4]
  return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_isatty>:

int _isatty(int file)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	@ (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f003 fbb0 	bl	8004d78 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	220c      	movs	r2, #12
 800161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20020000 	.word	0x20020000
 8001644:	00000400 	.word	0x00000400
 8001648:	20000264 	.word	0x20000264
 800164c:	20000448 	.word	0x20000448

08001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <SystemInit+0x20>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <SystemInit+0x20>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MX_USART2_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016ac:	f002 fc30 	bl	8003f10 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f7ff fecb 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000268 	.word	0x20000268
 80016c4:	40004400 	.word	0x40004400

080016c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <MX_USART3_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART3_UART_Init+0x4c>)
 8001700:	f002 fc06 	bl	8003f10 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f7ff fea1 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200002b0 	.word	0x200002b0
 8001718:	40004800 	.word	0x40004800

0800171c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a32      	ldr	r2, [pc, #200]	@ (8001804 <HAL_UART_MspInit+0xe8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12c      	bne.n	8001798 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <HAL_UART_MspInit+0xec>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a30      	ldr	r2, [pc, #192]	@ (8001808 <HAL_UART_MspInit+0xec>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <HAL_UART_MspInit+0xec>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <HAL_UART_MspInit+0xec>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a29      	ldr	r2, [pc, #164]	@ (8001808 <HAL_UART_MspInit+0xec>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <HAL_UART_MspInit+0xec>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001776:	230c      	movs	r3, #12
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	481e      	ldr	r0, [pc, #120]	@ (800180c <HAL_UART_MspInit+0xf0>)
 8001792:	f000 fbf7 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001796:	e031      	b.n	80017fc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <HAL_UART_MspInit+0xf4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12c      	bne.n	80017fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_UART_MspInit+0xec>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_UART_MspInit+0xec>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_UART_MspInit+0xec>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <HAL_UART_MspInit+0xec>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	@ (8001808 <HAL_UART_MspInit+0xec>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_UART_MspInit+0xec>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	@ (8001814 <HAL_UART_MspInit+0xf8>)
 80017f8:	f000 fbc4 	bl	8001f84 <HAL_GPIO_Init>
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	@ 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004400 	.word	0x40004400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40004800 	.word	0x40004800
 8001814:	40020800 	.word	0x40020800

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800181c:	f7ff ff18 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001846:	f003 fa9d 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fcc1 	bl	80011d0 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800185c:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 8001860:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001864:	20000448 	.word	0x20000448

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 fb41 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fddc 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fb4b 	bl	8001f6a <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 fb21 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000004c 	.word	0x2000004c
 8001908:	20000054 	.word	0x20000054
 800190c:	20000050 	.word	0x20000050

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000054 	.word	0x20000054
 8001934:	200002f8 	.word	0x200002f8

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200002f8 	.word	0x200002f8

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000054 	.word	0x20000054

08001998 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0ed      	b.n	8001b86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff faf6 	bl	8000fa8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7ff ffb4 	bl	8001938 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019d2:	e012      	b.n	80019fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d4:	f7ff ffb0 	bl	8001938 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d90b      	bls.n	80019fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2205      	movs	r2, #5
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0c5      	b.n	8001b86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0e5      	beq.n	80019d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0202 	bic.w	r2, r2, #2
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff ff8e 	bl	8001938 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a1e:	e012      	b.n	8001a46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a20:	f7ff ff8a 	bl	8001938 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d90b      	bls.n	8001a46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e09f      	b.n	8001b86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1e5      	bne.n	8001a20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e1b      	ldrb	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e007      	b.n	8001a7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7e5b      	ldrb	r3, [r3, #25]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e007      	b.n	8001aa8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e9b      	ldrb	r3, [r3, #26]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0220 	orr.w	r2, r2, #32
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0220 	bic.w	r2, r2, #32
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7edb      	ldrb	r3, [r3, #27]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0210 	bic.w	r2, r2, #16
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e007      	b.n	8001afc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0210 	orr.w	r2, r2, #16
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7f1b      	ldrb	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0208 	orr.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0208 	bic.w	r2, r2, #8
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f5b      	ldrb	r3, [r3, #29]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0204 	orr.w	r2, r2, #4
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	ea42 0103 	orr.w	r1, r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d12e      	bne.n	8001c00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bba:	f7ff febd 	bl	8001938 <HAL_GetTick>
 8001bbe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bc0:	e012      	b.n	8001be8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc2:	f7ff feb9 	bl	8001938 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b0a      	cmp	r3, #10
 8001bce:	d90b      	bls.n	8001be8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2205      	movs	r2, #5
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e012      	b.n	8001c0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e5      	bne.n	8001bc2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e006      	b.n	8001c0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b089      	sub	sp, #36	@ 0x24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c34:	7ffb      	ldrb	r3, [r7, #31]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d003      	beq.n	8001c42 <HAL_CAN_AddTxMessage+0x2c>
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	f040 80ad 	bne.w	8001d9c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8095 	beq.w	8001d8c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	0e1b      	lsrs	r3, r3, #24
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	409a      	lsls	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10d      	bne.n	8001c9a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	6809      	ldr	r1, [r1, #0]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3318      	adds	r3, #24
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	440b      	add	r3, r1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e00f      	b.n	8001cba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3318      	adds	r3, #24
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	440b      	add	r3, r1
 8001cb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3318      	adds	r3, #24
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	440b      	add	r3, r1
 8001cca:	3304      	adds	r3, #4
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	7d1b      	ldrb	r3, [r3, #20]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d111      	bne.n	8001cfa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	6811      	ldr	r1, [r2, #0]
 8001cea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3318      	adds	r3, #24
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	061a      	lsls	r2, r3, #24
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3306      	adds	r3, #6
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3305      	adds	r3, #5
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	4313      	orrs	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	3204      	adds	r2, #4
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	6811      	ldr	r1, [r2, #0]
 8001d22:	ea43 0200 	orr.w	r2, r3, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3303      	adds	r3, #3
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	061a      	lsls	r2, r3, #24
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	4610      	mov	r0, r2
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	6811      	ldr	r1, [r2, #0]
 8001d58:	ea43 0200 	orr.w	r2, r3, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3318      	adds	r3, #24
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	6811      	ldr	r1, [r2, #0]
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3318      	adds	r3, #24
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	440b      	add	r3, r1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e00e      	b.n	8001daa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e006      	b.n	8001daa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	@ (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	@ (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff47 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff5c 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb0 	bl	8001ed8 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e165      	b.n	800226c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8154 	bne.w	8002266 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80ae 	beq.w	8002266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <HAL_GPIO_Init+0x300>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a5c      	ldr	r2, [pc, #368]	@ (8002284 <HAL_GPIO_Init+0x300>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b5a      	ldr	r3, [pc, #360]	@ (8002284 <HAL_GPIO_Init+0x300>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a58      	ldr	r2, [pc, #352]	@ (8002288 <HAL_GPIO_Init+0x304>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <HAL_GPIO_Init+0x308>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d025      	beq.n	800219e <HAL_GPIO_Init+0x21a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4e      	ldr	r2, [pc, #312]	@ (8002290 <HAL_GPIO_Init+0x30c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01f      	beq.n	800219a <HAL_GPIO_Init+0x216>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4d      	ldr	r2, [pc, #308]	@ (8002294 <HAL_GPIO_Init+0x310>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d019      	beq.n	8002196 <HAL_GPIO_Init+0x212>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4c      	ldr	r2, [pc, #304]	@ (8002298 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x20e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4b      	ldr	r2, [pc, #300]	@ (800229c <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x20a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4a      	ldr	r2, [pc, #296]	@ (80022a0 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x206>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a49      	ldr	r2, [pc, #292]	@ (80022a4 <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x202>
 8002182:	2306      	movs	r3, #6
 8002184:	e00c      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 8002186:	2307      	movs	r3, #7
 8002188:	e00a      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800218a:	2305      	movs	r3, #5
 800218c:	e008      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800218e:	2304      	movs	r3, #4
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 8002192:	2303      	movs	r3, #3
 8002194:	e004      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 8002196:	2302      	movs	r3, #2
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_GPIO_Init+0x21c>
 800219e:	2300      	movs	r3, #0
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f002 0203 	and.w	r2, r2, #3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4093      	lsls	r3, r2
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b0:	4935      	ldr	r1, [pc, #212]	@ (8002288 <HAL_GPIO_Init+0x304>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a26      	ldr	r2, [pc, #152]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002212:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002236:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002260:	4a11      	ldr	r2, [pc, #68]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b0f      	cmp	r3, #15
 8002270:	f67f ae96 	bls.w	8001fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40013800 	.word	0x40013800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40020800 	.word	0x40020800
 8002298:	40020c00 	.word	0x40020c00
 800229c:	40021000 	.word	0x40021000
 80022a0:	40021400 	.word	0x40021400
 80022a4:	40021800 	.word	0x40021800
 80022a8:	40013c00 	.word	0x40013c00

080022ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e12b      	b.n	8002516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe ff22 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	@ 0x24
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800230e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002310:	f001 f908 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a81      	ldr	r2, [pc, #516]	@ (8002520 <HAL_I2C_Init+0x274>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d807      	bhi.n	8002330 <HAL_I2C_Init+0x84>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a80      	ldr	r2, [pc, #512]	@ (8002524 <HAL_I2C_Init+0x278>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e006      	b.n	800233e <HAL_I2C_Init+0x92>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a7d      	ldr	r2, [pc, #500]	@ (8002528 <HAL_I2C_Init+0x27c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0e7      	b.n	8002516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a78      	ldr	r2, [pc, #480]	@ (800252c <HAL_I2C_Init+0x280>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a6a      	ldr	r2, [pc, #424]	@ (8002520 <HAL_I2C_Init+0x274>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d802      	bhi.n	8002380 <HAL_I2C_Init+0xd4>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3301      	adds	r3, #1
 800237e:	e009      	b.n	8002394 <HAL_I2C_Init+0xe8>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a69      	ldr	r2, [pc, #420]	@ (8002530 <HAL_I2C_Init+0x284>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	3301      	adds	r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	495c      	ldr	r1, [pc, #368]	@ (8002520 <HAL_I2C_Init+0x274>)
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d819      	bhi.n	80023e8 <HAL_I2C_Init+0x13c>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e59      	subs	r1, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023c8:	400b      	ands	r3, r1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_I2C_Init+0x138>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e59      	subs	r1, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	e051      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e04f      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_I2C_Init+0x168>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e012      	b.n	800243a <HAL_I2C_Init+0x18e>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e58      	subs	r0, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	0099      	lsls	r1, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	fbb0 f3f3 	udiv	r3, r0, r3
 800242a:	3301      	adds	r3, #1
 800242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Init+0x196>
 800243e:	2301      	movs	r3, #1
 8002440:	e022      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10e      	bne.n	8002468 <HAL_I2C_Init+0x1bc>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e58      	subs	r0, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	440b      	add	r3, r1
 8002458:	fbb0 f3f3 	udiv	r3, r0, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e58      	subs	r0, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	0099      	lsls	r1, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6809      	ldr	r1, [r1, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6911      	ldr	r1, [r2, #16]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	000186a0 	.word	0x000186a0
 8002524:	001e847f 	.word	0x001e847f
 8002528:	003d08ff 	.word	0x003d08ff
 800252c:	431bde83 	.word	0x431bde83
 8002530:	10624dd3 	.word	0x10624dd3

08002534 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	460b      	mov	r3, r1
 8002542:	817b      	strh	r3, [r7, #10]
 8002544:	4613      	mov	r3, r2
 8002546:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff f9f6 	bl	8001938 <HAL_GetTick>
 800254c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b20      	cmp	r3, #32
 8002558:	f040 80e0 	bne.w	800271c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2319      	movs	r3, #25
 8002562:	2201      	movs	r2, #1
 8002564:	4970      	ldr	r1, [pc, #448]	@ (8002728 <HAL_I2C_Master_Transmit+0x1f4>)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fc64 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	e0d3      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_I2C_Master_Transmit+0x50>
 8002580:	2302      	movs	r3, #2
 8002582:	e0cc      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d007      	beq.n	80025aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2221      	movs	r2, #33	@ 0x21
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2210      	movs	r2, #16
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	893a      	ldrh	r2, [r7, #8]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a50      	ldr	r2, [pc, #320]	@ (800272c <HAL_I2C_Master_Transmit+0x1f8>)
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 face 	bl	8002b94 <I2C_MasterRequestWrite>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e08d      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002618:	e066      	b.n	80026e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fd22 	bl	8003068 <I2C_WaitOnTXEFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	2b04      	cmp	r3, #4
 8002630:	d107      	bne.n	8002642 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11b      	bne.n	80026bc <HAL_I2C_Master_Transmit+0x188>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	d017      	beq.n	80026bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	6a39      	ldr	r1, [r7, #32]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fd19 	bl	80030f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d107      	bne.n	80026e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e01a      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d194      	bne.n	800261a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e000      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	00100002 	.word	0x00100002
 800272c:	ffff0000 	.word	0xffff0000

08002730 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	@ 0x30
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff f8f8 	bl	8001938 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b20      	cmp	r3, #32
 8002754:	f040 8217 	bne.w	8002b86 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2319      	movs	r3, #25
 800275e:	2201      	movs	r2, #1
 8002760:	497c      	ldr	r1, [pc, #496]	@ (8002954 <HAL_I2C_Master_Receive+0x224>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fb66 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
 8002770:	e20a      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_I2C_Master_Receive+0x50>
 800277c:	2302      	movs	r3, #2
 800277e:	e203      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d007      	beq.n	80027a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2222      	movs	r2, #34	@ 0x22
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2210      	movs	r2, #16
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	893a      	ldrh	r2, [r7, #8]
 80027d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002958 <HAL_I2C_Master_Receive+0x228>)
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fa52 	bl	8002c98 <I2C_MasterRequestRead>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e1c4      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d113      	bne.n	800282e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	623b      	str	r3, [r7, #32]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e198      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	2b01      	cmp	r3, #1
 8002834:	d11b      	bne.n	800286e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e178      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002872:	2b02      	cmp	r3, #2
 8002874:	d11b      	bne.n	80028ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002884:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	e158      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028d4:	e144      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	2b03      	cmp	r3, #3
 80028dc:	f200 80f1 	bhi.w	8002ac2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d123      	bne.n	8002930 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fc4b 	bl	8003188 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e145      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800292e:	e117      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	2b02      	cmp	r3, #2
 8002936:	d14e      	bne.n	80029d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	2200      	movs	r2, #0
 8002940:	4906      	ldr	r1, [pc, #24]	@ (800295c <HAL_I2C_Master_Receive+0x22c>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fa76 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e11a      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
 8002952:	bf00      	nop
 8002954:	00100002 	.word	0x00100002
 8002958:	ffff0000 	.word	0xffff0000
 800295c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029d4:	e0c4      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029dc:	2200      	movs	r2, #0
 80029de:	496c      	ldr	r1, [pc, #432]	@ (8002b90 <HAL_I2C_Master_Receive+0x460>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fa27 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0cb      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4955      	ldr	r1, [pc, #340]	@ (8002b90 <HAL_I2C_Master_Receive+0x460>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f9f9 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e09d      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ac0:	e04e      	b.n	8002b60 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fb5e 	bl	8003188 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e058      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d124      	bne.n	8002b60 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b2c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f aeb6 	bne.w	80028d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	@ 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	00010004 	.word	0x00010004

08002b94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d006      	beq.n	8002bbe <I2C_MasterRequestWrite+0x2a>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d003      	beq.n	8002bbe <I2C_MasterRequestWrite+0x2a>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bbc:	d108      	bne.n	8002bd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e00b      	b.n	8002be8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d107      	bne.n	8002be8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f91d 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c0e:	d103      	bne.n	8002c18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e035      	b.n	8002c88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c24:	d108      	bne.n	8002c38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e01b      	b.n	8002c70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	11db      	asrs	r3, r3, #7
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0306 	and.w	r3, r3, #6
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f063 030f 	orn	r3, r3, #15
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	490e      	ldr	r1, [pc, #56]	@ (8002c90 <I2C_MasterRequestWrite+0xfc>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f966 	bl	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e010      	b.n	8002c88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <I2C_MasterRequestWrite+0x100>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f956 	bl	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00010008 	.word	0x00010008
 8002c94:	00010002 	.word	0x00010002

08002c98 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d006      	beq.n	8002cd2 <I2C_MasterRequestRead+0x3a>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d003      	beq.n	8002cd2 <I2C_MasterRequestRead+0x3a>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e00b      	b.n	8002cfc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	2b11      	cmp	r3, #17
 8002cea:	d107      	bne.n	8002cfc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f893 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d22:	d103      	bne.n	8002d2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e079      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d38:	d108      	bne.n	8002d4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]
 8002d4a:	e05f      	b.n	8002e0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	11db      	asrs	r3, r3, #7
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 0306 	and.w	r3, r3, #6
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f063 030f 	orn	r3, r3, #15
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4930      	ldr	r1, [pc, #192]	@ (8002e2c <I2C_MasterRequestRead+0x194>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f8dc 	bl	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e054      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4929      	ldr	r1, [pc, #164]	@ (8002e30 <I2C_MasterRequestRead+0x198>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f8cc 	bl	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e044      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f831 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00d      	beq.n	8002df4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de6:	d103      	bne.n	8002df0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e017      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002df4:	897b      	ldrh	r3, [r7, #10]
 8002df6:	11db      	asrs	r3, r3, #7
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f063 030e 	orn	r3, r3, #14
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4907      	ldr	r1, [pc, #28]	@ (8002e30 <I2C_MasterRequestRead+0x198>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f888 	bl	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00010008 	.word	0x00010008
 8002e30:	00010002 	.word	0x00010002

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e048      	b.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d044      	beq.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fd73 	bl	8001938 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d139      	bne.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10d      	bne.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	e00c      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d116      	bne.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e023      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d10d      	bne.n	8002efe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	e00c      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d093      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f36:	e071      	b.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d123      	bne.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	f043 0204 	orr.w	r2, r3, #4
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e067      	b.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d041      	beq.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7fe fcce 	bl	8001938 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d136      	bne.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10c      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e00b      	b.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e021      	b.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10c      	bne.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	43da      	mvns	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e00b      	b.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f af6d 	bne.w	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003074:	e034      	b.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f8e3 	bl	8003242 <I2C_IsAcknowledgeFailed>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e034      	b.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d028      	beq.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fe fc53 	bl	8001938 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11d      	bne.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d016      	beq.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ea:	2b80      	cmp	r3, #128	@ 0x80
 80030ec:	d1c3      	bne.n	8003076 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003104:	e034      	b.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f89b 	bl	8003242 <I2C_IsAcknowledgeFailed>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e034      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d028      	beq.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fc0b 	bl	8001938 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11d      	bne.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d016      	beq.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e007      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d1c3      	bne.n	8003106 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003194:	e049      	b.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d119      	bne.n	80031d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0210 	mvn.w	r2, #16
 80031ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e030      	b.n	800323a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d8:	f7fe fbae 	bl	8001938 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d302      	bcc.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11d      	bne.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d016      	beq.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e007      	b.n	800323a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003234:	2b40      	cmp	r3, #64	@ 0x40
 8003236:	d1ae      	bne.n	8003196 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003258:	d11b      	bne.n	8003292 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003262:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f043 0204 	orr.w	r2, r3, #4
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_PWREx_EnableOverDrive+0x90>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003330 <HAL_PWREx_EnableOverDrive+0x90>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_PWREx_EnableOverDrive+0x90>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003334 <HAL_PWREx_EnableOverDrive+0x94>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032cc:	f7fe fb34 	bl	8001938 <HAL_GetTick>
 80032d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032d2:	e009      	b.n	80032e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d4:	f7fe fb30 	bl	8001938 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032e2:	d901      	bls.n	80032e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e01f      	b.n	8003328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032e8:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <HAL_PWREx_EnableOverDrive+0x98>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d1ee      	bne.n	80032d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032f6:	4b11      	ldr	r3, [pc, #68]	@ (800333c <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032fc:	f7fe fb1c 	bl	8001938 <HAL_GetTick>
 8003300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003302:	e009      	b.n	8003318 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003304:	f7fe fb18 	bl	8001938 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003312:	d901      	bls.n	8003318 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e007      	b.n	8003328 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003318:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <HAL_PWREx_EnableOverDrive+0x98>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003324:	d1ee      	bne.n	8003304 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	420e0040 	.word	0x420e0040
 8003338:	40007000 	.word	0x40007000
 800333c:	420e0044 	.word	0x420e0044

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0cc      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b68      	ldr	r3, [pc, #416]	@ (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d90c      	bls.n	800337c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b65      	ldr	r3, [pc, #404]	@ (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	@ (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a58      	ldr	r2, [pc, #352]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800339e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a52      	ldr	r2, [pc, #328]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d044      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d119      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e067      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b37      	ldr	r3, [pc, #220]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4934      	ldr	r1, [pc, #208]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7fe fa82 	bl	8001938 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fe fa7e 	bl	8001938 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e04f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b2b      	ldr	r3, [pc, #172]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b25      	ldr	r3, [pc, #148]	@ (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d20c      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f855 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490a      	ldr	r1, [pc, #40]	@ (8003500 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe f9e2 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	080067a4 	.word	0x080067a4
 8003504:	2000004c 	.word	0x2000004c
 8003508:	20000050 	.word	0x20000050

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000004c 	.word	0x2000004c

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003528:	f7ff fff0 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	@ (8003548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	080067b4 	.word	0x080067b4

0800354c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003550:	f7ff ffdc 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0b5b      	lsrs	r3, r3, #13
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	@ (8003570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	080067b4 	.word	0x080067b4

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b0ae      	sub	sp, #184	@ 0xb8
 800357a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359a:	4bcb      	ldr	r3, [pc, #812]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	f200 8206 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x440>
 80035a8:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080039b5 	.word	0x080039b5
 80035b8:	080039b5 	.word	0x080039b5
 80035bc:	080039b5 	.word	0x080039b5
 80035c0:	080035ed 	.word	0x080035ed
 80035c4:	080039b5 	.word	0x080039b5
 80035c8:	080039b5 	.word	0x080039b5
 80035cc:	080039b5 	.word	0x080039b5
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080039b5 	.word	0x080039b5
 80035d8:	080039b5 	.word	0x080039b5
 80035dc:	080039b5 	.word	0x080039b5
 80035e0:	080037e5 	.word	0x080037e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e4:	4bb9      	ldr	r3, [pc, #740]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x358>)
 80035e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ea:	e1e7      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ec:	4bb8      	ldr	r3, [pc, #736]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035f2:	e1e3      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f4:	4bb4      	ldr	r3, [pc, #720]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003600:	4bb1      	ldr	r3, [pc, #708]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d071      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360c:	4bae      	ldr	r3, [pc, #696]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003618:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800361c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800362e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003632:	4622      	mov	r2, r4
 8003634:	462b      	mov	r3, r5
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	0159      	lsls	r1, r3, #5
 8003640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003644:	0150      	lsls	r0, r2, #5
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4621      	mov	r1, r4
 800364c:	1a51      	subs	r1, r2, r1
 800364e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003650:	4629      	mov	r1, r5
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	647b      	str	r3, [r7, #68]	@ 0x44
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003664:	4649      	mov	r1, r9
 8003666:	018b      	lsls	r3, r1, #6
 8003668:	4641      	mov	r1, r8
 800366a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366e:	4641      	mov	r1, r8
 8003670:	018a      	lsls	r2, r1, #6
 8003672:	4641      	mov	r1, r8
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003678:	4649      	mov	r1, r9
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800368c:	4649      	mov	r1, r9
 800368e:	00cb      	lsls	r3, r1, #3
 8003690:	4641      	mov	r1, r8
 8003692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003696:	4641      	mov	r1, r8
 8003698:	00ca      	lsls	r2, r1, #3
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	4622      	mov	r2, r4
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a6:	462b      	mov	r3, r5
 80036a8:	460a      	mov	r2, r1
 80036aa:	eb42 0303 	adc.w	r3, r2, r3
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036bc:	4629      	mov	r1, r5
 80036be:	024b      	lsls	r3, r1, #9
 80036c0:	4621      	mov	r1, r4
 80036c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036c6:	4621      	mov	r1, r4
 80036c8:	024a      	lsls	r2, r1, #9
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80036e0:	f7fc fdfe 	bl	80002e0 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ee:	e067      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f0:	4b75      	ldr	r3, [pc, #468]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800370a:	2300      	movs	r3, #0
 800370c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800370e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003712:	4622      	mov	r2, r4
 8003714:	462b      	mov	r3, r5
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003724:	0150      	lsls	r0, r2, #5
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4621      	mov	r1, r4
 800372c:	1a51      	subs	r1, r2, r1
 800372e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003730:	4629      	mov	r1, r5
 8003732:	eb63 0301 	sbc.w	r3, r3, r1
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003744:	4649      	mov	r1, r9
 8003746:	018b      	lsls	r3, r1, #6
 8003748:	4641      	mov	r1, r8
 800374a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374e:	4641      	mov	r1, r8
 8003750:	018a      	lsls	r2, r1, #6
 8003752:	4641      	mov	r1, r8
 8003754:	ebb2 0a01 	subs.w	sl, r2, r1
 8003758:	4649      	mov	r1, r9
 800375a:	eb63 0b01 	sbc.w	fp, r3, r1
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800376a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800376e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003772:	4692      	mov	sl, r2
 8003774:	469b      	mov	fp, r3
 8003776:	4623      	mov	r3, r4
 8003778:	eb1a 0303 	adds.w	r3, sl, r3
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	462b      	mov	r3, r5
 8003780:	eb4b 0303 	adc.w	r3, fp, r3
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003792:	4629      	mov	r1, r5
 8003794:	028b      	lsls	r3, r1, #10
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800379c:	4621      	mov	r1, r4
 800379e:	028a      	lsls	r2, r1, #10
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037a8:	2200      	movs	r2, #0
 80037aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80037ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80037ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037b2:	f7fc fd95 	bl	80002e0 <__aeabi_uldivmod>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4613      	mov	r3, r2
 80037bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037c0:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80037d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037e2:	e0eb      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e4:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037f0:	4b35      	ldr	r3, [pc, #212]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d06b      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fc:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	2200      	movs	r2, #0
 8003804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800380a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003810:	2300      	movs	r3, #0
 8003812:	667b      	str	r3, [r7, #100]	@ 0x64
 8003814:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003818:	4622      	mov	r2, r4
 800381a:	462b      	mov	r3, r5
 800381c:	f04f 0000 	mov.w	r0, #0
 8003820:	f04f 0100 	mov.w	r1, #0
 8003824:	0159      	lsls	r1, r3, #5
 8003826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382a:	0150      	lsls	r0, r2, #5
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4621      	mov	r1, r4
 8003832:	1a51      	subs	r1, r2, r1
 8003834:	61b9      	str	r1, [r7, #24]
 8003836:	4629      	mov	r1, r5
 8003838:	eb63 0301 	sbc.w	r3, r3, r1
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800384a:	4659      	mov	r1, fp
 800384c:	018b      	lsls	r3, r1, #6
 800384e:	4651      	mov	r1, sl
 8003850:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003854:	4651      	mov	r1, sl
 8003856:	018a      	lsls	r2, r1, #6
 8003858:	4651      	mov	r1, sl
 800385a:	ebb2 0801 	subs.w	r8, r2, r1
 800385e:	4659      	mov	r1, fp
 8003860:	eb63 0901 	sbc.w	r9, r3, r1
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003870:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003874:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003878:	4690      	mov	r8, r2
 800387a:	4699      	mov	r9, r3
 800387c:	4623      	mov	r3, r4
 800387e:	eb18 0303 	adds.w	r3, r8, r3
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	462b      	mov	r3, r5
 8003886:	eb49 0303 	adc.w	r3, r9, r3
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003898:	4629      	mov	r1, r5
 800389a:	024b      	lsls	r3, r1, #9
 800389c:	4621      	mov	r1, r4
 800389e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038a2:	4621      	mov	r1, r4
 80038a4:	024a      	lsls	r2, r1, #9
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038ae:	2200      	movs	r2, #0
 80038b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80038b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038b8:	f7fc fd12 	bl	80002e0 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038c6:	e065      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x420>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d4:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x458>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	099b      	lsrs	r3, r3, #6
 80038da:	2200      	movs	r2, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	4611      	mov	r1, r2
 80038e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80038e6:	2300      	movs	r3, #0
 80038e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	0159      	lsls	r1, r3, #5
 80038fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003900:	0150      	lsls	r0, r2, #5
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4641      	mov	r1, r8
 8003908:	1a51      	subs	r1, r2, r1
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	4649      	mov	r1, r9
 800390e:	eb63 0301 	sbc.w	r3, r3, r1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003920:	4659      	mov	r1, fp
 8003922:	018b      	lsls	r3, r1, #6
 8003924:	4651      	mov	r1, sl
 8003926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800392a:	4651      	mov	r1, sl
 800392c:	018a      	lsls	r2, r1, #6
 800392e:	4651      	mov	r1, sl
 8003930:	1a54      	subs	r4, r2, r1
 8003932:	4659      	mov	r1, fp
 8003934:	eb63 0501 	sbc.w	r5, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	00eb      	lsls	r3, r5, #3
 8003942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003946:	00e2      	lsls	r2, r4, #3
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	4643      	mov	r3, r8
 800394e:	18e3      	adds	r3, r4, r3
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	464b      	mov	r3, r9
 8003954:	eb45 0303 	adc.w	r3, r5, r3
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003966:	4629      	mov	r1, r5
 8003968:	028b      	lsls	r3, r1, #10
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003970:	4621      	mov	r1, r4
 8003972:	028a      	lsls	r2, r1, #10
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800397c:	2200      	movs	r2, #0
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003980:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003982:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003986:	f7fc fcab 	bl	80002e0 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4613      	mov	r3, r2
 8003990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003994:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	0f1b      	lsrs	r3, r3, #28
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80039a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039b2:	e003      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80039b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	37b8      	adds	r7, #184	@ 0xb8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	00f42400 	.word	0x00f42400

080039d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e28d      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8083 	beq.w	8003afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039f4:	4b94      	ldr	r3, [pc, #592]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d019      	beq.n	8003a34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a00:	4b91      	ldr	r3, [pc, #580]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a18:	d00c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d112      	bne.n	8003a4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a26:	4b88      	ldr	r3, [pc, #544]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	4b84      	ldr	r3, [pc, #528]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d05b      	beq.n	8003af8 <HAL_RCC_OscConfig+0x124>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d157      	bne.n	8003af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e25a      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a54:	d106      	bne.n	8003a64 <HAL_RCC_OscConfig+0x90>
 8003a56:	4b7c      	ldr	r3, [pc, #496]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <HAL_RCC_OscConfig+0xcc>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0xb4>
 8003a6e:	4b76      	ldr	r3, [pc, #472]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a75      	ldr	r2, [pc, #468]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b73      	ldr	r3, [pc, #460]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a72      	ldr	r2, [pc, #456]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0xcc>
 8003a88:	4b6f      	ldr	r3, [pc, #444]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b6c      	ldr	r3, [pc, #432]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6b      	ldr	r2, [pc, #428]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd ff46 	bl	8001938 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fd ff42 	bl	8001938 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	@ 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e21f      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b61      	ldr	r3, [pc, #388]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xdc>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd ff32 	bl	8001938 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fd ff2e 	bl	8001938 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	@ 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e20b      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	4b57      	ldr	r3, [pc, #348]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x104>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d06f      	beq.n	8003be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b06:	4b50      	ldr	r3, [pc, #320]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b12:	4b4d      	ldr	r3, [pc, #308]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b47      	ldr	r3, [pc, #284]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d11c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b36:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	4b41      	ldr	r3, [pc, #260]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x186>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e1d3      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4937      	ldr	r1, [pc, #220]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	e03a      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b78:	4b34      	ldr	r3, [pc, #208]	@ (8003c4c <HAL_RCC_OscConfig+0x278>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fedb 	bl	8001938 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fd fed7 	bl	8001938 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1b4      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b28      	ldr	r3, [pc, #160]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4925      	ldr	r1, [pc, #148]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <HAL_RCC_OscConfig+0x278>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd feba 	bl	8001938 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fd feb6 	bl	8001938 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e193      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d036      	beq.n	8003c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	4b15      	ldr	r3, [pc, #84]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fe9a 	bl	8001938 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd fe96 	bl	8001938 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e173      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x234>
 8003c26:	e01b      	b.n	8003c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fe83 	bl	8001938 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	e00e      	b.n	8003c54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fd fe7f 	bl	8001938 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d907      	bls.n	8003c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e15c      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	42470000 	.word	0x42470000
 8003c50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	4b8a      	ldr	r3, [pc, #552]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ea      	bne.n	8003c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8097 	beq.w	8003d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b83      	ldr	r3, [pc, #524]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	4b7f      	ldr	r3, [pc, #508]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	4a7e      	ldr	r2, [pc, #504]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b79      	ldr	r3, [pc, #484]	@ (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b76      	ldr	r3, [pc, #472]	@ (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a75      	ldr	r2, [pc, #468]	@ (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fe3f 	bl	8001938 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fd fe3b 	bl	8001938 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e118      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e84 <HAL_RCC_OscConfig+0x4b0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x31e>
 8003ce4:	4b66      	ldr	r3, [pc, #408]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	4a65      	ldr	r2, [pc, #404]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x358>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x340>
 8003cfa:	4b61      	ldr	r3, [pc, #388]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	4a60      	ldr	r2, [pc, #384]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d06:	4b5e      	ldr	r3, [pc, #376]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0x358>
 8003d14:	4b5a      	ldr	r3, [pc, #360]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4a59      	ldr	r2, [pc, #356]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d20:	4b57      	ldr	r3, [pc, #348]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d24:	4a56      	ldr	r2, [pc, #344]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d26:	f023 0304 	bic.w	r3, r3, #4
 8003d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd fe00 	bl	8001938 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fdfc 	bl	8001938 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0d7      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	4b4b      	ldr	r3, [pc, #300]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_RCC_OscConfig+0x368>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd fdea 	bl	8001938 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd fde6 	bl	8001938 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0c1      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	4b40      	ldr	r3, [pc, #256]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ee      	bne.n	8003d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b3b      	ldr	r3, [pc, #236]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	4a3a      	ldr	r2, [pc, #232]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80ad 	beq.w	8003f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da6:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d060      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d145      	bne.n	8003e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b33      	ldr	r3, [pc, #204]	@ (8003e88 <HAL_RCC_OscConfig+0x4b4>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fdba 	bl	8001938 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd fdb6 	bl	8001938 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e093      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	491b      	ldr	r1, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <HAL_RCC_OscConfig+0x4b4>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fd8b 	bl	8001938 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd fd87 	bl	8001938 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e064      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x452>
 8003e44:	e05c      	b.n	8003f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <HAL_RCC_OscConfig+0x4b4>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fd74 	bl	8001938 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd fd70 	bl	8001938 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04d      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x480>
 8003e72:	e045      	b.n	8003f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e040      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <HAL_RCC_OscConfig+0x538>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d030      	beq.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d129      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d122      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d119      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d10f      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e042      	b.n	8003fa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fbf0 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	@ 0x24
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f9d1 	bl	80042fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d175      	bne.n	80040bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Transmit+0x2c>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e06e      	b.n	80040be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2221      	movs	r2, #33	@ 0x21
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fee:	f7fd fca3 	bl	8001938 <HAL_GetTick>
 8003ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004008:	d108      	bne.n	800401c <HAL_UART_Transmit+0x6c>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	e003      	b.n	8004024 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004024:	e02e      	b.n	8004084 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	2180      	movs	r1, #128	@ 0x80
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f86d 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e03a      	b.n	80040be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800405c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	3302      	adds	r3, #2
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e007      	b.n	8004076 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1cb      	bne.n	8004026 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	2140      	movs	r1, #64	@ 0x40
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f839 	bl	8004110 <UART_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d112      	bne.n	8004106 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Receive_IT+0x26>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e00b      	b.n	8004108 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	461a      	mov	r2, r3
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f860 	bl	80041c2 <UART_Start_Receive_IT>
 8004102:	4603      	mov	r3, r0
 8004104:	e000      	b.n	8004108 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004120:	e03b      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d037      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fd fc05 	bl	8001938 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <UART_WaitOnFlagUntilTimeout+0x30>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e03a      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d023      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b80      	cmp	r3, #128	@ 0x80
 8004156:	d020      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b40      	cmp	r3, #64	@ 0x40
 800415c:	d01d      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d116      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f857 	bl	8004236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2208      	movs	r2, #8
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0b4      	beq.n	8004122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	88fa      	ldrh	r2, [r7, #6]
 80041e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	@ 0x22
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004206:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0220 	orr.w	r2, r2, #32
 8004226:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004236:	b480      	push	{r7}
 8004238:	b095      	sub	sp, #84	@ 0x54
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800425e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	61fb      	str	r3, [r7, #28]
   return(result);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d119      	bne.n	80042e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ce:	61ba      	str	r2, [r7, #24]
 80042d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6979      	ldr	r1, [r7, #20]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	613b      	str	r3, [r7, #16]
   return(result);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042f0:	bf00      	nop
 80042f2:	3754      	adds	r7, #84	@ 0x54
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b0c0      	sub	sp, #256	@ 0x100
 8004302:	af00      	add	r7, sp, #0
 8004304:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	ea40 0301 	orr.w	r3, r0, r1
 8004324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004354:	f021 010c 	bic.w	r1, r1, #12
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004362:	430b      	orrs	r3, r1
 8004364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	6999      	ldr	r1, [r3, #24]
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	ea40 0301 	orr.w	r3, r0, r1
 8004382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <UART_SetConfig+0x2cc>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <UART_SetConfig+0xa0>
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b8d      	ldr	r3, [pc, #564]	@ (80045cc <UART_SetConfig+0x2d0>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d104      	bne.n	80043a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7ff f8d6 	bl	800354c <HAL_RCC_GetPCLK2Freq>
 80043a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043a4:	e003      	b.n	80043ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7ff f8bd 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 80043aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b8:	f040 810c 	bne.w	80045d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043d6:	415b      	adcs	r3, r3
 80043d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043de:	4621      	mov	r1, r4
 80043e0:	eb12 0801 	adds.w	r8, r2, r1
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb43 0901 	adc.w	r9, r3, r1
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4623      	mov	r3, r4
 8004404:	eb18 0303 	adds.w	r3, r8, r3
 8004408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800440c:	462b      	mov	r3, r5
 800440e:	eb49 0303 	adc.w	r3, r9, r3
 8004412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004422:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800442a:	460b      	mov	r3, r1
 800442c:	18db      	adds	r3, r3, r3
 800442e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004430:	4613      	mov	r3, r2
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	657b      	str	r3, [r7, #84]	@ 0x54
 8004438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800443c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004440:	f7fb ff4e 	bl	80002e0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800445c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800446c:	415b      	adcs	r3, r3
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004474:	4641      	mov	r1, r8
 8004476:	eb12 0a01 	adds.w	sl, r2, r1
 800447a:	4649      	mov	r1, r9
 800447c:	eb43 0b01 	adc.w	fp, r3, r1
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800448c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004494:	4692      	mov	sl, r2
 8004496:	469b      	mov	fp, r3
 8004498:	4643      	mov	r3, r8
 800449a:	eb1a 0303 	adds.w	r3, sl, r3
 800449e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044a2:	464b      	mov	r3, r9
 80044a4:	eb4b 0303 	adc.w	r3, fp, r3
 80044a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044d6:	f7fb ff03 	bl	80002e0 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80044e2:	fba3 2301 	umull	r2, r3, r3, r1
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2264      	movs	r2, #100	@ 0x64
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	1acb      	subs	r3, r1, r3
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80044f8:	fba3 2302 	umull	r2, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004504:	441c      	add	r4, r3
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004510:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004520:	415b      	adcs	r3, r3
 8004522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004528:	4641      	mov	r1, r8
 800452a:	1851      	adds	r1, r2, r1
 800452c:	6339      	str	r1, [r7, #48]	@ 0x30
 800452e:	4649      	mov	r1, r9
 8004530:	414b      	adcs	r3, r1
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004540:	4659      	mov	r1, fp
 8004542:	00cb      	lsls	r3, r1, #3
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454a:	4651      	mov	r1, sl
 800454c:	00ca      	lsls	r2, r1, #3
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	4603      	mov	r3, r0
 8004554:	4642      	mov	r2, r8
 8004556:	189b      	adds	r3, r3, r2
 8004558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800455c:	464b      	mov	r3, r9
 800455e:	460a      	mov	r2, r1
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004574:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800457c:	460b      	mov	r3, r1
 800457e:	18db      	adds	r3, r3, r3
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004582:	4613      	mov	r3, r2
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800458e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004592:	f7fb fea5 	bl	80002e0 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <UART_SetConfig+0x2d4>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	@ 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	3332      	adds	r3, #50	@ 0x32
 80045ae:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 0207 	and.w	r2, r3, #7
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4422      	add	r2, r4
 80045c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045c4:	e106      	b.n	80047d4 <UART_SetConfig+0x4d8>
 80045c6:	bf00      	nop
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40011400 	.word	0x40011400
 80045d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	6239      	str	r1, [r7, #32]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f6:	4641      	mov	r1, r8
 80045f8:	1854      	adds	r4, r2, r1
 80045fa:	4649      	mov	r1, r9
 80045fc:	eb43 0501 	adc.w	r5, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	00eb      	lsls	r3, r5, #3
 800460a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460e:	00e2      	lsls	r2, r4, #3
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	4643      	mov	r3, r8
 8004616:	18e3      	adds	r3, r4, r3
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800461c:	464b      	mov	r3, r9
 800461e:	eb45 0303 	adc.w	r3, r5, r3
 8004622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004642:	4629      	mov	r1, r5
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4621      	mov	r1, r4
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004654:	f7fb fe44 	bl	80002e0 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b60      	ldr	r3, [pc, #384]	@ (80047e0 <UART_SetConfig+0x4e4>)
 800465e:	fba3 2302 	umull	r2, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	011c      	lsls	r4, r3, #4
 8004666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	1891      	adds	r1, r2, r2
 800467e:	61b9      	str	r1, [r7, #24]
 8004680:	415b      	adcs	r3, r3
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	4641      	mov	r1, r8
 800468a:	1851      	adds	r1, r2, r1
 800468c:	6139      	str	r1, [r7, #16]
 800468e:	4649      	mov	r1, r9
 8004690:	414b      	adcs	r3, r1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a0:	4659      	mov	r1, fp
 80046a2:	00cb      	lsls	r3, r1, #3
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046aa:	4651      	mov	r1, sl
 80046ac:	00ca      	lsls	r2, r1, #3
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	4642      	mov	r2, r8
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046bc:	464b      	mov	r3, r9
 80046be:	460a      	mov	r2, r1
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046e0:	4649      	mov	r1, r9
 80046e2:	008b      	lsls	r3, r1, #2
 80046e4:	4641      	mov	r1, r8
 80046e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ea:	4641      	mov	r1, r8
 80046ec:	008a      	lsls	r2, r1, #2
 80046ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046f2:	f7fb fdf5 	bl	80002e0 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	4b38      	ldr	r3, [pc, #224]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80046fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2264      	movs	r2, #100	@ 0x64
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	3332      	adds	r3, #50	@ 0x32
 8004710:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <UART_SetConfig+0x4e4>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	673b      	str	r3, [r7, #112]	@ 0x70
 8004726:	677a      	str	r2, [r7, #116]	@ 0x74
 8004728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	415b      	adcs	r3, r3
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800473c:	4641      	mov	r1, r8
 800473e:	1851      	adds	r1, r2, r1
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	4649      	mov	r1, r9
 8004744:	414b      	adcs	r3, r1
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004754:	4659      	mov	r1, fp
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4651      	mov	r1, sl
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4642      	mov	r2, r8
 800476a:	189b      	adds	r3, r3, r2
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476e:	464b      	mov	r3, r9
 8004770:	460a      	mov	r2, r1
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	663b      	str	r3, [r7, #96]	@ 0x60
 8004782:	667a      	str	r2, [r7, #100]	@ 0x64
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047a2:	f7fb fd9d 	bl	80002e0 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	@ 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	@ 0x32
 80047be:	4a08      	ldr	r2, [pc, #32]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4422      	add	r2, r4
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <std>:
 80047e4:	2300      	movs	r3, #0
 80047e6:	b510      	push	{r4, lr}
 80047e8:	4604      	mov	r4, r0
 80047ea:	e9c0 3300 	strd	r3, r3, [r0]
 80047ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047f2:	6083      	str	r3, [r0, #8]
 80047f4:	8181      	strh	r1, [r0, #12]
 80047f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80047f8:	81c2      	strh	r2, [r0, #14]
 80047fa:	6183      	str	r3, [r0, #24]
 80047fc:	4619      	mov	r1, r3
 80047fe:	2208      	movs	r2, #8
 8004800:	305c      	adds	r0, #92	@ 0x5c
 8004802:	f000 fa59 	bl	8004cb8 <memset>
 8004806:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <std+0x58>)
 8004808:	6263      	str	r3, [r4, #36]	@ 0x24
 800480a:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <std+0x5c>)
 800480c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <std+0x60>)
 8004810:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <std+0x64>)
 8004814:	6323      	str	r3, [r4, #48]	@ 0x30
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <std+0x68>)
 8004818:	6224      	str	r4, [r4, #32]
 800481a:	429c      	cmp	r4, r3
 800481c:	d006      	beq.n	800482c <std+0x48>
 800481e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004822:	4294      	cmp	r4, r2
 8004824:	d002      	beq.n	800482c <std+0x48>
 8004826:	33d0      	adds	r3, #208	@ 0xd0
 8004828:	429c      	cmp	r4, r3
 800482a:	d105      	bne.n	8004838 <std+0x54>
 800482c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004834:	f000 baca 	b.w	8004dcc <__retarget_lock_init_recursive>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	08004b05 	.word	0x08004b05
 8004840:	08004b2b 	.word	0x08004b2b
 8004844:	08004b63 	.word	0x08004b63
 8004848:	08004b87 	.word	0x08004b87
 800484c:	200002fc 	.word	0x200002fc

08004850 <stdio_exit_handler>:
 8004850:	4a02      	ldr	r2, [pc, #8]	@ (800485c <stdio_exit_handler+0xc>)
 8004852:	4903      	ldr	r1, [pc, #12]	@ (8004860 <stdio_exit_handler+0x10>)
 8004854:	4803      	ldr	r0, [pc, #12]	@ (8004864 <stdio_exit_handler+0x14>)
 8004856:	f000 b869 	b.w	800492c <_fwalk_sglue>
 800485a:	bf00      	nop
 800485c:	20000058 	.word	0x20000058
 8004860:	08005f51 	.word	0x08005f51
 8004864:	20000068 	.word	0x20000068

08004868 <cleanup_stdio>:
 8004868:	6841      	ldr	r1, [r0, #4]
 800486a:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <cleanup_stdio+0x34>)
 800486c:	4299      	cmp	r1, r3
 800486e:	b510      	push	{r4, lr}
 8004870:	4604      	mov	r4, r0
 8004872:	d001      	beq.n	8004878 <cleanup_stdio+0x10>
 8004874:	f001 fb6c 	bl	8005f50 <_fflush_r>
 8004878:	68a1      	ldr	r1, [r4, #8]
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <cleanup_stdio+0x38>)
 800487c:	4299      	cmp	r1, r3
 800487e:	d002      	beq.n	8004886 <cleanup_stdio+0x1e>
 8004880:	4620      	mov	r0, r4
 8004882:	f001 fb65 	bl	8005f50 <_fflush_r>
 8004886:	68e1      	ldr	r1, [r4, #12]
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <cleanup_stdio+0x3c>)
 800488a:	4299      	cmp	r1, r3
 800488c:	d004      	beq.n	8004898 <cleanup_stdio+0x30>
 800488e:	4620      	mov	r0, r4
 8004890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004894:	f001 bb5c 	b.w	8005f50 <_fflush_r>
 8004898:	bd10      	pop	{r4, pc}
 800489a:	bf00      	nop
 800489c:	200002fc 	.word	0x200002fc
 80048a0:	20000364 	.word	0x20000364
 80048a4:	200003cc 	.word	0x200003cc

080048a8 <global_stdio_init.part.0>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <global_stdio_init.part.0+0x30>)
 80048ac:	4c0b      	ldr	r4, [pc, #44]	@ (80048dc <global_stdio_init.part.0+0x34>)
 80048ae:	4a0c      	ldr	r2, [pc, #48]	@ (80048e0 <global_stdio_init.part.0+0x38>)
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	4620      	mov	r0, r4
 80048b4:	2200      	movs	r2, #0
 80048b6:	2104      	movs	r1, #4
 80048b8:	f7ff ff94 	bl	80047e4 <std>
 80048bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048c0:	2201      	movs	r2, #1
 80048c2:	2109      	movs	r1, #9
 80048c4:	f7ff ff8e 	bl	80047e4 <std>
 80048c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048cc:	2202      	movs	r2, #2
 80048ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d2:	2112      	movs	r1, #18
 80048d4:	f7ff bf86 	b.w	80047e4 <std>
 80048d8:	20000434 	.word	0x20000434
 80048dc:	200002fc 	.word	0x200002fc
 80048e0:	08004851 	.word	0x08004851

080048e4 <__sfp_lock_acquire>:
 80048e4:	4801      	ldr	r0, [pc, #4]	@ (80048ec <__sfp_lock_acquire+0x8>)
 80048e6:	f000 ba72 	b.w	8004dce <__retarget_lock_acquire_recursive>
 80048ea:	bf00      	nop
 80048ec:	2000043d 	.word	0x2000043d

080048f0 <__sfp_lock_release>:
 80048f0:	4801      	ldr	r0, [pc, #4]	@ (80048f8 <__sfp_lock_release+0x8>)
 80048f2:	f000 ba6d 	b.w	8004dd0 <__retarget_lock_release_recursive>
 80048f6:	bf00      	nop
 80048f8:	2000043d 	.word	0x2000043d

080048fc <__sinit>:
 80048fc:	b510      	push	{r4, lr}
 80048fe:	4604      	mov	r4, r0
 8004900:	f7ff fff0 	bl	80048e4 <__sfp_lock_acquire>
 8004904:	6a23      	ldr	r3, [r4, #32]
 8004906:	b11b      	cbz	r3, 8004910 <__sinit+0x14>
 8004908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800490c:	f7ff bff0 	b.w	80048f0 <__sfp_lock_release>
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <__sinit+0x28>)
 8004912:	6223      	str	r3, [r4, #32]
 8004914:	4b04      	ldr	r3, [pc, #16]	@ (8004928 <__sinit+0x2c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f5      	bne.n	8004908 <__sinit+0xc>
 800491c:	f7ff ffc4 	bl	80048a8 <global_stdio_init.part.0>
 8004920:	e7f2      	b.n	8004908 <__sinit+0xc>
 8004922:	bf00      	nop
 8004924:	08004869 	.word	0x08004869
 8004928:	20000434 	.word	0x20000434

0800492c <_fwalk_sglue>:
 800492c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004930:	4607      	mov	r7, r0
 8004932:	4688      	mov	r8, r1
 8004934:	4614      	mov	r4, r2
 8004936:	2600      	movs	r6, #0
 8004938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800493c:	f1b9 0901 	subs.w	r9, r9, #1
 8004940:	d505      	bpl.n	800494e <_fwalk_sglue+0x22>
 8004942:	6824      	ldr	r4, [r4, #0]
 8004944:	2c00      	cmp	r4, #0
 8004946:	d1f7      	bne.n	8004938 <_fwalk_sglue+0xc>
 8004948:	4630      	mov	r0, r6
 800494a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800494e:	89ab      	ldrh	r3, [r5, #12]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d907      	bls.n	8004964 <_fwalk_sglue+0x38>
 8004954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004958:	3301      	adds	r3, #1
 800495a:	d003      	beq.n	8004964 <_fwalk_sglue+0x38>
 800495c:	4629      	mov	r1, r5
 800495e:	4638      	mov	r0, r7
 8004960:	47c0      	blx	r8
 8004962:	4306      	orrs	r6, r0
 8004964:	3568      	adds	r5, #104	@ 0x68
 8004966:	e7e9      	b.n	800493c <_fwalk_sglue+0x10>

08004968 <iprintf>:
 8004968:	b40f      	push	{r0, r1, r2, r3}
 800496a:	b507      	push	{r0, r1, r2, lr}
 800496c:	4906      	ldr	r1, [pc, #24]	@ (8004988 <iprintf+0x20>)
 800496e:	ab04      	add	r3, sp, #16
 8004970:	6808      	ldr	r0, [r1, #0]
 8004972:	f853 2b04 	ldr.w	r2, [r3], #4
 8004976:	6881      	ldr	r1, [r0, #8]
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	f000 fe71 	bl	8005660 <_vfiprintf_r>
 800497e:	b003      	add	sp, #12
 8004980:	f85d eb04 	ldr.w	lr, [sp], #4
 8004984:	b004      	add	sp, #16
 8004986:	4770      	bx	lr
 8004988:	20000064 	.word	0x20000064

0800498c <_puts_r>:
 800498c:	6a03      	ldr	r3, [r0, #32]
 800498e:	b570      	push	{r4, r5, r6, lr}
 8004990:	6884      	ldr	r4, [r0, #8]
 8004992:	4605      	mov	r5, r0
 8004994:	460e      	mov	r6, r1
 8004996:	b90b      	cbnz	r3, 800499c <_puts_r+0x10>
 8004998:	f7ff ffb0 	bl	80048fc <__sinit>
 800499c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800499e:	07db      	lsls	r3, r3, #31
 80049a0:	d405      	bmi.n	80049ae <_puts_r+0x22>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	0598      	lsls	r0, r3, #22
 80049a6:	d402      	bmi.n	80049ae <_puts_r+0x22>
 80049a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049aa:	f000 fa10 	bl	8004dce <__retarget_lock_acquire_recursive>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	0719      	lsls	r1, r3, #28
 80049b2:	d502      	bpl.n	80049ba <_puts_r+0x2e>
 80049b4:	6923      	ldr	r3, [r4, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d135      	bne.n	8004a26 <_puts_r+0x9a>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4628      	mov	r0, r5
 80049be:	f000 f925 	bl	8004c0c <__swsetup_r>
 80049c2:	b380      	cbz	r0, 8004a26 <_puts_r+0x9a>
 80049c4:	f04f 35ff 	mov.w	r5, #4294967295
 80049c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049ca:	07da      	lsls	r2, r3, #31
 80049cc:	d405      	bmi.n	80049da <_puts_r+0x4e>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d402      	bmi.n	80049da <_puts_r+0x4e>
 80049d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049d6:	f000 f9fb 	bl	8004dd0 <__retarget_lock_release_recursive>
 80049da:	4628      	mov	r0, r5
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da04      	bge.n	80049ec <_puts_r+0x60>
 80049e2:	69a2      	ldr	r2, [r4, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	dc17      	bgt.n	8004a18 <_puts_r+0x8c>
 80049e8:	290a      	cmp	r1, #10
 80049ea:	d015      	beq.n	8004a18 <_puts_r+0x8c>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	7019      	strb	r1, [r3, #0]
 80049f4:	68a3      	ldr	r3, [r4, #8]
 80049f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049fa:	3b01      	subs	r3, #1
 80049fc:	60a3      	str	r3, [r4, #8]
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d1ed      	bne.n	80049de <_puts_r+0x52>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da11      	bge.n	8004a2a <_puts_r+0x9e>
 8004a06:	4622      	mov	r2, r4
 8004a08:	210a      	movs	r1, #10
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 f8bf 	bl	8004b8e <__swbuf_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d0d7      	beq.n	80049c4 <_puts_r+0x38>
 8004a14:	250a      	movs	r5, #10
 8004a16:	e7d7      	b.n	80049c8 <_puts_r+0x3c>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f8b7 	bl	8004b8e <__swbuf_r>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d1e7      	bne.n	80049f4 <_puts_r+0x68>
 8004a24:	e7ce      	b.n	80049c4 <_puts_r+0x38>
 8004a26:	3e01      	subs	r6, #1
 8004a28:	e7e4      	b.n	80049f4 <_puts_r+0x68>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	6022      	str	r2, [r4, #0]
 8004a30:	220a      	movs	r2, #10
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e7ee      	b.n	8004a14 <_puts_r+0x88>
	...

08004a38 <puts>:
 8004a38:	4b02      	ldr	r3, [pc, #8]	@ (8004a44 <puts+0xc>)
 8004a3a:	4601      	mov	r1, r0
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	f7ff bfa5 	b.w	800498c <_puts_r>
 8004a42:	bf00      	nop
 8004a44:	20000064 	.word	0x20000064

08004a48 <sniprintf>:
 8004a48:	b40c      	push	{r2, r3}
 8004a4a:	b530      	push	{r4, r5, lr}
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <sniprintf+0x64>)
 8004a4e:	1e0c      	subs	r4, r1, #0
 8004a50:	681d      	ldr	r5, [r3, #0]
 8004a52:	b09d      	sub	sp, #116	@ 0x74
 8004a54:	da08      	bge.n	8004a68 <sniprintf+0x20>
 8004a56:	238b      	movs	r3, #139	@ 0x8b
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	b01d      	add	sp, #116	@ 0x74
 8004a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a64:	b002      	add	sp, #8
 8004a66:	4770      	bx	lr
 8004a68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a70:	bf14      	ite	ne
 8004a72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a76:	4623      	moveq	r3, r4
 8004a78:	9304      	str	r3, [sp, #16]
 8004a7a:	9307      	str	r3, [sp, #28]
 8004a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a80:	9002      	str	r0, [sp, #8]
 8004a82:	9006      	str	r0, [sp, #24]
 8004a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a8a:	ab21      	add	r3, sp, #132	@ 0x84
 8004a8c:	a902      	add	r1, sp, #8
 8004a8e:	4628      	mov	r0, r5
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	f000 faf3 	bl	800507c <_svfiprintf_r>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	bfbc      	itt	lt
 8004a9a:	238b      	movlt	r3, #139	@ 0x8b
 8004a9c:	602b      	strlt	r3, [r5, #0]
 8004a9e:	2c00      	cmp	r4, #0
 8004aa0:	d0dd      	beq.n	8004a5e <sniprintf+0x16>
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	e7d9      	b.n	8004a5e <sniprintf+0x16>
 8004aaa:	bf00      	nop
 8004aac:	20000064 	.word	0x20000064

08004ab0 <siscanf>:
 8004ab0:	b40e      	push	{r1, r2, r3}
 8004ab2:	b530      	push	{r4, r5, lr}
 8004ab4:	b09c      	sub	sp, #112	@ 0x70
 8004ab6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004ab8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004abc:	f854 5b04 	ldr.w	r5, [r4], #4
 8004ac0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004ac4:	9002      	str	r0, [sp, #8]
 8004ac6:	9006      	str	r0, [sp, #24]
 8004ac8:	f7fb fbac 	bl	8000224 <strlen>
 8004acc:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <siscanf+0x4c>)
 8004ace:	9003      	str	r0, [sp, #12]
 8004ad0:	9007      	str	r0, [sp, #28]
 8004ad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ad4:	480a      	ldr	r0, [pc, #40]	@ (8004b00 <siscanf+0x50>)
 8004ad6:	9401      	str	r4, [sp, #4]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004adc:	9314      	str	r3, [sp, #80]	@ 0x50
 8004ade:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ae2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ae6:	462a      	mov	r2, r5
 8004ae8:	4623      	mov	r3, r4
 8004aea:	a902      	add	r1, sp, #8
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f000 fc19 	bl	8005324 <__ssvfiscanf_r>
 8004af2:	b01c      	add	sp, #112	@ 0x70
 8004af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af8:	b003      	add	sp, #12
 8004afa:	4770      	bx	lr
 8004afc:	08004b27 	.word	0x08004b27
 8004b00:	20000064 	.word	0x20000064

08004b04 <__sread>:
 8004b04:	b510      	push	{r4, lr}
 8004b06:	460c      	mov	r4, r1
 8004b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0c:	f000 f910 	bl	8004d30 <_read_r>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	bfab      	itete	ge
 8004b14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b16:	89a3      	ldrhlt	r3, [r4, #12]
 8004b18:	181b      	addge	r3, r3, r0
 8004b1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b1e:	bfac      	ite	ge
 8004b20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b22:	81a3      	strhlt	r3, [r4, #12]
 8004b24:	bd10      	pop	{r4, pc}

08004b26 <__seofread>:
 8004b26:	2000      	movs	r0, #0
 8004b28:	4770      	bx	lr

08004b2a <__swrite>:
 8004b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2e:	461f      	mov	r7, r3
 8004b30:	898b      	ldrh	r3, [r1, #12]
 8004b32:	05db      	lsls	r3, r3, #23
 8004b34:	4605      	mov	r5, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4616      	mov	r6, r2
 8004b3a:	d505      	bpl.n	8004b48 <__swrite+0x1e>
 8004b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b40:	2302      	movs	r3, #2
 8004b42:	2200      	movs	r2, #0
 8004b44:	f000 f8e2 	bl	8004d0c <_lseek_r>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	4632      	mov	r2, r6
 8004b56:	463b      	mov	r3, r7
 8004b58:	4628      	mov	r0, r5
 8004b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5e:	f000 b8f9 	b.w	8004d54 <_write_r>

08004b62 <__sseek>:
 8004b62:	b510      	push	{r4, lr}
 8004b64:	460c      	mov	r4, r1
 8004b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6a:	f000 f8cf 	bl	8004d0c <_lseek_r>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	bf15      	itete	ne
 8004b74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b7e:	81a3      	strheq	r3, [r4, #12]
 8004b80:	bf18      	it	ne
 8004b82:	81a3      	strhne	r3, [r4, #12]
 8004b84:	bd10      	pop	{r4, pc}

08004b86 <__sclose>:
 8004b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8a:	f000 b8af 	b.w	8004cec <_close_r>

08004b8e <__swbuf_r>:
 8004b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b90:	460e      	mov	r6, r1
 8004b92:	4614      	mov	r4, r2
 8004b94:	4605      	mov	r5, r0
 8004b96:	b118      	cbz	r0, 8004ba0 <__swbuf_r+0x12>
 8004b98:	6a03      	ldr	r3, [r0, #32]
 8004b9a:	b90b      	cbnz	r3, 8004ba0 <__swbuf_r+0x12>
 8004b9c:	f7ff feae 	bl	80048fc <__sinit>
 8004ba0:	69a3      	ldr	r3, [r4, #24]
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	071a      	lsls	r2, r3, #28
 8004ba8:	d501      	bpl.n	8004bae <__swbuf_r+0x20>
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	b943      	cbnz	r3, 8004bc0 <__swbuf_r+0x32>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 f82b 	bl	8004c0c <__swsetup_r>
 8004bb6:	b118      	cbz	r0, 8004bc0 <__swbuf_r+0x32>
 8004bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	6922      	ldr	r2, [r4, #16]
 8004bc4:	1a98      	subs	r0, r3, r2
 8004bc6:	6963      	ldr	r3, [r4, #20]
 8004bc8:	b2f6      	uxtb	r6, r6
 8004bca:	4283      	cmp	r3, r0
 8004bcc:	4637      	mov	r7, r6
 8004bce:	dc05      	bgt.n	8004bdc <__swbuf_r+0x4e>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f001 f9bc 	bl	8005f50 <_fflush_r>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d1ed      	bne.n	8004bb8 <__swbuf_r+0x2a>
 8004bdc:	68a3      	ldr	r3, [r4, #8]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	60a3      	str	r3, [r4, #8]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	701e      	strb	r6, [r3, #0]
 8004bea:	6962      	ldr	r2, [r4, #20]
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d004      	beq.n	8004bfc <__swbuf_r+0x6e>
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	07db      	lsls	r3, r3, #31
 8004bf6:	d5e1      	bpl.n	8004bbc <__swbuf_r+0x2e>
 8004bf8:	2e0a      	cmp	r6, #10
 8004bfa:	d1df      	bne.n	8004bbc <__swbuf_r+0x2e>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f001 f9a6 	bl	8005f50 <_fflush_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0d9      	beq.n	8004bbc <__swbuf_r+0x2e>
 8004c08:	e7d6      	b.n	8004bb8 <__swbuf_r+0x2a>
	...

08004c0c <__swsetup_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4b29      	ldr	r3, [pc, #164]	@ (8004cb4 <__swsetup_r+0xa8>)
 8004c10:	4605      	mov	r5, r0
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	460c      	mov	r4, r1
 8004c16:	b118      	cbz	r0, 8004c20 <__swsetup_r+0x14>
 8004c18:	6a03      	ldr	r3, [r0, #32]
 8004c1a:	b90b      	cbnz	r3, 8004c20 <__swsetup_r+0x14>
 8004c1c:	f7ff fe6e 	bl	80048fc <__sinit>
 8004c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c24:	0719      	lsls	r1, r3, #28
 8004c26:	d422      	bmi.n	8004c6e <__swsetup_r+0x62>
 8004c28:	06da      	lsls	r2, r3, #27
 8004c2a:	d407      	bmi.n	8004c3c <__swsetup_r+0x30>
 8004c2c:	2209      	movs	r2, #9
 8004c2e:	602a      	str	r2, [r5, #0]
 8004c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3a:	e033      	b.n	8004ca4 <__swsetup_r+0x98>
 8004c3c:	0758      	lsls	r0, r3, #29
 8004c3e:	d512      	bpl.n	8004c66 <__swsetup_r+0x5a>
 8004c40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c42:	b141      	cbz	r1, 8004c56 <__swsetup_r+0x4a>
 8004c44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c48:	4299      	cmp	r1, r3
 8004c4a:	d002      	beq.n	8004c52 <__swsetup_r+0x46>
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f000 f8c1 	bl	8004dd4 <_free_r>
 8004c52:	2300      	movs	r3, #0
 8004c54:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6063      	str	r3, [r4, #4]
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f043 0308 	orr.w	r3, r3, #8
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	b94b      	cbnz	r3, 8004c86 <__swsetup_r+0x7a>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c7c:	d003      	beq.n	8004c86 <__swsetup_r+0x7a>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f001 f9b3 	bl	8005fec <__smakebuf_r>
 8004c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8a:	f013 0201 	ands.w	r2, r3, #1
 8004c8e:	d00a      	beq.n	8004ca6 <__swsetup_r+0x9a>
 8004c90:	2200      	movs	r2, #0
 8004c92:	60a2      	str	r2, [r4, #8]
 8004c94:	6962      	ldr	r2, [r4, #20]
 8004c96:	4252      	negs	r2, r2
 8004c98:	61a2      	str	r2, [r4, #24]
 8004c9a:	6922      	ldr	r2, [r4, #16]
 8004c9c:	b942      	cbnz	r2, 8004cb0 <__swsetup_r+0xa4>
 8004c9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ca2:	d1c5      	bne.n	8004c30 <__swsetup_r+0x24>
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	0799      	lsls	r1, r3, #30
 8004ca8:	bf58      	it	pl
 8004caa:	6962      	ldrpl	r2, [r4, #20]
 8004cac:	60a2      	str	r2, [r4, #8]
 8004cae:	e7f4      	b.n	8004c9a <__swsetup_r+0x8e>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e7f7      	b.n	8004ca4 <__swsetup_r+0x98>
 8004cb4:	20000064 	.word	0x20000064

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <strncmp>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	b16a      	cbz	r2, 8004ce8 <strncmp+0x20>
 8004ccc:	3901      	subs	r1, #1
 8004cce:	1884      	adds	r4, r0, r2
 8004cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d103      	bne.n	8004ce4 <strncmp+0x1c>
 8004cdc:	42a0      	cmp	r0, r4
 8004cde:	d001      	beq.n	8004ce4 <strncmp+0x1c>
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d1f5      	bne.n	8004cd0 <strncmp+0x8>
 8004ce4:	1ad0      	subs	r0, r2, r3
 8004ce6:	bd10      	pop	{r4, pc}
 8004ce8:	4610      	mov	r0, r2
 8004cea:	e7fc      	b.n	8004ce6 <strncmp+0x1e>

08004cec <_close_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d06      	ldr	r5, [pc, #24]	@ (8004d08 <_close_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	f7fc fc40 	bl	800157c <_close>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_close_r+0x1a>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_close_r+0x1a>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000438 	.word	0x20000438

08004d0c <_lseek_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4d07      	ldr	r5, [pc, #28]	@ (8004d2c <_lseek_r+0x20>)
 8004d10:	4604      	mov	r4, r0
 8004d12:	4608      	mov	r0, r1
 8004d14:	4611      	mov	r1, r2
 8004d16:	2200      	movs	r2, #0
 8004d18:	602a      	str	r2, [r5, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f7fc fc55 	bl	80015ca <_lseek>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_lseek_r+0x1e>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_lseek_r+0x1e>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	20000438 	.word	0x20000438

08004d30 <_read_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4d07      	ldr	r5, [pc, #28]	@ (8004d50 <_read_r+0x20>)
 8004d34:	4604      	mov	r4, r0
 8004d36:	4608      	mov	r0, r1
 8004d38:	4611      	mov	r1, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fc fbe3 	bl	800150a <_read>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_read_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_read_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20000438 	.word	0x20000438

08004d54 <_write_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4d07      	ldr	r5, [pc, #28]	@ (8004d74 <_write_r+0x20>)
 8004d58:	4604      	mov	r4, r0
 8004d5a:	4608      	mov	r0, r1
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	2200      	movs	r2, #0
 8004d60:	602a      	str	r2, [r5, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7fc fbee 	bl	8001544 <_write>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_write_r+0x1e>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_write_r+0x1e>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000438 	.word	0x20000438

08004d78 <__errno>:
 8004d78:	4b01      	ldr	r3, [pc, #4]	@ (8004d80 <__errno+0x8>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000064 	.word	0x20000064

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4d0d      	ldr	r5, [pc, #52]	@ (8004dbc <__libc_init_array+0x38>)
 8004d88:	4c0d      	ldr	r4, [pc, #52]	@ (8004dc0 <__libc_init_array+0x3c>)
 8004d8a:	1b64      	subs	r4, r4, r5
 8004d8c:	10a4      	asrs	r4, r4, #2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	4d0b      	ldr	r5, [pc, #44]	@ (8004dc4 <__libc_init_array+0x40>)
 8004d96:	4c0c      	ldr	r4, [pc, #48]	@ (8004dc8 <__libc_init_array+0x44>)
 8004d98:	f001 fb54 	bl	8006444 <_init>
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	2600      	movs	r6, #0
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	08006914 	.word	0x08006914
 8004dc0:	08006914 	.word	0x08006914
 8004dc4:	08006914 	.word	0x08006914
 8004dc8:	08006918 	.word	0x08006918

08004dcc <__retarget_lock_init_recursive>:
 8004dcc:	4770      	bx	lr

08004dce <__retarget_lock_acquire_recursive>:
 8004dce:	4770      	bx	lr

08004dd0 <__retarget_lock_release_recursive>:
 8004dd0:	4770      	bx	lr
	...

08004dd4 <_free_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d041      	beq.n	8004e60 <_free_r+0x8c>
 8004ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de0:	1f0c      	subs	r4, r1, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	18e4      	addlt	r4, r4, r3
 8004de8:	f000 f8e0 	bl	8004fac <__malloc_lock>
 8004dec:	4a1d      	ldr	r2, [pc, #116]	@ (8004e64 <_free_r+0x90>)
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	b933      	cbnz	r3, 8004e00 <_free_r+0x2c>
 8004df2:	6063      	str	r3, [r4, #4]
 8004df4:	6014      	str	r4, [r2, #0]
 8004df6:	4628      	mov	r0, r5
 8004df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dfc:	f000 b8dc 	b.w	8004fb8 <__malloc_unlock>
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d908      	bls.n	8004e16 <_free_r+0x42>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	1821      	adds	r1, r4, r0
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf01      	itttt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	1809      	addeq	r1, r1, r0
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	e7ed      	b.n	8004df2 <_free_r+0x1e>
 8004e16:	461a      	mov	r2, r3
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b10b      	cbz	r3, 8004e20 <_free_r+0x4c>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d9fa      	bls.n	8004e16 <_free_r+0x42>
 8004e20:	6811      	ldr	r1, [r2, #0]
 8004e22:	1850      	adds	r0, r2, r1
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d10b      	bne.n	8004e40 <_free_r+0x6c>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	4401      	add	r1, r0
 8004e2c:	1850      	adds	r0, r2, r1
 8004e2e:	4283      	cmp	r3, r0
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	d1e0      	bne.n	8004df6 <_free_r+0x22>
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	6053      	str	r3, [r2, #4]
 8004e3a:	4408      	add	r0, r1
 8004e3c:	6010      	str	r0, [r2, #0]
 8004e3e:	e7da      	b.n	8004df6 <_free_r+0x22>
 8004e40:	d902      	bls.n	8004e48 <_free_r+0x74>
 8004e42:	230c      	movs	r3, #12
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	e7d6      	b.n	8004df6 <_free_r+0x22>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	1821      	adds	r1, r4, r0
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf04      	itt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	6063      	str	r3, [r4, #4]
 8004e56:	bf04      	itt	eq
 8004e58:	1809      	addeq	r1, r1, r0
 8004e5a:	6021      	streq	r1, [r4, #0]
 8004e5c:	6054      	str	r4, [r2, #4]
 8004e5e:	e7ca      	b.n	8004df6 <_free_r+0x22>
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	bf00      	nop
 8004e64:	20000444 	.word	0x20000444

08004e68 <sbrk_aligned>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ea8 <sbrk_aligned+0x40>)
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	6831      	ldr	r1, [r6, #0]
 8004e70:	4605      	mov	r5, r0
 8004e72:	b911      	cbnz	r1, 8004e7a <sbrk_aligned+0x12>
 8004e74:	f001 f9a6 	bl	80061c4 <_sbrk_r>
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f001 f9a1 	bl	80061c4 <_sbrk_r>
 8004e82:	1c43      	adds	r3, r0, #1
 8004e84:	d103      	bne.n	8004e8e <sbrk_aligned+0x26>
 8004e86:	f04f 34ff 	mov.w	r4, #4294967295
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d0f8      	beq.n	8004e8a <sbrk_aligned+0x22>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f001 f992 	bl	80061c4 <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d1f2      	bne.n	8004e8a <sbrk_aligned+0x22>
 8004ea4:	e7ef      	b.n	8004e86 <sbrk_aligned+0x1e>
 8004ea6:	bf00      	nop
 8004ea8:	20000440 	.word	0x20000440

08004eac <_malloc_r>:
 8004eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb0:	1ccd      	adds	r5, r1, #3
 8004eb2:	f025 0503 	bic.w	r5, r5, #3
 8004eb6:	3508      	adds	r5, #8
 8004eb8:	2d0c      	cmp	r5, #12
 8004eba:	bf38      	it	cc
 8004ebc:	250c      	movcc	r5, #12
 8004ebe:	2d00      	cmp	r5, #0
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	db01      	blt.n	8004ec8 <_malloc_r+0x1c>
 8004ec4:	42a9      	cmp	r1, r5
 8004ec6:	d904      	bls.n	8004ed2 <_malloc_r+0x26>
 8004ec8:	230c      	movs	r3, #12
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	2000      	movs	r0, #0
 8004ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fa8 <_malloc_r+0xfc>
 8004ed6:	f000 f869 	bl	8004fac <__malloc_lock>
 8004eda:	f8d8 3000 	ldr.w	r3, [r8]
 8004ede:	461c      	mov	r4, r3
 8004ee0:	bb44      	cbnz	r4, 8004f34 <_malloc_r+0x88>
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f7ff ffbf 	bl	8004e68 <sbrk_aligned>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	4604      	mov	r4, r0
 8004eee:	d158      	bne.n	8004fa2 <_malloc_r+0xf6>
 8004ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ef4:	4627      	mov	r7, r4
 8004ef6:	2f00      	cmp	r7, #0
 8004ef8:	d143      	bne.n	8004f82 <_malloc_r+0xd6>
 8004efa:	2c00      	cmp	r4, #0
 8004efc:	d04b      	beq.n	8004f96 <_malloc_r+0xea>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4639      	mov	r1, r7
 8004f02:	4630      	mov	r0, r6
 8004f04:	eb04 0903 	add.w	r9, r4, r3
 8004f08:	f001 f95c 	bl	80061c4 <_sbrk_r>
 8004f0c:	4581      	cmp	r9, r0
 8004f0e:	d142      	bne.n	8004f96 <_malloc_r+0xea>
 8004f10:	6821      	ldr	r1, [r4, #0]
 8004f12:	1a6d      	subs	r5, r5, r1
 8004f14:	4629      	mov	r1, r5
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ffa6 	bl	8004e68 <sbrk_aligned>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d03a      	beq.n	8004f96 <_malloc_r+0xea>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	442b      	add	r3, r5
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	bb62      	cbnz	r2, 8004f88 <_malloc_r+0xdc>
 8004f2e:	f8c8 7000 	str.w	r7, [r8]
 8004f32:	e00f      	b.n	8004f54 <_malloc_r+0xa8>
 8004f34:	6822      	ldr	r2, [r4, #0]
 8004f36:	1b52      	subs	r2, r2, r5
 8004f38:	d420      	bmi.n	8004f7c <_malloc_r+0xd0>
 8004f3a:	2a0b      	cmp	r2, #11
 8004f3c:	d917      	bls.n	8004f6e <_malloc_r+0xc2>
 8004f3e:	1961      	adds	r1, r4, r5
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	6025      	str	r5, [r4, #0]
 8004f44:	bf18      	it	ne
 8004f46:	6059      	strne	r1, [r3, #4]
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	bf08      	it	eq
 8004f4c:	f8c8 1000 	streq.w	r1, [r8]
 8004f50:	5162      	str	r2, [r4, r5]
 8004f52:	604b      	str	r3, [r1, #4]
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 f82f 	bl	8004fb8 <__malloc_unlock>
 8004f5a:	f104 000b 	add.w	r0, r4, #11
 8004f5e:	1d23      	adds	r3, r4, #4
 8004f60:	f020 0007 	bic.w	r0, r0, #7
 8004f64:	1ac2      	subs	r2, r0, r3
 8004f66:	bf1c      	itt	ne
 8004f68:	1a1b      	subne	r3, r3, r0
 8004f6a:	50a3      	strne	r3, [r4, r2]
 8004f6c:	e7af      	b.n	8004ece <_malloc_r+0x22>
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	bf0c      	ite	eq
 8004f74:	f8c8 2000 	streq.w	r2, [r8]
 8004f78:	605a      	strne	r2, [r3, #4]
 8004f7a:	e7eb      	b.n	8004f54 <_malloc_r+0xa8>
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	6864      	ldr	r4, [r4, #4]
 8004f80:	e7ae      	b.n	8004ee0 <_malloc_r+0x34>
 8004f82:	463c      	mov	r4, r7
 8004f84:	687f      	ldr	r7, [r7, #4]
 8004f86:	e7b6      	b.n	8004ef6 <_malloc_r+0x4a>
 8004f88:	461a      	mov	r2, r3
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d1fb      	bne.n	8004f88 <_malloc_r+0xdc>
 8004f90:	2300      	movs	r3, #0
 8004f92:	6053      	str	r3, [r2, #4]
 8004f94:	e7de      	b.n	8004f54 <_malloc_r+0xa8>
 8004f96:	230c      	movs	r3, #12
 8004f98:	6033      	str	r3, [r6, #0]
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f80c 	bl	8004fb8 <__malloc_unlock>
 8004fa0:	e794      	b.n	8004ecc <_malloc_r+0x20>
 8004fa2:	6005      	str	r5, [r0, #0]
 8004fa4:	e7d6      	b.n	8004f54 <_malloc_r+0xa8>
 8004fa6:	bf00      	nop
 8004fa8:	20000444 	.word	0x20000444

08004fac <__malloc_lock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	@ (8004fb4 <__malloc_lock+0x8>)
 8004fae:	f7ff bf0e 	b.w	8004dce <__retarget_lock_acquire_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	2000043c 	.word	0x2000043c

08004fb8 <__malloc_unlock>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	@ (8004fc0 <__malloc_unlock+0x8>)
 8004fba:	f7ff bf09 	b.w	8004dd0 <__retarget_lock_release_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	2000043c 	.word	0x2000043c

08004fc4 <__ssputs_r>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	688e      	ldr	r6, [r1, #8]
 8004fca:	461f      	mov	r7, r3
 8004fcc:	42be      	cmp	r6, r7
 8004fce:	680b      	ldr	r3, [r1, #0]
 8004fd0:	4682      	mov	sl, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4690      	mov	r8, r2
 8004fd6:	d82d      	bhi.n	8005034 <__ssputs_r+0x70>
 8004fd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fe0:	d026      	beq.n	8005030 <__ssputs_r+0x6c>
 8004fe2:	6965      	ldr	r5, [r4, #20]
 8004fe4:	6909      	ldr	r1, [r1, #16]
 8004fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fea:	eba3 0901 	sub.w	r9, r3, r1
 8004fee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ff2:	1c7b      	adds	r3, r7, #1
 8004ff4:	444b      	add	r3, r9
 8004ff6:	106d      	asrs	r5, r5, #1
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	bf38      	it	cc
 8004ffc:	461d      	movcc	r5, r3
 8004ffe:	0553      	lsls	r3, r2, #21
 8005000:	d527      	bpl.n	8005052 <__ssputs_r+0x8e>
 8005002:	4629      	mov	r1, r5
 8005004:	f7ff ff52 	bl	8004eac <_malloc_r>
 8005008:	4606      	mov	r6, r0
 800500a:	b360      	cbz	r0, 8005066 <__ssputs_r+0xa2>
 800500c:	6921      	ldr	r1, [r4, #16]
 800500e:	464a      	mov	r2, r9
 8005010:	f001 f8e8 	bl	80061e4 <memcpy>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800501a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	6126      	str	r6, [r4, #16]
 8005022:	6165      	str	r5, [r4, #20]
 8005024:	444e      	add	r6, r9
 8005026:	eba5 0509 	sub.w	r5, r5, r9
 800502a:	6026      	str	r6, [r4, #0]
 800502c:	60a5      	str	r5, [r4, #8]
 800502e:	463e      	mov	r6, r7
 8005030:	42be      	cmp	r6, r7
 8005032:	d900      	bls.n	8005036 <__ssputs_r+0x72>
 8005034:	463e      	mov	r6, r7
 8005036:	6820      	ldr	r0, [r4, #0]
 8005038:	4632      	mov	r2, r6
 800503a:	4641      	mov	r1, r8
 800503c:	f001 f885 	bl	800614a <memmove>
 8005040:	68a3      	ldr	r3, [r4, #8]
 8005042:	1b9b      	subs	r3, r3, r6
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	4433      	add	r3, r6
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	2000      	movs	r0, #0
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	462a      	mov	r2, r5
 8005054:	f001 f8d4 	bl	8006200 <_realloc_r>
 8005058:	4606      	mov	r6, r0
 800505a:	2800      	cmp	r0, #0
 800505c:	d1e0      	bne.n	8005020 <__ssputs_r+0x5c>
 800505e:	6921      	ldr	r1, [r4, #16]
 8005060:	4650      	mov	r0, sl
 8005062:	f7ff feb7 	bl	8004dd4 <_free_r>
 8005066:	230c      	movs	r3, #12
 8005068:	f8ca 3000 	str.w	r3, [sl]
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	e7e9      	b.n	800504e <__ssputs_r+0x8a>
	...

0800507c <_svfiprintf_r>:
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	4698      	mov	r8, r3
 8005082:	898b      	ldrh	r3, [r1, #12]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	b09d      	sub	sp, #116	@ 0x74
 8005088:	4607      	mov	r7, r0
 800508a:	460d      	mov	r5, r1
 800508c:	4614      	mov	r4, r2
 800508e:	d510      	bpl.n	80050b2 <_svfiprintf_r+0x36>
 8005090:	690b      	ldr	r3, [r1, #16]
 8005092:	b973      	cbnz	r3, 80050b2 <_svfiprintf_r+0x36>
 8005094:	2140      	movs	r1, #64	@ 0x40
 8005096:	f7ff ff09 	bl	8004eac <_malloc_r>
 800509a:	6028      	str	r0, [r5, #0]
 800509c:	6128      	str	r0, [r5, #16]
 800509e:	b930      	cbnz	r0, 80050ae <_svfiprintf_r+0x32>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	b01d      	add	sp, #116	@ 0x74
 80050aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ae:	2340      	movs	r3, #64	@ 0x40
 80050b0:	616b      	str	r3, [r5, #20]
 80050b2:	2300      	movs	r3, #0
 80050b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050b6:	2320      	movs	r3, #32
 80050b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80050c0:	2330      	movs	r3, #48	@ 0x30
 80050c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005260 <_svfiprintf_r+0x1e4>
 80050c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050ca:	f04f 0901 	mov.w	r9, #1
 80050ce:	4623      	mov	r3, r4
 80050d0:	469a      	mov	sl, r3
 80050d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d6:	b10a      	cbz	r2, 80050dc <_svfiprintf_r+0x60>
 80050d8:	2a25      	cmp	r2, #37	@ 0x25
 80050da:	d1f9      	bne.n	80050d0 <_svfiprintf_r+0x54>
 80050dc:	ebba 0b04 	subs.w	fp, sl, r4
 80050e0:	d00b      	beq.n	80050fa <_svfiprintf_r+0x7e>
 80050e2:	465b      	mov	r3, fp
 80050e4:	4622      	mov	r2, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	4638      	mov	r0, r7
 80050ea:	f7ff ff6b 	bl	8004fc4 <__ssputs_r>
 80050ee:	3001      	adds	r0, #1
 80050f0:	f000 80a7 	beq.w	8005242 <_svfiprintf_r+0x1c6>
 80050f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050f6:	445a      	add	r2, fp
 80050f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80050fa:	f89a 3000 	ldrb.w	r3, [sl]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 809f 	beq.w	8005242 <_svfiprintf_r+0x1c6>
 8005104:	2300      	movs	r3, #0
 8005106:	f04f 32ff 	mov.w	r2, #4294967295
 800510a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800510e:	f10a 0a01 	add.w	sl, sl, #1
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	9307      	str	r3, [sp, #28]
 8005116:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800511a:	931a      	str	r3, [sp, #104]	@ 0x68
 800511c:	4654      	mov	r4, sl
 800511e:	2205      	movs	r2, #5
 8005120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005124:	484e      	ldr	r0, [pc, #312]	@ (8005260 <_svfiprintf_r+0x1e4>)
 8005126:	f7fb f88b 	bl	8000240 <memchr>
 800512a:	9a04      	ldr	r2, [sp, #16]
 800512c:	b9d8      	cbnz	r0, 8005166 <_svfiprintf_r+0xea>
 800512e:	06d0      	lsls	r0, r2, #27
 8005130:	bf44      	itt	mi
 8005132:	2320      	movmi	r3, #32
 8005134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005138:	0711      	lsls	r1, r2, #28
 800513a:	bf44      	itt	mi
 800513c:	232b      	movmi	r3, #43	@ 0x2b
 800513e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005142:	f89a 3000 	ldrb.w	r3, [sl]
 8005146:	2b2a      	cmp	r3, #42	@ 0x2a
 8005148:	d015      	beq.n	8005176 <_svfiprintf_r+0xfa>
 800514a:	9a07      	ldr	r2, [sp, #28]
 800514c:	4654      	mov	r4, sl
 800514e:	2000      	movs	r0, #0
 8005150:	f04f 0c0a 	mov.w	ip, #10
 8005154:	4621      	mov	r1, r4
 8005156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800515a:	3b30      	subs	r3, #48	@ 0x30
 800515c:	2b09      	cmp	r3, #9
 800515e:	d94b      	bls.n	80051f8 <_svfiprintf_r+0x17c>
 8005160:	b1b0      	cbz	r0, 8005190 <_svfiprintf_r+0x114>
 8005162:	9207      	str	r2, [sp, #28]
 8005164:	e014      	b.n	8005190 <_svfiprintf_r+0x114>
 8005166:	eba0 0308 	sub.w	r3, r0, r8
 800516a:	fa09 f303 	lsl.w	r3, r9, r3
 800516e:	4313      	orrs	r3, r2
 8005170:	9304      	str	r3, [sp, #16]
 8005172:	46a2      	mov	sl, r4
 8005174:	e7d2      	b.n	800511c <_svfiprintf_r+0xa0>
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	1d19      	adds	r1, r3, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	9103      	str	r1, [sp, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfbb      	ittet	lt
 8005182:	425b      	neglt	r3, r3
 8005184:	f042 0202 	orrlt.w	r2, r2, #2
 8005188:	9307      	strge	r3, [sp, #28]
 800518a:	9307      	strlt	r3, [sp, #28]
 800518c:	bfb8      	it	lt
 800518e:	9204      	strlt	r2, [sp, #16]
 8005190:	7823      	ldrb	r3, [r4, #0]
 8005192:	2b2e      	cmp	r3, #46	@ 0x2e
 8005194:	d10a      	bne.n	80051ac <_svfiprintf_r+0x130>
 8005196:	7863      	ldrb	r3, [r4, #1]
 8005198:	2b2a      	cmp	r3, #42	@ 0x2a
 800519a:	d132      	bne.n	8005202 <_svfiprintf_r+0x186>
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	9203      	str	r2, [sp, #12]
 80051a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051a8:	3402      	adds	r4, #2
 80051aa:	9305      	str	r3, [sp, #20]
 80051ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005270 <_svfiprintf_r+0x1f4>
 80051b0:	7821      	ldrb	r1, [r4, #0]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4650      	mov	r0, sl
 80051b6:	f7fb f843 	bl	8000240 <memchr>
 80051ba:	b138      	cbz	r0, 80051cc <_svfiprintf_r+0x150>
 80051bc:	9b04      	ldr	r3, [sp, #16]
 80051be:	eba0 000a 	sub.w	r0, r0, sl
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	4082      	lsls	r2, r0
 80051c6:	4313      	orrs	r3, r2
 80051c8:	3401      	adds	r4, #1
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d0:	4824      	ldr	r0, [pc, #144]	@ (8005264 <_svfiprintf_r+0x1e8>)
 80051d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051d6:	2206      	movs	r2, #6
 80051d8:	f7fb f832 	bl	8000240 <memchr>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d036      	beq.n	800524e <_svfiprintf_r+0x1d2>
 80051e0:	4b21      	ldr	r3, [pc, #132]	@ (8005268 <_svfiprintf_r+0x1ec>)
 80051e2:	bb1b      	cbnz	r3, 800522c <_svfiprintf_r+0x1b0>
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	3307      	adds	r3, #7
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	3308      	adds	r3, #8
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f2:	4433      	add	r3, r6
 80051f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f6:	e76a      	b.n	80050ce <_svfiprintf_r+0x52>
 80051f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051fc:	460c      	mov	r4, r1
 80051fe:	2001      	movs	r0, #1
 8005200:	e7a8      	b.n	8005154 <_svfiprintf_r+0xd8>
 8005202:	2300      	movs	r3, #0
 8005204:	3401      	adds	r4, #1
 8005206:	9305      	str	r3, [sp, #20]
 8005208:	4619      	mov	r1, r3
 800520a:	f04f 0c0a 	mov.w	ip, #10
 800520e:	4620      	mov	r0, r4
 8005210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005214:	3a30      	subs	r2, #48	@ 0x30
 8005216:	2a09      	cmp	r2, #9
 8005218:	d903      	bls.n	8005222 <_svfiprintf_r+0x1a6>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0c6      	beq.n	80051ac <_svfiprintf_r+0x130>
 800521e:	9105      	str	r1, [sp, #20]
 8005220:	e7c4      	b.n	80051ac <_svfiprintf_r+0x130>
 8005222:	fb0c 2101 	mla	r1, ip, r1, r2
 8005226:	4604      	mov	r4, r0
 8005228:	2301      	movs	r3, #1
 800522a:	e7f0      	b.n	800520e <_svfiprintf_r+0x192>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <_svfiprintf_r+0x1f0>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4638      	mov	r0, r7
 8005238:	f3af 8000 	nop.w
 800523c:	1c42      	adds	r2, r0, #1
 800523e:	4606      	mov	r6, r0
 8005240:	d1d6      	bne.n	80051f0 <_svfiprintf_r+0x174>
 8005242:	89ab      	ldrh	r3, [r5, #12]
 8005244:	065b      	lsls	r3, r3, #25
 8005246:	f53f af2d 	bmi.w	80050a4 <_svfiprintf_r+0x28>
 800524a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800524c:	e72c      	b.n	80050a8 <_svfiprintf_r+0x2c>
 800524e:	ab03      	add	r3, sp, #12
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	462a      	mov	r2, r5
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <_svfiprintf_r+0x1f0>)
 8005256:	a904      	add	r1, sp, #16
 8005258:	4638      	mov	r0, r7
 800525a:	f000 fb87 	bl	800596c <_printf_i>
 800525e:	e7ed      	b.n	800523c <_svfiprintf_r+0x1c0>
 8005260:	080067bc 	.word	0x080067bc
 8005264:	080067c6 	.word	0x080067c6
 8005268:	00000000 	.word	0x00000000
 800526c:	08004fc5 	.word	0x08004fc5
 8005270:	080067c2 	.word	0x080067c2

08005274 <_sungetc_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	1c4b      	adds	r3, r1, #1
 8005278:	4614      	mov	r4, r2
 800527a:	d103      	bne.n	8005284 <_sungetc_r+0x10>
 800527c:	f04f 35ff 	mov.w	r5, #4294967295
 8005280:	4628      	mov	r0, r5
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	8993      	ldrh	r3, [r2, #12]
 8005286:	f023 0320 	bic.w	r3, r3, #32
 800528a:	8193      	strh	r3, [r2, #12]
 800528c:	6853      	ldr	r3, [r2, #4]
 800528e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005290:	b2cd      	uxtb	r5, r1
 8005292:	b18a      	cbz	r2, 80052b8 <_sungetc_r+0x44>
 8005294:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005296:	429a      	cmp	r2, r3
 8005298:	dd08      	ble.n	80052ac <_sungetc_r+0x38>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	3301      	adds	r3, #1
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	e7e9      	b.n	8005280 <_sungetc_r+0xc>
 80052ac:	4621      	mov	r1, r4
 80052ae:	f000 ff12 	bl	80060d6 <__submore>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d0f1      	beq.n	800529a <_sungetc_r+0x26>
 80052b6:	e7e1      	b.n	800527c <_sungetc_r+0x8>
 80052b8:	6921      	ldr	r1, [r4, #16]
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	b141      	cbz	r1, 80052d0 <_sungetc_r+0x5c>
 80052be:	4291      	cmp	r1, r2
 80052c0:	d206      	bcs.n	80052d0 <_sungetc_r+0x5c>
 80052c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80052c6:	42a9      	cmp	r1, r5
 80052c8:	d102      	bne.n	80052d0 <_sungetc_r+0x5c>
 80052ca:	3a01      	subs	r2, #1
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	e7ea      	b.n	80052a6 <_sungetc_r+0x32>
 80052d0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80052d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80052da:	2303      	movs	r3, #3
 80052dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80052de:	4623      	mov	r3, r4
 80052e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	2301      	movs	r3, #1
 80052e8:	e7de      	b.n	80052a8 <_sungetc_r+0x34>

080052ea <__ssrefill_r>:
 80052ea:	b510      	push	{r4, lr}
 80052ec:	460c      	mov	r4, r1
 80052ee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80052f0:	b169      	cbz	r1, 800530e <__ssrefill_r+0x24>
 80052f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052f6:	4299      	cmp	r1, r3
 80052f8:	d001      	beq.n	80052fe <__ssrefill_r+0x14>
 80052fa:	f7ff fd6b 	bl	8004dd4 <_free_r>
 80052fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005300:	6063      	str	r3, [r4, #4]
 8005302:	2000      	movs	r0, #0
 8005304:	6360      	str	r0, [r4, #52]	@ 0x34
 8005306:	b113      	cbz	r3, 800530e <__ssrefill_r+0x24>
 8005308:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	bd10      	pop	{r4, pc}
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	6063      	str	r3, [r4, #4]
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f043 0320 	orr.w	r3, r3, #32
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	e7f3      	b.n	800530c <__ssrefill_r+0x22>

08005324 <__ssvfiscanf_r>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	460c      	mov	r4, r1
 800532a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800532e:	2100      	movs	r1, #0
 8005330:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005334:	49a5      	ldr	r1, [pc, #660]	@ (80055cc <__ssvfiscanf_r+0x2a8>)
 8005336:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005338:	f10d 0804 	add.w	r8, sp, #4
 800533c:	49a4      	ldr	r1, [pc, #656]	@ (80055d0 <__ssvfiscanf_r+0x2ac>)
 800533e:	4fa5      	ldr	r7, [pc, #660]	@ (80055d4 <__ssvfiscanf_r+0x2b0>)
 8005340:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005344:	4606      	mov	r6, r0
 8005346:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	7813      	ldrb	r3, [r2, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8158 	beq.w	8005602 <__ssvfiscanf_r+0x2de>
 8005352:	5cf9      	ldrb	r1, [r7, r3]
 8005354:	f011 0108 	ands.w	r1, r1, #8
 8005358:	f102 0501 	add.w	r5, r2, #1
 800535c:	d019      	beq.n	8005392 <__ssvfiscanf_r+0x6e>
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dd0f      	ble.n	8005384 <__ssvfiscanf_r+0x60>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	5cba      	ldrb	r2, [r7, r2]
 800536a:	0712      	lsls	r2, r2, #28
 800536c:	d401      	bmi.n	8005372 <__ssvfiscanf_r+0x4e>
 800536e:	462a      	mov	r2, r5
 8005370:	e7eb      	b.n	800534a <__ssvfiscanf_r+0x26>
 8005372:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005374:	3201      	adds	r2, #1
 8005376:	9245      	str	r2, [sp, #276]	@ 0x114
 8005378:	6862      	ldr	r2, [r4, #4]
 800537a:	3301      	adds	r3, #1
 800537c:	3a01      	subs	r2, #1
 800537e:	6062      	str	r2, [r4, #4]
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	e7ec      	b.n	800535e <__ssvfiscanf_r+0x3a>
 8005384:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005386:	4621      	mov	r1, r4
 8005388:	4630      	mov	r0, r6
 800538a:	4798      	blx	r3
 800538c:	2800      	cmp	r0, #0
 800538e:	d0e9      	beq.n	8005364 <__ssvfiscanf_r+0x40>
 8005390:	e7ed      	b.n	800536e <__ssvfiscanf_r+0x4a>
 8005392:	2b25      	cmp	r3, #37	@ 0x25
 8005394:	d012      	beq.n	80053bc <__ssvfiscanf_r+0x98>
 8005396:	4699      	mov	r9, r3
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f340 8093 	ble.w	80054c6 <__ssvfiscanf_r+0x1a2>
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	7813      	ldrb	r3, [r2, #0]
 80053a4:	454b      	cmp	r3, r9
 80053a6:	f040 812c 	bne.w	8005602 <__ssvfiscanf_r+0x2de>
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80053b2:	3201      	adds	r2, #1
 80053b4:	3301      	adds	r3, #1
 80053b6:	6022      	str	r2, [r4, #0]
 80053b8:	9345      	str	r3, [sp, #276]	@ 0x114
 80053ba:	e7d8      	b.n	800536e <__ssvfiscanf_r+0x4a>
 80053bc:	9141      	str	r1, [sp, #260]	@ 0x104
 80053be:	9143      	str	r1, [sp, #268]	@ 0x10c
 80053c0:	7853      	ldrb	r3, [r2, #1]
 80053c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c4:	bf02      	ittt	eq
 80053c6:	2310      	moveq	r3, #16
 80053c8:	1c95      	addeq	r5, r2, #2
 80053ca:	9341      	streq	r3, [sp, #260]	@ 0x104
 80053cc:	220a      	movs	r2, #10
 80053ce:	46a9      	mov	r9, r5
 80053d0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80053d4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d91e      	bls.n	800541a <__ssvfiscanf_r+0xf6>
 80053dc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80055d8 <__ssvfiscanf_r+0x2b4>
 80053e0:	2203      	movs	r2, #3
 80053e2:	4650      	mov	r0, sl
 80053e4:	f7fa ff2c 	bl	8000240 <memchr>
 80053e8:	b138      	cbz	r0, 80053fa <__ssvfiscanf_r+0xd6>
 80053ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80053ec:	eba0 000a 	sub.w	r0, r0, sl
 80053f0:	2301      	movs	r3, #1
 80053f2:	4083      	lsls	r3, r0
 80053f4:	4313      	orrs	r3, r2
 80053f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80053f8:	464d      	mov	r5, r9
 80053fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053fe:	2b78      	cmp	r3, #120	@ 0x78
 8005400:	d806      	bhi.n	8005410 <__ssvfiscanf_r+0xec>
 8005402:	2b57      	cmp	r3, #87	@ 0x57
 8005404:	d810      	bhi.n	8005428 <__ssvfiscanf_r+0x104>
 8005406:	2b25      	cmp	r3, #37	@ 0x25
 8005408:	d0c5      	beq.n	8005396 <__ssvfiscanf_r+0x72>
 800540a:	d857      	bhi.n	80054bc <__ssvfiscanf_r+0x198>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d065      	beq.n	80054dc <__ssvfiscanf_r+0x1b8>
 8005410:	2303      	movs	r3, #3
 8005412:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005414:	230a      	movs	r3, #10
 8005416:	9342      	str	r3, [sp, #264]	@ 0x108
 8005418:	e078      	b.n	800550c <__ssvfiscanf_r+0x1e8>
 800541a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800541c:	fb02 1103 	mla	r1, r2, r3, r1
 8005420:	3930      	subs	r1, #48	@ 0x30
 8005422:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005424:	464d      	mov	r5, r9
 8005426:	e7d2      	b.n	80053ce <__ssvfiscanf_r+0xaa>
 8005428:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800542c:	2a20      	cmp	r2, #32
 800542e:	d8ef      	bhi.n	8005410 <__ssvfiscanf_r+0xec>
 8005430:	a101      	add	r1, pc, #4	@ (adr r1, 8005438 <__ssvfiscanf_r+0x114>)
 8005432:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005436:	bf00      	nop
 8005438:	080054eb 	.word	0x080054eb
 800543c:	08005411 	.word	0x08005411
 8005440:	08005411 	.word	0x08005411
 8005444:	08005545 	.word	0x08005545
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005411 	.word	0x08005411
 8005458:	08005411 	.word	0x08005411
 800545c:	08005411 	.word	0x08005411
 8005460:	08005411 	.word	0x08005411
 8005464:	0800555b 	.word	0x0800555b
 8005468:	08005541 	.word	0x08005541
 800546c:	080054c3 	.word	0x080054c3
 8005470:	080054c3 	.word	0x080054c3
 8005474:	080054c3 	.word	0x080054c3
 8005478:	08005411 	.word	0x08005411
 800547c:	080054fd 	.word	0x080054fd
 8005480:	08005411 	.word	0x08005411
 8005484:	08005411 	.word	0x08005411
 8005488:	08005411 	.word	0x08005411
 800548c:	08005411 	.word	0x08005411
 8005490:	0800556b 	.word	0x0800556b
 8005494:	08005505 	.word	0x08005505
 8005498:	080054e3 	.word	0x080054e3
 800549c:	08005411 	.word	0x08005411
 80054a0:	08005411 	.word	0x08005411
 80054a4:	08005567 	.word	0x08005567
 80054a8:	08005411 	.word	0x08005411
 80054ac:	08005541 	.word	0x08005541
 80054b0:	08005411 	.word	0x08005411
 80054b4:	08005411 	.word	0x08005411
 80054b8:	080054eb 	.word	0x080054eb
 80054bc:	3b45      	subs	r3, #69	@ 0x45
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d8a6      	bhi.n	8005410 <__ssvfiscanf_r+0xec>
 80054c2:	2305      	movs	r3, #5
 80054c4:	e021      	b.n	800550a <__ssvfiscanf_r+0x1e6>
 80054c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80054c8:	4621      	mov	r1, r4
 80054ca:	4630      	mov	r0, r6
 80054cc:	4798      	blx	r3
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f43f af66 	beq.w	80053a0 <__ssvfiscanf_r+0x7c>
 80054d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f040 808b 	bne.w	80055f2 <__ssvfiscanf_r+0x2ce>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e08b      	b.n	80055fa <__ssvfiscanf_r+0x2d6>
 80054e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80054ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80054f2:	2210      	movs	r2, #16
 80054f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80054f6:	9242      	str	r2, [sp, #264]	@ 0x108
 80054f8:	d902      	bls.n	8005500 <__ssvfiscanf_r+0x1dc>
 80054fa:	e005      	b.n	8005508 <__ssvfiscanf_r+0x1e4>
 80054fc:	2300      	movs	r3, #0
 80054fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8005500:	2303      	movs	r3, #3
 8005502:	e002      	b.n	800550a <__ssvfiscanf_r+0x1e6>
 8005504:	2308      	movs	r3, #8
 8005506:	9342      	str	r3, [sp, #264]	@ 0x108
 8005508:	2304      	movs	r3, #4
 800550a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd39      	ble.n	8005586 <__ssvfiscanf_r+0x262>
 8005512:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005514:	0659      	lsls	r1, r3, #25
 8005516:	d404      	bmi.n	8005522 <__ssvfiscanf_r+0x1fe>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	781a      	ldrb	r2, [r3, #0]
 800551c:	5cba      	ldrb	r2, [r7, r2]
 800551e:	0712      	lsls	r2, r2, #28
 8005520:	d438      	bmi.n	8005594 <__ssvfiscanf_r+0x270>
 8005522:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005524:	2b02      	cmp	r3, #2
 8005526:	dc47      	bgt.n	80055b8 <__ssvfiscanf_r+0x294>
 8005528:	466b      	mov	r3, sp
 800552a:	4622      	mov	r2, r4
 800552c:	a941      	add	r1, sp, #260	@ 0x104
 800552e:	4630      	mov	r0, r6
 8005530:	f000 fb3c 	bl	8005bac <_scanf_chars>
 8005534:	2801      	cmp	r0, #1
 8005536:	d064      	beq.n	8005602 <__ssvfiscanf_r+0x2de>
 8005538:	2802      	cmp	r0, #2
 800553a:	f47f af18 	bne.w	800536e <__ssvfiscanf_r+0x4a>
 800553e:	e7c9      	b.n	80054d4 <__ssvfiscanf_r+0x1b0>
 8005540:	220a      	movs	r2, #10
 8005542:	e7d7      	b.n	80054f4 <__ssvfiscanf_r+0x1d0>
 8005544:	4629      	mov	r1, r5
 8005546:	4640      	mov	r0, r8
 8005548:	f000 fd8c 	bl	8006064 <__sccl>
 800554c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800554e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005552:	9341      	str	r3, [sp, #260]	@ 0x104
 8005554:	4605      	mov	r5, r0
 8005556:	2301      	movs	r3, #1
 8005558:	e7d7      	b.n	800550a <__ssvfiscanf_r+0x1e6>
 800555a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800555c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005560:	9341      	str	r3, [sp, #260]	@ 0x104
 8005562:	2300      	movs	r3, #0
 8005564:	e7d1      	b.n	800550a <__ssvfiscanf_r+0x1e6>
 8005566:	2302      	movs	r3, #2
 8005568:	e7cf      	b.n	800550a <__ssvfiscanf_r+0x1e6>
 800556a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800556c:	06c3      	lsls	r3, r0, #27
 800556e:	f53f aefe 	bmi.w	800536e <__ssvfiscanf_r+0x4a>
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005576:	1d19      	adds	r1, r3, #4
 8005578:	9100      	str	r1, [sp, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	07c0      	lsls	r0, r0, #31
 800557e:	bf4c      	ite	mi
 8005580:	801a      	strhmi	r2, [r3, #0]
 8005582:	601a      	strpl	r2, [r3, #0]
 8005584:	e6f3      	b.n	800536e <__ssvfiscanf_r+0x4a>
 8005586:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005588:	4621      	mov	r1, r4
 800558a:	4630      	mov	r0, r6
 800558c:	4798      	blx	r3
 800558e:	2800      	cmp	r0, #0
 8005590:	d0bf      	beq.n	8005512 <__ssvfiscanf_r+0x1ee>
 8005592:	e79f      	b.n	80054d4 <__ssvfiscanf_r+0x1b0>
 8005594:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005596:	3201      	adds	r2, #1
 8005598:	9245      	str	r2, [sp, #276]	@ 0x114
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	3a01      	subs	r2, #1
 800559e:	2a00      	cmp	r2, #0
 80055a0:	6062      	str	r2, [r4, #4]
 80055a2:	dd02      	ble.n	80055aa <__ssvfiscanf_r+0x286>
 80055a4:	3301      	adds	r3, #1
 80055a6:	6023      	str	r3, [r4, #0]
 80055a8:	e7b6      	b.n	8005518 <__ssvfiscanf_r+0x1f4>
 80055aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80055ac:	4621      	mov	r1, r4
 80055ae:	4630      	mov	r0, r6
 80055b0:	4798      	blx	r3
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0b0      	beq.n	8005518 <__ssvfiscanf_r+0x1f4>
 80055b6:	e78d      	b.n	80054d4 <__ssvfiscanf_r+0x1b0>
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	dc0f      	bgt.n	80055dc <__ssvfiscanf_r+0x2b8>
 80055bc:	466b      	mov	r3, sp
 80055be:	4622      	mov	r2, r4
 80055c0:	a941      	add	r1, sp, #260	@ 0x104
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 fb4c 	bl	8005c60 <_scanf_i>
 80055c8:	e7b4      	b.n	8005534 <__ssvfiscanf_r+0x210>
 80055ca:	bf00      	nop
 80055cc:	08005275 	.word	0x08005275
 80055d0:	080052eb 	.word	0x080052eb
 80055d4:	0800680b 	.word	0x0800680b
 80055d8:	080067c2 	.word	0x080067c2
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <__ssvfiscanf_r+0x2e4>)
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f43f aec5 	beq.w	800536e <__ssvfiscanf_r+0x4a>
 80055e4:	466b      	mov	r3, sp
 80055e6:	4622      	mov	r2, r4
 80055e8:	a941      	add	r1, sp, #260	@ 0x104
 80055ea:	4630      	mov	r0, r6
 80055ec:	f3af 8000 	nop.w
 80055f0:	e7a0      	b.n	8005534 <__ssvfiscanf_r+0x210>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	065b      	lsls	r3, r3, #25
 80055f6:	f53f af71 	bmi.w	80054dc <__ssvfiscanf_r+0x1b8>
 80055fa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80055fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005602:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005604:	e7f9      	b.n	80055fa <__ssvfiscanf_r+0x2d6>
 8005606:	bf00      	nop
 8005608:	00000000 	.word	0x00000000

0800560c <__sfputc_r>:
 800560c:	6893      	ldr	r3, [r2, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	b410      	push	{r4}
 8005614:	6093      	str	r3, [r2, #8]
 8005616:	da08      	bge.n	800562a <__sfputc_r+0x1e>
 8005618:	6994      	ldr	r4, [r2, #24]
 800561a:	42a3      	cmp	r3, r4
 800561c:	db01      	blt.n	8005622 <__sfputc_r+0x16>
 800561e:	290a      	cmp	r1, #10
 8005620:	d103      	bne.n	800562a <__sfputc_r+0x1e>
 8005622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005626:	f7ff bab2 	b.w	8004b8e <__swbuf_r>
 800562a:	6813      	ldr	r3, [r2, #0]
 800562c:	1c58      	adds	r0, r3, #1
 800562e:	6010      	str	r0, [r2, #0]
 8005630:	7019      	strb	r1, [r3, #0]
 8005632:	4608      	mov	r0, r1
 8005634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005638:	4770      	bx	lr

0800563a <__sfputs_r>:
 800563a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	4614      	mov	r4, r2
 8005642:	18d5      	adds	r5, r2, r3
 8005644:	42ac      	cmp	r4, r5
 8005646:	d101      	bne.n	800564c <__sfputs_r+0x12>
 8005648:	2000      	movs	r0, #0
 800564a:	e007      	b.n	800565c <__sfputs_r+0x22>
 800564c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005650:	463a      	mov	r2, r7
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffda 	bl	800560c <__sfputc_r>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d1f3      	bne.n	8005644 <__sfputs_r+0xa>
 800565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005660 <_vfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	460d      	mov	r5, r1
 8005666:	b09d      	sub	sp, #116	@ 0x74
 8005668:	4614      	mov	r4, r2
 800566a:	4698      	mov	r8, r3
 800566c:	4606      	mov	r6, r0
 800566e:	b118      	cbz	r0, 8005678 <_vfiprintf_r+0x18>
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b90b      	cbnz	r3, 8005678 <_vfiprintf_r+0x18>
 8005674:	f7ff f942 	bl	80048fc <__sinit>
 8005678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d405      	bmi.n	800568a <_vfiprintf_r+0x2a>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	059a      	lsls	r2, r3, #22
 8005682:	d402      	bmi.n	800568a <_vfiprintf_r+0x2a>
 8005684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005686:	f7ff fba2 	bl	8004dce <__retarget_lock_acquire_recursive>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	071b      	lsls	r3, r3, #28
 800568e:	d501      	bpl.n	8005694 <_vfiprintf_r+0x34>
 8005690:	692b      	ldr	r3, [r5, #16]
 8005692:	b99b      	cbnz	r3, 80056bc <_vfiprintf_r+0x5c>
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f7ff fab8 	bl	8004c0c <__swsetup_r>
 800569c:	b170      	cbz	r0, 80056bc <_vfiprintf_r+0x5c>
 800569e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a0:	07dc      	lsls	r4, r3, #31
 80056a2:	d504      	bpl.n	80056ae <_vfiprintf_r+0x4e>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	b01d      	add	sp, #116	@ 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	0598      	lsls	r0, r3, #22
 80056b2:	d4f7      	bmi.n	80056a4 <_vfiprintf_r+0x44>
 80056b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056b6:	f7ff fb8b 	bl	8004dd0 <__retarget_lock_release_recursive>
 80056ba:	e7f3      	b.n	80056a4 <_vfiprintf_r+0x44>
 80056bc:	2300      	movs	r3, #0
 80056be:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c0:	2320      	movs	r3, #32
 80056c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ca:	2330      	movs	r3, #48	@ 0x30
 80056cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800587c <_vfiprintf_r+0x21c>
 80056d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056d4:	f04f 0901 	mov.w	r9, #1
 80056d8:	4623      	mov	r3, r4
 80056da:	469a      	mov	sl, r3
 80056dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e0:	b10a      	cbz	r2, 80056e6 <_vfiprintf_r+0x86>
 80056e2:	2a25      	cmp	r2, #37	@ 0x25
 80056e4:	d1f9      	bne.n	80056da <_vfiprintf_r+0x7a>
 80056e6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ea:	d00b      	beq.n	8005704 <_vfiprintf_r+0xa4>
 80056ec:	465b      	mov	r3, fp
 80056ee:	4622      	mov	r2, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ffa1 	bl	800563a <__sfputs_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	f000 80a7 	beq.w	800584c <_vfiprintf_r+0x1ec>
 80056fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005700:	445a      	add	r2, fp
 8005702:	9209      	str	r2, [sp, #36]	@ 0x24
 8005704:	f89a 3000 	ldrb.w	r3, [sl]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809f 	beq.w	800584c <_vfiprintf_r+0x1ec>
 800570e:	2300      	movs	r3, #0
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005718:	f10a 0a01 	add.w	sl, sl, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005724:	931a      	str	r3, [sp, #104]	@ 0x68
 8005726:	4654      	mov	r4, sl
 8005728:	2205      	movs	r2, #5
 800572a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572e:	4853      	ldr	r0, [pc, #332]	@ (800587c <_vfiprintf_r+0x21c>)
 8005730:	f7fa fd86 	bl	8000240 <memchr>
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	b9d8      	cbnz	r0, 8005770 <_vfiprintf_r+0x110>
 8005738:	06d1      	lsls	r1, r2, #27
 800573a:	bf44      	itt	mi
 800573c:	2320      	movmi	r3, #32
 800573e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005742:	0713      	lsls	r3, r2, #28
 8005744:	bf44      	itt	mi
 8005746:	232b      	movmi	r3, #43	@ 0x2b
 8005748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b2a      	cmp	r3, #42	@ 0x2a
 8005752:	d015      	beq.n	8005780 <_vfiprintf_r+0x120>
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4654      	mov	r4, sl
 8005758:	2000      	movs	r0, #0
 800575a:	f04f 0c0a 	mov.w	ip, #10
 800575e:	4621      	mov	r1, r4
 8005760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005764:	3b30      	subs	r3, #48	@ 0x30
 8005766:	2b09      	cmp	r3, #9
 8005768:	d94b      	bls.n	8005802 <_vfiprintf_r+0x1a2>
 800576a:	b1b0      	cbz	r0, 800579a <_vfiprintf_r+0x13a>
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	e014      	b.n	800579a <_vfiprintf_r+0x13a>
 8005770:	eba0 0308 	sub.w	r3, r0, r8
 8005774:	fa09 f303 	lsl.w	r3, r9, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	46a2      	mov	sl, r4
 800577e:	e7d2      	b.n	8005726 <_vfiprintf_r+0xc6>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d19      	adds	r1, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9103      	str	r1, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfbb      	ittet	lt
 800578c:	425b      	neglt	r3, r3
 800578e:	f042 0202 	orrlt.w	r2, r2, #2
 8005792:	9307      	strge	r3, [sp, #28]
 8005794:	9307      	strlt	r3, [sp, #28]
 8005796:	bfb8      	it	lt
 8005798:	9204      	strlt	r2, [sp, #16]
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	2b2e      	cmp	r3, #46	@ 0x2e
 800579e:	d10a      	bne.n	80057b6 <_vfiprintf_r+0x156>
 80057a0:	7863      	ldrb	r3, [r4, #1]
 80057a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057a4:	d132      	bne.n	800580c <_vfiprintf_r+0x1ac>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9203      	str	r2, [sp, #12]
 80057ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057b2:	3402      	adds	r4, #2
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800588c <_vfiprintf_r+0x22c>
 80057ba:	7821      	ldrb	r1, [r4, #0]
 80057bc:	2203      	movs	r2, #3
 80057be:	4650      	mov	r0, sl
 80057c0:	f7fa fd3e 	bl	8000240 <memchr>
 80057c4:	b138      	cbz	r0, 80057d6 <_vfiprintf_r+0x176>
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	eba0 000a 	sub.w	r0, r0, sl
 80057cc:	2240      	movs	r2, #64	@ 0x40
 80057ce:	4082      	lsls	r2, r0
 80057d0:	4313      	orrs	r3, r2
 80057d2:	3401      	adds	r4, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057da:	4829      	ldr	r0, [pc, #164]	@ (8005880 <_vfiprintf_r+0x220>)
 80057dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e0:	2206      	movs	r2, #6
 80057e2:	f7fa fd2d 	bl	8000240 <memchr>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d03f      	beq.n	800586a <_vfiprintf_r+0x20a>
 80057ea:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <_vfiprintf_r+0x224>)
 80057ec:	bb1b      	cbnz	r3, 8005836 <_vfiprintf_r+0x1d6>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	3307      	adds	r3, #7
 80057f2:	f023 0307 	bic.w	r3, r3, #7
 80057f6:	3308      	adds	r3, #8
 80057f8:	9303      	str	r3, [sp, #12]
 80057fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fc:	443b      	add	r3, r7
 80057fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005800:	e76a      	b.n	80056d8 <_vfiprintf_r+0x78>
 8005802:	fb0c 3202 	mla	r2, ip, r2, r3
 8005806:	460c      	mov	r4, r1
 8005808:	2001      	movs	r0, #1
 800580a:	e7a8      	b.n	800575e <_vfiprintf_r+0xfe>
 800580c:	2300      	movs	r3, #0
 800580e:	3401      	adds	r4, #1
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	4619      	mov	r1, r3
 8005814:	f04f 0c0a 	mov.w	ip, #10
 8005818:	4620      	mov	r0, r4
 800581a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800581e:	3a30      	subs	r2, #48	@ 0x30
 8005820:	2a09      	cmp	r2, #9
 8005822:	d903      	bls.n	800582c <_vfiprintf_r+0x1cc>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0c6      	beq.n	80057b6 <_vfiprintf_r+0x156>
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	e7c4      	b.n	80057b6 <_vfiprintf_r+0x156>
 800582c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005830:	4604      	mov	r4, r0
 8005832:	2301      	movs	r3, #1
 8005834:	e7f0      	b.n	8005818 <_vfiprintf_r+0x1b8>
 8005836:	ab03      	add	r3, sp, #12
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	462a      	mov	r2, r5
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <_vfiprintf_r+0x228>)
 800583e:	a904      	add	r1, sp, #16
 8005840:	4630      	mov	r0, r6
 8005842:	f3af 8000 	nop.w
 8005846:	4607      	mov	r7, r0
 8005848:	1c78      	adds	r0, r7, #1
 800584a:	d1d6      	bne.n	80057fa <_vfiprintf_r+0x19a>
 800584c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d405      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	059a      	lsls	r2, r3, #22
 8005856:	d402      	bmi.n	800585e <_vfiprintf_r+0x1fe>
 8005858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800585a:	f7ff fab9 	bl	8004dd0 <__retarget_lock_release_recursive>
 800585e:	89ab      	ldrh	r3, [r5, #12]
 8005860:	065b      	lsls	r3, r3, #25
 8005862:	f53f af1f 	bmi.w	80056a4 <_vfiprintf_r+0x44>
 8005866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005868:	e71e      	b.n	80056a8 <_vfiprintf_r+0x48>
 800586a:	ab03      	add	r3, sp, #12
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	462a      	mov	r2, r5
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <_vfiprintf_r+0x228>)
 8005872:	a904      	add	r1, sp, #16
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f879 	bl	800596c <_printf_i>
 800587a:	e7e4      	b.n	8005846 <_vfiprintf_r+0x1e6>
 800587c:	080067bc 	.word	0x080067bc
 8005880:	080067c6 	.word	0x080067c6
 8005884:	00000000 	.word	0x00000000
 8005888:	0800563b 	.word	0x0800563b
 800588c:	080067c2 	.word	0x080067c2

08005890 <_printf_common>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	4616      	mov	r6, r2
 8005896:	4698      	mov	r8, r3
 8005898:	688a      	ldr	r2, [r1, #8]
 800589a:	690b      	ldr	r3, [r1, #16]
 800589c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058a0:	4293      	cmp	r3, r2
 80058a2:	bfb8      	it	lt
 80058a4:	4613      	movlt	r3, r2
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058ac:	4607      	mov	r7, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	b10a      	cbz	r2, 80058b6 <_printf_common+0x26>
 80058b2:	3301      	adds	r3, #1
 80058b4:	6033      	str	r3, [r6, #0]
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	0699      	lsls	r1, r3, #26
 80058ba:	bf42      	ittt	mi
 80058bc:	6833      	ldrmi	r3, [r6, #0]
 80058be:	3302      	addmi	r3, #2
 80058c0:	6033      	strmi	r3, [r6, #0]
 80058c2:	6825      	ldr	r5, [r4, #0]
 80058c4:	f015 0506 	ands.w	r5, r5, #6
 80058c8:	d106      	bne.n	80058d8 <_printf_common+0x48>
 80058ca:	f104 0a19 	add.w	sl, r4, #25
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	6832      	ldr	r2, [r6, #0]
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dc26      	bgt.n	8005926 <_printf_common+0x96>
 80058d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	3b00      	subs	r3, #0
 80058e0:	bf18      	it	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	0692      	lsls	r2, r2, #26
 80058e6:	d42b      	bmi.n	8005940 <_printf_common+0xb0>
 80058e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058ec:	4641      	mov	r1, r8
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c8      	blx	r9
 80058f2:	3001      	adds	r0, #1
 80058f4:	d01e      	beq.n	8005934 <_printf_common+0xa4>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	6922      	ldr	r2, [r4, #16]
 80058fa:	f003 0306 	and.w	r3, r3, #6
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf02      	ittt	eq
 8005902:	68e5      	ldreq	r5, [r4, #12]
 8005904:	6833      	ldreq	r3, [r6, #0]
 8005906:	1aed      	subeq	r5, r5, r3
 8005908:	68a3      	ldr	r3, [r4, #8]
 800590a:	bf0c      	ite	eq
 800590c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005910:	2500      	movne	r5, #0
 8005912:	4293      	cmp	r3, r2
 8005914:	bfc4      	itt	gt
 8005916:	1a9b      	subgt	r3, r3, r2
 8005918:	18ed      	addgt	r5, r5, r3
 800591a:	2600      	movs	r6, #0
 800591c:	341a      	adds	r4, #26
 800591e:	42b5      	cmp	r5, r6
 8005920:	d11a      	bne.n	8005958 <_printf_common+0xc8>
 8005922:	2000      	movs	r0, #0
 8005924:	e008      	b.n	8005938 <_printf_common+0xa8>
 8005926:	2301      	movs	r3, #1
 8005928:	4652      	mov	r2, sl
 800592a:	4641      	mov	r1, r8
 800592c:	4638      	mov	r0, r7
 800592e:	47c8      	blx	r9
 8005930:	3001      	adds	r0, #1
 8005932:	d103      	bne.n	800593c <_printf_common+0xac>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	3501      	adds	r5, #1
 800593e:	e7c6      	b.n	80058ce <_printf_common+0x3e>
 8005940:	18e1      	adds	r1, r4, r3
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	2030      	movs	r0, #48	@ 0x30
 8005946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800594a:	4422      	add	r2, r4
 800594c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005954:	3302      	adds	r3, #2
 8005956:	e7c7      	b.n	80058e8 <_printf_common+0x58>
 8005958:	2301      	movs	r3, #1
 800595a:	4622      	mov	r2, r4
 800595c:	4641      	mov	r1, r8
 800595e:	4638      	mov	r0, r7
 8005960:	47c8      	blx	r9
 8005962:	3001      	adds	r0, #1
 8005964:	d0e6      	beq.n	8005934 <_printf_common+0xa4>
 8005966:	3601      	adds	r6, #1
 8005968:	e7d9      	b.n	800591e <_printf_common+0x8e>
	...

0800596c <_printf_i>:
 800596c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	7e0f      	ldrb	r7, [r1, #24]
 8005972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005974:	2f78      	cmp	r7, #120	@ 0x78
 8005976:	4691      	mov	r9, r2
 8005978:	4680      	mov	r8, r0
 800597a:	460c      	mov	r4, r1
 800597c:	469a      	mov	sl, r3
 800597e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005982:	d807      	bhi.n	8005994 <_printf_i+0x28>
 8005984:	2f62      	cmp	r7, #98	@ 0x62
 8005986:	d80a      	bhi.n	800599e <_printf_i+0x32>
 8005988:	2f00      	cmp	r7, #0
 800598a:	f000 80d2 	beq.w	8005b32 <_printf_i+0x1c6>
 800598e:	2f58      	cmp	r7, #88	@ 0x58
 8005990:	f000 80b9 	beq.w	8005b06 <_printf_i+0x19a>
 8005994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800599c:	e03a      	b.n	8005a14 <_printf_i+0xa8>
 800599e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059a2:	2b15      	cmp	r3, #21
 80059a4:	d8f6      	bhi.n	8005994 <_printf_i+0x28>
 80059a6:	a101      	add	r1, pc, #4	@ (adr r1, 80059ac <_printf_i+0x40>)
 80059a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	08005995 	.word	0x08005995
 80059b8:	08005995 	.word	0x08005995
 80059bc:	08005995 	.word	0x08005995
 80059c0:	08005995 	.word	0x08005995
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005995 	.word	0x08005995
 80059cc:	08005995 	.word	0x08005995
 80059d0:	08005995 	.word	0x08005995
 80059d4:	08005995 	.word	0x08005995
 80059d8:	08005b19 	.word	0x08005b19
 80059dc:	08005a43 	.word	0x08005a43
 80059e0:	08005ad3 	.word	0x08005ad3
 80059e4:	08005995 	.word	0x08005995
 80059e8:	08005995 	.word	0x08005995
 80059ec:	08005b3b 	.word	0x08005b3b
 80059f0:	08005995 	.word	0x08005995
 80059f4:	08005a43 	.word	0x08005a43
 80059f8:	08005995 	.word	0x08005995
 80059fc:	08005995 	.word	0x08005995
 8005a00:	08005adb 	.word	0x08005adb
 8005a04:	6833      	ldr	r3, [r6, #0]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6032      	str	r2, [r6, #0]
 8005a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a14:	2301      	movs	r3, #1
 8005a16:	e09d      	b.n	8005b54 <_printf_i+0x1e8>
 8005a18:	6833      	ldr	r3, [r6, #0]
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	6031      	str	r1, [r6, #0]
 8005a20:	0606      	lsls	r6, r0, #24
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0xbc>
 8005a24:	681d      	ldr	r5, [r3, #0]
 8005a26:	e003      	b.n	8005a30 <_printf_i+0xc4>
 8005a28:	0645      	lsls	r5, r0, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0xb8>
 8005a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a30:	2d00      	cmp	r5, #0
 8005a32:	da03      	bge.n	8005a3c <_printf_i+0xd0>
 8005a34:	232d      	movs	r3, #45	@ 0x2d
 8005a36:	426d      	negs	r5, r5
 8005a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a3c:	4859      	ldr	r0, [pc, #356]	@ (8005ba4 <_printf_i+0x238>)
 8005a3e:	230a      	movs	r3, #10
 8005a40:	e011      	b.n	8005a66 <_printf_i+0xfa>
 8005a42:	6821      	ldr	r1, [r4, #0]
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	0608      	lsls	r0, r1, #24
 8005a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a4c:	d402      	bmi.n	8005a54 <_printf_i+0xe8>
 8005a4e:	0649      	lsls	r1, r1, #25
 8005a50:	bf48      	it	mi
 8005a52:	b2ad      	uxthmi	r5, r5
 8005a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a56:	4853      	ldr	r0, [pc, #332]	@ (8005ba4 <_printf_i+0x238>)
 8005a58:	6033      	str	r3, [r6, #0]
 8005a5a:	bf14      	ite	ne
 8005a5c:	230a      	movne	r3, #10
 8005a5e:	2308      	moveq	r3, #8
 8005a60:	2100      	movs	r1, #0
 8005a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a66:	6866      	ldr	r6, [r4, #4]
 8005a68:	60a6      	str	r6, [r4, #8]
 8005a6a:	2e00      	cmp	r6, #0
 8005a6c:	bfa2      	ittt	ge
 8005a6e:	6821      	ldrge	r1, [r4, #0]
 8005a70:	f021 0104 	bicge.w	r1, r1, #4
 8005a74:	6021      	strge	r1, [r4, #0]
 8005a76:	b90d      	cbnz	r5, 8005a7c <_printf_i+0x110>
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	d04b      	beq.n	8005b14 <_printf_i+0x1a8>
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a82:	fb03 5711 	mls	r7, r3, r1, r5
 8005a86:	5dc7      	ldrb	r7, [r0, r7]
 8005a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a8c:	462f      	mov	r7, r5
 8005a8e:	42bb      	cmp	r3, r7
 8005a90:	460d      	mov	r5, r1
 8005a92:	d9f4      	bls.n	8005a7e <_printf_i+0x112>
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d10b      	bne.n	8005ab0 <_printf_i+0x144>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	07df      	lsls	r7, r3, #31
 8005a9c:	d508      	bpl.n	8005ab0 <_printf_i+0x144>
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	6861      	ldr	r1, [r4, #4]
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	bfde      	ittt	le
 8005aa6:	2330      	movle	r3, #48	@ 0x30
 8005aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ab0:	1b92      	subs	r2, r2, r6
 8005ab2:	6122      	str	r2, [r4, #16]
 8005ab4:	f8cd a000 	str.w	sl, [sp]
 8005ab8:	464b      	mov	r3, r9
 8005aba:	aa03      	add	r2, sp, #12
 8005abc:	4621      	mov	r1, r4
 8005abe:	4640      	mov	r0, r8
 8005ac0:	f7ff fee6 	bl	8005890 <_printf_common>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d14a      	bne.n	8005b5e <_printf_i+0x1f2>
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	b004      	add	sp, #16
 8005ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f043 0320 	orr.w	r3, r3, #32
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	4833      	ldr	r0, [pc, #204]	@ (8005ba8 <_printf_i+0x23c>)
 8005adc:	2778      	movs	r7, #120	@ 0x78
 8005ade:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	6831      	ldr	r1, [r6, #0]
 8005ae6:	061f      	lsls	r7, r3, #24
 8005ae8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aec:	d402      	bmi.n	8005af4 <_printf_i+0x188>
 8005aee:	065f      	lsls	r7, r3, #25
 8005af0:	bf48      	it	mi
 8005af2:	b2ad      	uxthmi	r5, r5
 8005af4:	6031      	str	r1, [r6, #0]
 8005af6:	07d9      	lsls	r1, r3, #31
 8005af8:	bf44      	itt	mi
 8005afa:	f043 0320 	orrmi.w	r3, r3, #32
 8005afe:	6023      	strmi	r3, [r4, #0]
 8005b00:	b11d      	cbz	r5, 8005b0a <_printf_i+0x19e>
 8005b02:	2310      	movs	r3, #16
 8005b04:	e7ac      	b.n	8005a60 <_printf_i+0xf4>
 8005b06:	4827      	ldr	r0, [pc, #156]	@ (8005ba4 <_printf_i+0x238>)
 8005b08:	e7e9      	b.n	8005ade <_printf_i+0x172>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	f023 0320 	bic.w	r3, r3, #32
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	e7f6      	b.n	8005b02 <_printf_i+0x196>
 8005b14:	4616      	mov	r6, r2
 8005b16:	e7bd      	b.n	8005a94 <_printf_i+0x128>
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	6825      	ldr	r5, [r4, #0]
 8005b1c:	6961      	ldr	r1, [r4, #20]
 8005b1e:	1d18      	adds	r0, r3, #4
 8005b20:	6030      	str	r0, [r6, #0]
 8005b22:	062e      	lsls	r6, r5, #24
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	d501      	bpl.n	8005b2c <_printf_i+0x1c0>
 8005b28:	6019      	str	r1, [r3, #0]
 8005b2a:	e002      	b.n	8005b32 <_printf_i+0x1c6>
 8005b2c:	0668      	lsls	r0, r5, #25
 8005b2e:	d5fb      	bpl.n	8005b28 <_printf_i+0x1bc>
 8005b30:	8019      	strh	r1, [r3, #0]
 8005b32:	2300      	movs	r3, #0
 8005b34:	6123      	str	r3, [r4, #16]
 8005b36:	4616      	mov	r6, r2
 8005b38:	e7bc      	b.n	8005ab4 <_printf_i+0x148>
 8005b3a:	6833      	ldr	r3, [r6, #0]
 8005b3c:	1d1a      	adds	r2, r3, #4
 8005b3e:	6032      	str	r2, [r6, #0]
 8005b40:	681e      	ldr	r6, [r3, #0]
 8005b42:	6862      	ldr	r2, [r4, #4]
 8005b44:	2100      	movs	r1, #0
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7fa fb7a 	bl	8000240 <memchr>
 8005b4c:	b108      	cbz	r0, 8005b52 <_printf_i+0x1e6>
 8005b4e:	1b80      	subs	r0, r0, r6
 8005b50:	6060      	str	r0, [r4, #4]
 8005b52:	6863      	ldr	r3, [r4, #4]
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	2300      	movs	r3, #0
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b5c:	e7aa      	b.n	8005ab4 <_printf_i+0x148>
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	4632      	mov	r2, r6
 8005b62:	4649      	mov	r1, r9
 8005b64:	4640      	mov	r0, r8
 8005b66:	47d0      	blx	sl
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d0ad      	beq.n	8005ac8 <_printf_i+0x15c>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	079b      	lsls	r3, r3, #30
 8005b70:	d413      	bmi.n	8005b9a <_printf_i+0x22e>
 8005b72:	68e0      	ldr	r0, [r4, #12]
 8005b74:	9b03      	ldr	r3, [sp, #12]
 8005b76:	4298      	cmp	r0, r3
 8005b78:	bfb8      	it	lt
 8005b7a:	4618      	movlt	r0, r3
 8005b7c:	e7a6      	b.n	8005acc <_printf_i+0x160>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4632      	mov	r2, r6
 8005b82:	4649      	mov	r1, r9
 8005b84:	4640      	mov	r0, r8
 8005b86:	47d0      	blx	sl
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d09d      	beq.n	8005ac8 <_printf_i+0x15c>
 8005b8c:	3501      	adds	r5, #1
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	9903      	ldr	r1, [sp, #12]
 8005b92:	1a5b      	subs	r3, r3, r1
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dcf2      	bgt.n	8005b7e <_printf_i+0x212>
 8005b98:	e7eb      	b.n	8005b72 <_printf_i+0x206>
 8005b9a:	2500      	movs	r5, #0
 8005b9c:	f104 0619 	add.w	r6, r4, #25
 8005ba0:	e7f5      	b.n	8005b8e <_printf_i+0x222>
 8005ba2:	bf00      	nop
 8005ba4:	080067cd 	.word	0x080067cd
 8005ba8:	080067de 	.word	0x080067de

08005bac <_scanf_chars>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	688a      	ldr	r2, [r1, #8]
 8005bb4:	4680      	mov	r8, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	b932      	cbnz	r2, 8005bc8 <_scanf_chars+0x1c>
 8005bba:	698a      	ldr	r2, [r1, #24]
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	f04f 32ff 	movne.w	r2, #4294967295
 8005bc4:	2201      	moveq	r2, #1
 8005bc6:	608a      	str	r2, [r1, #8]
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005c5c <_scanf_chars+0xb0>
 8005bce:	06d1      	lsls	r1, r2, #27
 8005bd0:	bf5f      	itttt	pl
 8005bd2:	681a      	ldrpl	r2, [r3, #0]
 8005bd4:	1d11      	addpl	r1, r2, #4
 8005bd6:	6019      	strpl	r1, [r3, #0]
 8005bd8:	6816      	ldrpl	r6, [r2, #0]
 8005bda:	2700      	movs	r7, #0
 8005bdc:	69a0      	ldr	r0, [r4, #24]
 8005bde:	b188      	cbz	r0, 8005c04 <_scanf_chars+0x58>
 8005be0:	2801      	cmp	r0, #1
 8005be2:	d107      	bne.n	8005bf4 <_scanf_chars+0x48>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	6963      	ldr	r3, [r4, #20]
 8005bea:	5c9b      	ldrb	r3, [r3, r2]
 8005bec:	b953      	cbnz	r3, 8005c04 <_scanf_chars+0x58>
 8005bee:	2f00      	cmp	r7, #0
 8005bf0:	d031      	beq.n	8005c56 <_scanf_chars+0xaa>
 8005bf2:	e022      	b.n	8005c3a <_scanf_chars+0x8e>
 8005bf4:	2802      	cmp	r0, #2
 8005bf6:	d120      	bne.n	8005c3a <_scanf_chars+0x8e>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005c00:	071b      	lsls	r3, r3, #28
 8005c02:	d41a      	bmi.n	8005c3a <_scanf_chars+0x8e>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	06da      	lsls	r2, r3, #27
 8005c08:	bf5e      	ittt	pl
 8005c0a:	682b      	ldrpl	r3, [r5, #0]
 8005c0c:	781b      	ldrbpl	r3, [r3, #0]
 8005c0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005c12:	682a      	ldr	r2, [r5, #0]
 8005c14:	686b      	ldr	r3, [r5, #4]
 8005c16:	3201      	adds	r2, #1
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	68a2      	ldr	r2, [r4, #8]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	606b      	str	r3, [r5, #4]
 8005c22:	3701      	adds	r7, #1
 8005c24:	60a2      	str	r2, [r4, #8]
 8005c26:	b142      	cbz	r2, 8005c3a <_scanf_chars+0x8e>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dcd7      	bgt.n	8005bdc <_scanf_chars+0x30>
 8005c2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005c30:	4629      	mov	r1, r5
 8005c32:	4640      	mov	r0, r8
 8005c34:	4798      	blx	r3
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0d0      	beq.n	8005bdc <_scanf_chars+0x30>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f013 0310 	ands.w	r3, r3, #16
 8005c40:	d105      	bne.n	8005c4e <_scanf_chars+0xa2>
 8005c42:	68e2      	ldr	r2, [r4, #12]
 8005c44:	3201      	adds	r2, #1
 8005c46:	60e2      	str	r2, [r4, #12]
 8005c48:	69a2      	ldr	r2, [r4, #24]
 8005c4a:	b102      	cbz	r2, 8005c4e <_scanf_chars+0xa2>
 8005c4c:	7033      	strb	r3, [r6, #0]
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	443b      	add	r3, r7
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	2000      	movs	r0, #0
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5a:	bf00      	nop
 8005c5c:	0800680b 	.word	0x0800680b

08005c60 <_scanf_i>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4698      	mov	r8, r3
 8005c66:	4b74      	ldr	r3, [pc, #464]	@ (8005e38 <_scanf_i+0x1d8>)
 8005c68:	460c      	mov	r4, r1
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c72:	b087      	sub	sp, #28
 8005c74:	ab03      	add	r3, sp, #12
 8005c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c7a:	4b70      	ldr	r3, [pc, #448]	@ (8005e3c <_scanf_i+0x1dc>)
 8005c7c:	69a1      	ldr	r1, [r4, #24]
 8005c7e:	4a70      	ldr	r2, [pc, #448]	@ (8005e40 <_scanf_i+0x1e0>)
 8005c80:	2903      	cmp	r1, #3
 8005c82:	bf08      	it	eq
 8005c84:	461a      	moveq	r2, r3
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	9201      	str	r2, [sp, #4]
 8005c8a:	1e5a      	subs	r2, r3, #1
 8005c8c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c90:	bf88      	it	hi
 8005c92:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c96:	4627      	mov	r7, r4
 8005c98:	bf82      	ittt	hi
 8005c9a:	eb03 0905 	addhi.w	r9, r3, r5
 8005c9e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ca2:	60a3      	strhi	r3, [r4, #8]
 8005ca4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005ca8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005cac:	bf98      	it	ls
 8005cae:	f04f 0900 	movls.w	r9, #0
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	463d      	mov	r5, r7
 8005cb6:	f04f 0b00 	mov.w	fp, #0
 8005cba:	6831      	ldr	r1, [r6, #0]
 8005cbc:	ab03      	add	r3, sp, #12
 8005cbe:	7809      	ldrb	r1, [r1, #0]
 8005cc0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f7fa fabb 	bl	8000240 <memchr>
 8005cca:	b328      	cbz	r0, 8005d18 <_scanf_i+0xb8>
 8005ccc:	f1bb 0f01 	cmp.w	fp, #1
 8005cd0:	d159      	bne.n	8005d86 <_scanf_i+0x126>
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	b92a      	cbnz	r2, 8005ce2 <_scanf_i+0x82>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	2108      	movs	r1, #8
 8005cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cde:	6061      	str	r1, [r4, #4]
 8005ce0:	6022      	str	r2, [r4, #0]
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005ce8:	6022      	str	r2, [r4, #0]
 8005cea:	68a2      	ldr	r2, [r4, #8]
 8005cec:	1e51      	subs	r1, r2, #1
 8005cee:	60a1      	str	r1, [r4, #8]
 8005cf0:	b192      	cbz	r2, 8005d18 <_scanf_i+0xb8>
 8005cf2:	6832      	ldr	r2, [r6, #0]
 8005cf4:	1c51      	adds	r1, r2, #1
 8005cf6:	6031      	str	r1, [r6, #0]
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	f805 2b01 	strb.w	r2, [r5], #1
 8005cfe:	6872      	ldr	r2, [r6, #4]
 8005d00:	3a01      	subs	r2, #1
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	6072      	str	r2, [r6, #4]
 8005d06:	dc07      	bgt.n	8005d18 <_scanf_i+0xb8>
 8005d08:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4650      	mov	r0, sl
 8005d10:	4790      	blx	r2
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f040 8085 	bne.w	8005e22 <_scanf_i+0x1c2>
 8005d18:	f10b 0b01 	add.w	fp, fp, #1
 8005d1c:	f1bb 0f03 	cmp.w	fp, #3
 8005d20:	d1cb      	bne.n	8005cba <_scanf_i+0x5a>
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	b90b      	cbnz	r3, 8005d2a <_scanf_i+0xca>
 8005d26:	230a      	movs	r3, #10
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6863      	ldr	r3, [r4, #4]
 8005d2c:	4945      	ldr	r1, [pc, #276]	@ (8005e44 <_scanf_i+0x1e4>)
 8005d2e:	6960      	ldr	r0, [r4, #20]
 8005d30:	1ac9      	subs	r1, r1, r3
 8005d32:	f000 f997 	bl	8006064 <__sccl>
 8005d36:	f04f 0b00 	mov.w	fp, #0
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d03d      	beq.n	8005dbe <_scanf_i+0x15e>
 8005d42:	6831      	ldr	r1, [r6, #0]
 8005d44:	6960      	ldr	r0, [r4, #20]
 8005d46:	f891 c000 	ldrb.w	ip, [r1]
 8005d4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d035      	beq.n	8005dbe <_scanf_i+0x15e>
 8005d52:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005d56:	d124      	bne.n	8005da2 <_scanf_i+0x142>
 8005d58:	0510      	lsls	r0, r2, #20
 8005d5a:	d522      	bpl.n	8005da2 <_scanf_i+0x142>
 8005d5c:	f10b 0b01 	add.w	fp, fp, #1
 8005d60:	f1b9 0f00 	cmp.w	r9, #0
 8005d64:	d003      	beq.n	8005d6e <_scanf_i+0x10e>
 8005d66:	3301      	adds	r3, #1
 8005d68:	f109 39ff 	add.w	r9, r9, #4294967295
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	6873      	ldr	r3, [r6, #4]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	6073      	str	r3, [r6, #4]
 8005d76:	dd1b      	ble.n	8005db0 <_scanf_i+0x150>
 8005d78:	6833      	ldr	r3, [r6, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	6033      	str	r3, [r6, #0]
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	e7d9      	b.n	8005d3a <_scanf_i+0xda>
 8005d86:	f1bb 0f02 	cmp.w	fp, #2
 8005d8a:	d1ae      	bne.n	8005cea <_scanf_i+0x8a>
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005d92:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005d96:	d1bf      	bne.n	8005d18 <_scanf_i+0xb8>
 8005d98:	2110      	movs	r1, #16
 8005d9a:	6061      	str	r1, [r4, #4]
 8005d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da0:	e7a2      	b.n	8005ce8 <_scanf_i+0x88>
 8005da2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	780b      	ldrb	r3, [r1, #0]
 8005daa:	f805 3b01 	strb.w	r3, [r5], #1
 8005dae:	e7de      	b.n	8005d6e <_scanf_i+0x10e>
 8005db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005db4:	4631      	mov	r1, r6
 8005db6:	4650      	mov	r0, sl
 8005db8:	4798      	blx	r3
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d0df      	beq.n	8005d7e <_scanf_i+0x11e>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	05d9      	lsls	r1, r3, #23
 8005dc2:	d50d      	bpl.n	8005de0 <_scanf_i+0x180>
 8005dc4:	42bd      	cmp	r5, r7
 8005dc6:	d909      	bls.n	8005ddc <_scanf_i+0x17c>
 8005dc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	4798      	blx	r3
 8005dd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8005dda:	464d      	mov	r5, r9
 8005ddc:	42bd      	cmp	r5, r7
 8005dde:	d028      	beq.n	8005e32 <_scanf_i+0x1d2>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	f012 0210 	ands.w	r2, r2, #16
 8005de6:	d113      	bne.n	8005e10 <_scanf_i+0x1b0>
 8005de8:	702a      	strb	r2, [r5, #0]
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	9e01      	ldr	r6, [sp, #4]
 8005dee:	4639      	mov	r1, r7
 8005df0:	4650      	mov	r0, sl
 8005df2:	47b0      	blx	r6
 8005df4:	f8d8 3000 	ldr.w	r3, [r8]
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	1d1a      	adds	r2, r3, #4
 8005dfc:	f8c8 2000 	str.w	r2, [r8]
 8005e00:	f011 0f20 	tst.w	r1, #32
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	d00f      	beq.n	8005e28 <_scanf_i+0x1c8>
 8005e08:	6018      	str	r0, [r3, #0]
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60e3      	str	r3, [r4, #12]
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	1bed      	subs	r5, r5, r7
 8005e14:	445d      	add	r5, fp
 8005e16:	442b      	add	r3, r5
 8005e18:	6123      	str	r3, [r4, #16]
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	b007      	add	sp, #28
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e22:	f04f 0b00 	mov.w	fp, #0
 8005e26:	e7ca      	b.n	8005dbe <_scanf_i+0x15e>
 8005e28:	07ca      	lsls	r2, r1, #31
 8005e2a:	bf4c      	ite	mi
 8005e2c:	8018      	strhmi	r0, [r3, #0]
 8005e2e:	6018      	strpl	r0, [r3, #0]
 8005e30:	e7eb      	b.n	8005e0a <_scanf_i+0x1aa>
 8005e32:	2001      	movs	r0, #1
 8005e34:	e7f2      	b.n	8005e1c <_scanf_i+0x1bc>
 8005e36:	bf00      	nop
 8005e38:	08006798 	.word	0x08006798
 8005e3c:	08006351 	.word	0x08006351
 8005e40:	08006431 	.word	0x08006431
 8005e44:	080067ff 	.word	0x080067ff

08005e48 <__sflush_r>:
 8005e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	0716      	lsls	r6, r2, #28
 8005e52:	4605      	mov	r5, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	d454      	bmi.n	8005f02 <__sflush_r+0xba>
 8005e58:	684b      	ldr	r3, [r1, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc02      	bgt.n	8005e64 <__sflush_r+0x1c>
 8005e5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dd48      	ble.n	8005ef6 <__sflush_r+0xae>
 8005e64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e66:	2e00      	cmp	r6, #0
 8005e68:	d045      	beq.n	8005ef6 <__sflush_r+0xae>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e70:	682f      	ldr	r7, [r5, #0]
 8005e72:	6a21      	ldr	r1, [r4, #32]
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	d030      	beq.n	8005eda <__sflush_r+0x92>
 8005e78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	0759      	lsls	r1, r3, #29
 8005e7e:	d505      	bpl.n	8005e8c <__sflush_r+0x44>
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e86:	b10b      	cbz	r3, 8005e8c <__sflush_r+0x44>
 8005e88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e90:	6a21      	ldr	r1, [r4, #32]
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b0      	blx	r6
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	d106      	bne.n	8005eaa <__sflush_r+0x62>
 8005e9c:	6829      	ldr	r1, [r5, #0]
 8005e9e:	291d      	cmp	r1, #29
 8005ea0:	d82b      	bhi.n	8005efa <__sflush_r+0xb2>
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <__sflush_r+0x104>)
 8005ea4:	410a      	asrs	r2, r1
 8005ea6:	07d6      	lsls	r6, r2, #31
 8005ea8:	d427      	bmi.n	8005efa <__sflush_r+0xb2>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	6062      	str	r2, [r4, #4]
 8005eae:	04d9      	lsls	r1, r3, #19
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	d504      	bpl.n	8005ec0 <__sflush_r+0x78>
 8005eb6:	1c42      	adds	r2, r0, #1
 8005eb8:	d101      	bne.n	8005ebe <__sflush_r+0x76>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	b903      	cbnz	r3, 8005ec0 <__sflush_r+0x78>
 8005ebe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ec2:	602f      	str	r7, [r5, #0]
 8005ec4:	b1b9      	cbz	r1, 8005ef6 <__sflush_r+0xae>
 8005ec6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	d002      	beq.n	8005ed4 <__sflush_r+0x8c>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f7fe ff80 	bl	8004dd4 <_free_r>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ed8:	e00d      	b.n	8005ef6 <__sflush_r+0xae>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b0      	blx	r6
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	1c50      	adds	r0, r2, #1
 8005ee4:	d1c9      	bne.n	8005e7a <__sflush_r+0x32>
 8005ee6:	682b      	ldr	r3, [r5, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0c6      	beq.n	8005e7a <__sflush_r+0x32>
 8005eec:	2b1d      	cmp	r3, #29
 8005eee:	d001      	beq.n	8005ef4 <__sflush_r+0xac>
 8005ef0:	2b16      	cmp	r3, #22
 8005ef2:	d11e      	bne.n	8005f32 <__sflush_r+0xea>
 8005ef4:	602f      	str	r7, [r5, #0]
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	e022      	b.n	8005f40 <__sflush_r+0xf8>
 8005efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	e01b      	b.n	8005f3a <__sflush_r+0xf2>
 8005f02:	690f      	ldr	r7, [r1, #16]
 8005f04:	2f00      	cmp	r7, #0
 8005f06:	d0f6      	beq.n	8005ef6 <__sflush_r+0xae>
 8005f08:	0793      	lsls	r3, r2, #30
 8005f0a:	680e      	ldr	r6, [r1, #0]
 8005f0c:	bf08      	it	eq
 8005f0e:	694b      	ldreq	r3, [r1, #20]
 8005f10:	600f      	str	r7, [r1, #0]
 8005f12:	bf18      	it	ne
 8005f14:	2300      	movne	r3, #0
 8005f16:	eba6 0807 	sub.w	r8, r6, r7
 8005f1a:	608b      	str	r3, [r1, #8]
 8005f1c:	f1b8 0f00 	cmp.w	r8, #0
 8005f20:	dde9      	ble.n	8005ef6 <__sflush_r+0xae>
 8005f22:	6a21      	ldr	r1, [r4, #32]
 8005f24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f26:	4643      	mov	r3, r8
 8005f28:	463a      	mov	r2, r7
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b0      	blx	r6
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	dc08      	bgt.n	8005f44 <__sflush_r+0xfc>
 8005f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f44:	4407      	add	r7, r0
 8005f46:	eba8 0800 	sub.w	r8, r8, r0
 8005f4a:	e7e7      	b.n	8005f1c <__sflush_r+0xd4>
 8005f4c:	dfbffffe 	.word	0xdfbffffe

08005f50 <_fflush_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	690b      	ldr	r3, [r1, #16]
 8005f54:	4605      	mov	r5, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	b913      	cbnz	r3, 8005f60 <_fflush_r+0x10>
 8005f5a:	2500      	movs	r5, #0
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	b118      	cbz	r0, 8005f6a <_fflush_r+0x1a>
 8005f62:	6a03      	ldr	r3, [r0, #32]
 8005f64:	b90b      	cbnz	r3, 8005f6a <_fflush_r+0x1a>
 8005f66:	f7fe fcc9 	bl	80048fc <__sinit>
 8005f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f3      	beq.n	8005f5a <_fflush_r+0xa>
 8005f72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f74:	07d0      	lsls	r0, r2, #31
 8005f76:	d404      	bmi.n	8005f82 <_fflush_r+0x32>
 8005f78:	0599      	lsls	r1, r3, #22
 8005f7a:	d402      	bmi.n	8005f82 <_fflush_r+0x32>
 8005f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f7e:	f7fe ff26 	bl	8004dce <__retarget_lock_acquire_recursive>
 8005f82:	4628      	mov	r0, r5
 8005f84:	4621      	mov	r1, r4
 8005f86:	f7ff ff5f 	bl	8005e48 <__sflush_r>
 8005f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f8c:	07da      	lsls	r2, r3, #31
 8005f8e:	4605      	mov	r5, r0
 8005f90:	d4e4      	bmi.n	8005f5c <_fflush_r+0xc>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	d4e1      	bmi.n	8005f5c <_fflush_r+0xc>
 8005f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9a:	f7fe ff19 	bl	8004dd0 <__retarget_lock_release_recursive>
 8005f9e:	e7dd      	b.n	8005f5c <_fflush_r+0xc>

08005fa0 <__swhatbuf_r>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	b096      	sub	sp, #88	@ 0x58
 8005fac:	4615      	mov	r5, r2
 8005fae:	461e      	mov	r6, r3
 8005fb0:	da0d      	bge.n	8005fce <__swhatbuf_r+0x2e>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	bf14      	ite	ne
 8005fbe:	2340      	movne	r3, #64	@ 0x40
 8005fc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	6031      	str	r1, [r6, #0]
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	b016      	add	sp, #88	@ 0x58
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	466a      	mov	r2, sp
 8005fd0:	f000 f8d6 	bl	8006180 <_fstat_r>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	dbec      	blt.n	8005fb2 <__swhatbuf_r+0x12>
 8005fd8:	9901      	ldr	r1, [sp, #4]
 8005fda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005fe2:	4259      	negs	r1, r3
 8005fe4:	4159      	adcs	r1, r3
 8005fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fea:	e7eb      	b.n	8005fc4 <__swhatbuf_r+0x24>

08005fec <__smakebuf_r>:
 8005fec:	898b      	ldrh	r3, [r1, #12]
 8005fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff0:	079d      	lsls	r5, r3, #30
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	d507      	bpl.n	8006008 <__smakebuf_r+0x1c>
 8005ff8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	6123      	str	r3, [r4, #16]
 8006000:	2301      	movs	r3, #1
 8006002:	6163      	str	r3, [r4, #20]
 8006004:	b003      	add	sp, #12
 8006006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006008:	ab01      	add	r3, sp, #4
 800600a:	466a      	mov	r2, sp
 800600c:	f7ff ffc8 	bl	8005fa0 <__swhatbuf_r>
 8006010:	9f00      	ldr	r7, [sp, #0]
 8006012:	4605      	mov	r5, r0
 8006014:	4639      	mov	r1, r7
 8006016:	4630      	mov	r0, r6
 8006018:	f7fe ff48 	bl	8004eac <_malloc_r>
 800601c:	b948      	cbnz	r0, 8006032 <__smakebuf_r+0x46>
 800601e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006022:	059a      	lsls	r2, r3, #22
 8006024:	d4ee      	bmi.n	8006004 <__smakebuf_r+0x18>
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	e7e2      	b.n	8005ff8 <__smakebuf_r+0xc>
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	6020      	str	r0, [r4, #0]
 8006036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603a:	81a3      	strh	r3, [r4, #12]
 800603c:	9b01      	ldr	r3, [sp, #4]
 800603e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006042:	b15b      	cbz	r3, 800605c <__smakebuf_r+0x70>
 8006044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006048:	4630      	mov	r0, r6
 800604a:	f000 f8ab 	bl	80061a4 <_isatty_r>
 800604e:	b128      	cbz	r0, 800605c <__smakebuf_r+0x70>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	431d      	orrs	r5, r3
 8006060:	81a5      	strh	r5, [r4, #12]
 8006062:	e7cf      	b.n	8006004 <__smakebuf_r+0x18>

08006064 <__sccl>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	780b      	ldrb	r3, [r1, #0]
 8006068:	4604      	mov	r4, r0
 800606a:	2b5e      	cmp	r3, #94	@ 0x5e
 800606c:	bf0b      	itete	eq
 800606e:	784b      	ldrbeq	r3, [r1, #1]
 8006070:	1c4a      	addne	r2, r1, #1
 8006072:	1c8a      	addeq	r2, r1, #2
 8006074:	2100      	movne	r1, #0
 8006076:	bf08      	it	eq
 8006078:	2101      	moveq	r1, #1
 800607a:	3801      	subs	r0, #1
 800607c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006080:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006084:	42a8      	cmp	r0, r5
 8006086:	d1fb      	bne.n	8006080 <__sccl+0x1c>
 8006088:	b90b      	cbnz	r3, 800608e <__sccl+0x2a>
 800608a:	1e50      	subs	r0, r2, #1
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	f081 0101 	eor.w	r1, r1, #1
 8006092:	54e1      	strb	r1, [r4, r3]
 8006094:	4610      	mov	r0, r2
 8006096:	4602      	mov	r2, r0
 8006098:	f812 5b01 	ldrb.w	r5, [r2], #1
 800609c:	2d2d      	cmp	r5, #45	@ 0x2d
 800609e:	d005      	beq.n	80060ac <__sccl+0x48>
 80060a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80060a2:	d016      	beq.n	80060d2 <__sccl+0x6e>
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	d0f1      	beq.n	800608c <__sccl+0x28>
 80060a8:	462b      	mov	r3, r5
 80060aa:	e7f2      	b.n	8006092 <__sccl+0x2e>
 80060ac:	7846      	ldrb	r6, [r0, #1]
 80060ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80060b0:	d0fa      	beq.n	80060a8 <__sccl+0x44>
 80060b2:	42b3      	cmp	r3, r6
 80060b4:	dcf8      	bgt.n	80060a8 <__sccl+0x44>
 80060b6:	3002      	adds	r0, #2
 80060b8:	461a      	mov	r2, r3
 80060ba:	3201      	adds	r2, #1
 80060bc:	4296      	cmp	r6, r2
 80060be:	54a1      	strb	r1, [r4, r2]
 80060c0:	dcfb      	bgt.n	80060ba <__sccl+0x56>
 80060c2:	1af2      	subs	r2, r6, r3
 80060c4:	3a01      	subs	r2, #1
 80060c6:	1c5d      	adds	r5, r3, #1
 80060c8:	42b3      	cmp	r3, r6
 80060ca:	bfa8      	it	ge
 80060cc:	2200      	movge	r2, #0
 80060ce:	18ab      	adds	r3, r5, r2
 80060d0:	e7e1      	b.n	8006096 <__sccl+0x32>
 80060d2:	4610      	mov	r0, r2
 80060d4:	e7da      	b.n	800608c <__sccl+0x28>

080060d6 <__submore>:
 80060d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	460c      	mov	r4, r1
 80060dc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80060de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060e2:	4299      	cmp	r1, r3
 80060e4:	d11d      	bne.n	8006122 <__submore+0x4c>
 80060e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80060ea:	f7fe fedf 	bl	8004eac <_malloc_r>
 80060ee:	b918      	cbnz	r0, 80060f8 <__submore+0x22>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80060fe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006102:	6360      	str	r0, [r4, #52]	@ 0x34
 8006104:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006108:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800610c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006110:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006114:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006118:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800611c:	6020      	str	r0, [r4, #0]
 800611e:	2000      	movs	r0, #0
 8006120:	e7e8      	b.n	80060f4 <__submore+0x1e>
 8006122:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006124:	0077      	lsls	r7, r6, #1
 8006126:	463a      	mov	r2, r7
 8006128:	f000 f86a 	bl	8006200 <_realloc_r>
 800612c:	4605      	mov	r5, r0
 800612e:	2800      	cmp	r0, #0
 8006130:	d0de      	beq.n	80060f0 <__submore+0x1a>
 8006132:	eb00 0806 	add.w	r8, r0, r6
 8006136:	4601      	mov	r1, r0
 8006138:	4632      	mov	r2, r6
 800613a:	4640      	mov	r0, r8
 800613c:	f000 f852 	bl	80061e4 <memcpy>
 8006140:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006144:	f8c4 8000 	str.w	r8, [r4]
 8006148:	e7e9      	b.n	800611e <__submore+0x48>

0800614a <memmove>:
 800614a:	4288      	cmp	r0, r1
 800614c:	b510      	push	{r4, lr}
 800614e:	eb01 0402 	add.w	r4, r1, r2
 8006152:	d902      	bls.n	800615a <memmove+0x10>
 8006154:	4284      	cmp	r4, r0
 8006156:	4623      	mov	r3, r4
 8006158:	d807      	bhi.n	800616a <memmove+0x20>
 800615a:	1e43      	subs	r3, r0, #1
 800615c:	42a1      	cmp	r1, r4
 800615e:	d008      	beq.n	8006172 <memmove+0x28>
 8006160:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006164:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006168:	e7f8      	b.n	800615c <memmove+0x12>
 800616a:	4402      	add	r2, r0
 800616c:	4601      	mov	r1, r0
 800616e:	428a      	cmp	r2, r1
 8006170:	d100      	bne.n	8006174 <memmove+0x2a>
 8006172:	bd10      	pop	{r4, pc}
 8006174:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006178:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800617c:	e7f7      	b.n	800616e <memmove+0x24>
	...

08006180 <_fstat_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d07      	ldr	r5, [pc, #28]	@ (80061a0 <_fstat_r+0x20>)
 8006184:	2300      	movs	r3, #0
 8006186:	4604      	mov	r4, r0
 8006188:	4608      	mov	r0, r1
 800618a:	4611      	mov	r1, r2
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	f7fb fa01 	bl	8001594 <_fstat>
 8006192:	1c43      	adds	r3, r0, #1
 8006194:	d102      	bne.n	800619c <_fstat_r+0x1c>
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	b103      	cbz	r3, 800619c <_fstat_r+0x1c>
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	bd38      	pop	{r3, r4, r5, pc}
 800619e:	bf00      	nop
 80061a0:	20000438 	.word	0x20000438

080061a4 <_isatty_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4d06      	ldr	r5, [pc, #24]	@ (80061c0 <_isatty_r+0x1c>)
 80061a8:	2300      	movs	r3, #0
 80061aa:	4604      	mov	r4, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	f7fb fa00 	bl	80015b4 <_isatty>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_isatty_r+0x1a>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_isatty_r+0x1a>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	20000438 	.word	0x20000438

080061c4 <_sbrk_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d06      	ldr	r5, [pc, #24]	@ (80061e0 <_sbrk_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fb fa08 	bl	80015e4 <_sbrk>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_sbrk_r+0x1a>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_sbrk_r+0x1a>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000438 	.word	0x20000438

080061e4 <memcpy>:
 80061e4:	440a      	add	r2, r1
 80061e6:	4291      	cmp	r1, r2
 80061e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061ec:	d100      	bne.n	80061f0 <memcpy+0xc>
 80061ee:	4770      	bx	lr
 80061f0:	b510      	push	{r4, lr}
 80061f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fa:	4291      	cmp	r1, r2
 80061fc:	d1f9      	bne.n	80061f2 <memcpy+0xe>
 80061fe:	bd10      	pop	{r4, pc}

08006200 <_realloc_r>:
 8006200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006204:	4680      	mov	r8, r0
 8006206:	4615      	mov	r5, r2
 8006208:	460c      	mov	r4, r1
 800620a:	b921      	cbnz	r1, 8006216 <_realloc_r+0x16>
 800620c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	4611      	mov	r1, r2
 8006212:	f7fe be4b 	b.w	8004eac <_malloc_r>
 8006216:	b92a      	cbnz	r2, 8006224 <_realloc_r+0x24>
 8006218:	f7fe fddc 	bl	8004dd4 <_free_r>
 800621c:	2400      	movs	r4, #0
 800621e:	4620      	mov	r0, r4
 8006220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006224:	f000 f906 	bl	8006434 <_malloc_usable_size_r>
 8006228:	4285      	cmp	r5, r0
 800622a:	4606      	mov	r6, r0
 800622c:	d802      	bhi.n	8006234 <_realloc_r+0x34>
 800622e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006232:	d8f4      	bhi.n	800621e <_realloc_r+0x1e>
 8006234:	4629      	mov	r1, r5
 8006236:	4640      	mov	r0, r8
 8006238:	f7fe fe38 	bl	8004eac <_malloc_r>
 800623c:	4607      	mov	r7, r0
 800623e:	2800      	cmp	r0, #0
 8006240:	d0ec      	beq.n	800621c <_realloc_r+0x1c>
 8006242:	42b5      	cmp	r5, r6
 8006244:	462a      	mov	r2, r5
 8006246:	4621      	mov	r1, r4
 8006248:	bf28      	it	cs
 800624a:	4632      	movcs	r2, r6
 800624c:	f7ff ffca 	bl	80061e4 <memcpy>
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f7fe fdbe 	bl	8004dd4 <_free_r>
 8006258:	463c      	mov	r4, r7
 800625a:	e7e0      	b.n	800621e <_realloc_r+0x1e>

0800625c <_strtol_l.constprop.0>:
 800625c:	2b24      	cmp	r3, #36	@ 0x24
 800625e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006262:	4686      	mov	lr, r0
 8006264:	4690      	mov	r8, r2
 8006266:	d801      	bhi.n	800626c <_strtol_l.constprop.0+0x10>
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <_strtol_l.constprop.0+0x1e>
 800626c:	f7fe fd84 	bl	8004d78 <__errno>
 8006270:	2316      	movs	r3, #22
 8006272:	6003      	str	r3, [r0, #0]
 8006274:	2000      	movs	r0, #0
 8006276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627a:	4834      	ldr	r0, [pc, #208]	@ (800634c <_strtol_l.constprop.0+0xf0>)
 800627c:	460d      	mov	r5, r1
 800627e:	462a      	mov	r2, r5
 8006280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006284:	5d06      	ldrb	r6, [r0, r4]
 8006286:	f016 0608 	ands.w	r6, r6, #8
 800628a:	d1f8      	bne.n	800627e <_strtol_l.constprop.0+0x22>
 800628c:	2c2d      	cmp	r4, #45	@ 0x2d
 800628e:	d12d      	bne.n	80062ec <_strtol_l.constprop.0+0x90>
 8006290:	782c      	ldrb	r4, [r5, #0]
 8006292:	2601      	movs	r6, #1
 8006294:	1c95      	adds	r5, r2, #2
 8006296:	f033 0210 	bics.w	r2, r3, #16
 800629a:	d109      	bne.n	80062b0 <_strtol_l.constprop.0+0x54>
 800629c:	2c30      	cmp	r4, #48	@ 0x30
 800629e:	d12a      	bne.n	80062f6 <_strtol_l.constprop.0+0x9a>
 80062a0:	782a      	ldrb	r2, [r5, #0]
 80062a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80062a6:	2a58      	cmp	r2, #88	@ 0x58
 80062a8:	d125      	bne.n	80062f6 <_strtol_l.constprop.0+0x9a>
 80062aa:	786c      	ldrb	r4, [r5, #1]
 80062ac:	2310      	movs	r3, #16
 80062ae:	3502      	adds	r5, #2
 80062b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80062b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062b8:	2200      	movs	r2, #0
 80062ba:	fbbc f9f3 	udiv	r9, ip, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80062c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80062c8:	2f09      	cmp	r7, #9
 80062ca:	d81b      	bhi.n	8006304 <_strtol_l.constprop.0+0xa8>
 80062cc:	463c      	mov	r4, r7
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	dd27      	ble.n	8006322 <_strtol_l.constprop.0+0xc6>
 80062d2:	1c57      	adds	r7, r2, #1
 80062d4:	d007      	beq.n	80062e6 <_strtol_l.constprop.0+0x8a>
 80062d6:	4581      	cmp	r9, r0
 80062d8:	d320      	bcc.n	800631c <_strtol_l.constprop.0+0xc0>
 80062da:	d101      	bne.n	80062e0 <_strtol_l.constprop.0+0x84>
 80062dc:	45a2      	cmp	sl, r4
 80062de:	db1d      	blt.n	800631c <_strtol_l.constprop.0+0xc0>
 80062e0:	fb00 4003 	mla	r0, r0, r3, r4
 80062e4:	2201      	movs	r2, #1
 80062e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062ea:	e7eb      	b.n	80062c4 <_strtol_l.constprop.0+0x68>
 80062ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80062ee:	bf04      	itt	eq
 80062f0:	782c      	ldrbeq	r4, [r5, #0]
 80062f2:	1c95      	addeq	r5, r2, #2
 80062f4:	e7cf      	b.n	8006296 <_strtol_l.constprop.0+0x3a>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1da      	bne.n	80062b0 <_strtol_l.constprop.0+0x54>
 80062fa:	2c30      	cmp	r4, #48	@ 0x30
 80062fc:	bf0c      	ite	eq
 80062fe:	2308      	moveq	r3, #8
 8006300:	230a      	movne	r3, #10
 8006302:	e7d5      	b.n	80062b0 <_strtol_l.constprop.0+0x54>
 8006304:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006308:	2f19      	cmp	r7, #25
 800630a:	d801      	bhi.n	8006310 <_strtol_l.constprop.0+0xb4>
 800630c:	3c37      	subs	r4, #55	@ 0x37
 800630e:	e7de      	b.n	80062ce <_strtol_l.constprop.0+0x72>
 8006310:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006314:	2f19      	cmp	r7, #25
 8006316:	d804      	bhi.n	8006322 <_strtol_l.constprop.0+0xc6>
 8006318:	3c57      	subs	r4, #87	@ 0x57
 800631a:	e7d8      	b.n	80062ce <_strtol_l.constprop.0+0x72>
 800631c:	f04f 32ff 	mov.w	r2, #4294967295
 8006320:	e7e1      	b.n	80062e6 <_strtol_l.constprop.0+0x8a>
 8006322:	1c53      	adds	r3, r2, #1
 8006324:	d108      	bne.n	8006338 <_strtol_l.constprop.0+0xdc>
 8006326:	2322      	movs	r3, #34	@ 0x22
 8006328:	f8ce 3000 	str.w	r3, [lr]
 800632c:	4660      	mov	r0, ip
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	d0a0      	beq.n	8006276 <_strtol_l.constprop.0+0x1a>
 8006334:	1e69      	subs	r1, r5, #1
 8006336:	e006      	b.n	8006346 <_strtol_l.constprop.0+0xea>
 8006338:	b106      	cbz	r6, 800633c <_strtol_l.constprop.0+0xe0>
 800633a:	4240      	negs	r0, r0
 800633c:	f1b8 0f00 	cmp.w	r8, #0
 8006340:	d099      	beq.n	8006276 <_strtol_l.constprop.0+0x1a>
 8006342:	2a00      	cmp	r2, #0
 8006344:	d1f6      	bne.n	8006334 <_strtol_l.constprop.0+0xd8>
 8006346:	f8c8 1000 	str.w	r1, [r8]
 800634a:	e794      	b.n	8006276 <_strtol_l.constprop.0+0x1a>
 800634c:	0800680b 	.word	0x0800680b

08006350 <_strtol_r>:
 8006350:	f7ff bf84 	b.w	800625c <_strtol_l.constprop.0>

08006354 <_strtoul_l.constprop.0>:
 8006354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006358:	4e34      	ldr	r6, [pc, #208]	@ (800642c <_strtoul_l.constprop.0+0xd8>)
 800635a:	4686      	mov	lr, r0
 800635c:	460d      	mov	r5, r1
 800635e:	4628      	mov	r0, r5
 8006360:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006364:	5d37      	ldrb	r7, [r6, r4]
 8006366:	f017 0708 	ands.w	r7, r7, #8
 800636a:	d1f8      	bne.n	800635e <_strtoul_l.constprop.0+0xa>
 800636c:	2c2d      	cmp	r4, #45	@ 0x2d
 800636e:	d12f      	bne.n	80063d0 <_strtoul_l.constprop.0+0x7c>
 8006370:	782c      	ldrb	r4, [r5, #0]
 8006372:	2701      	movs	r7, #1
 8006374:	1c85      	adds	r5, r0, #2
 8006376:	f033 0010 	bics.w	r0, r3, #16
 800637a:	d109      	bne.n	8006390 <_strtoul_l.constprop.0+0x3c>
 800637c:	2c30      	cmp	r4, #48	@ 0x30
 800637e:	d12c      	bne.n	80063da <_strtoul_l.constprop.0+0x86>
 8006380:	7828      	ldrb	r0, [r5, #0]
 8006382:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006386:	2858      	cmp	r0, #88	@ 0x58
 8006388:	d127      	bne.n	80063da <_strtoul_l.constprop.0+0x86>
 800638a:	786c      	ldrb	r4, [r5, #1]
 800638c:	2310      	movs	r3, #16
 800638e:	3502      	adds	r5, #2
 8006390:	f04f 38ff 	mov.w	r8, #4294967295
 8006394:	2600      	movs	r6, #0
 8006396:	fbb8 f8f3 	udiv	r8, r8, r3
 800639a:	fb03 f908 	mul.w	r9, r3, r8
 800639e:	ea6f 0909 	mvn.w	r9, r9
 80063a2:	4630      	mov	r0, r6
 80063a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80063a8:	f1bc 0f09 	cmp.w	ip, #9
 80063ac:	d81c      	bhi.n	80063e8 <_strtoul_l.constprop.0+0x94>
 80063ae:	4664      	mov	r4, ip
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	dd2a      	ble.n	800640a <_strtoul_l.constprop.0+0xb6>
 80063b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80063b8:	d007      	beq.n	80063ca <_strtoul_l.constprop.0+0x76>
 80063ba:	4580      	cmp	r8, r0
 80063bc:	d322      	bcc.n	8006404 <_strtoul_l.constprop.0+0xb0>
 80063be:	d101      	bne.n	80063c4 <_strtoul_l.constprop.0+0x70>
 80063c0:	45a1      	cmp	r9, r4
 80063c2:	db1f      	blt.n	8006404 <_strtoul_l.constprop.0+0xb0>
 80063c4:	fb00 4003 	mla	r0, r0, r3, r4
 80063c8:	2601      	movs	r6, #1
 80063ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063ce:	e7e9      	b.n	80063a4 <_strtoul_l.constprop.0+0x50>
 80063d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80063d2:	bf04      	itt	eq
 80063d4:	782c      	ldrbeq	r4, [r5, #0]
 80063d6:	1c85      	addeq	r5, r0, #2
 80063d8:	e7cd      	b.n	8006376 <_strtoul_l.constprop.0+0x22>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1d8      	bne.n	8006390 <_strtoul_l.constprop.0+0x3c>
 80063de:	2c30      	cmp	r4, #48	@ 0x30
 80063e0:	bf0c      	ite	eq
 80063e2:	2308      	moveq	r3, #8
 80063e4:	230a      	movne	r3, #10
 80063e6:	e7d3      	b.n	8006390 <_strtoul_l.constprop.0+0x3c>
 80063e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80063ec:	f1bc 0f19 	cmp.w	ip, #25
 80063f0:	d801      	bhi.n	80063f6 <_strtoul_l.constprop.0+0xa2>
 80063f2:	3c37      	subs	r4, #55	@ 0x37
 80063f4:	e7dc      	b.n	80063b0 <_strtoul_l.constprop.0+0x5c>
 80063f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80063fa:	f1bc 0f19 	cmp.w	ip, #25
 80063fe:	d804      	bhi.n	800640a <_strtoul_l.constprop.0+0xb6>
 8006400:	3c57      	subs	r4, #87	@ 0x57
 8006402:	e7d5      	b.n	80063b0 <_strtoul_l.constprop.0+0x5c>
 8006404:	f04f 36ff 	mov.w	r6, #4294967295
 8006408:	e7df      	b.n	80063ca <_strtoul_l.constprop.0+0x76>
 800640a:	1c73      	adds	r3, r6, #1
 800640c:	d106      	bne.n	800641c <_strtoul_l.constprop.0+0xc8>
 800640e:	2322      	movs	r3, #34	@ 0x22
 8006410:	f8ce 3000 	str.w	r3, [lr]
 8006414:	4630      	mov	r0, r6
 8006416:	b932      	cbnz	r2, 8006426 <_strtoul_l.constprop.0+0xd2>
 8006418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800641c:	b107      	cbz	r7, 8006420 <_strtoul_l.constprop.0+0xcc>
 800641e:	4240      	negs	r0, r0
 8006420:	2a00      	cmp	r2, #0
 8006422:	d0f9      	beq.n	8006418 <_strtoul_l.constprop.0+0xc4>
 8006424:	b106      	cbz	r6, 8006428 <_strtoul_l.constprop.0+0xd4>
 8006426:	1e69      	subs	r1, r5, #1
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	e7f5      	b.n	8006418 <_strtoul_l.constprop.0+0xc4>
 800642c:	0800680b 	.word	0x0800680b

08006430 <_strtoul_r>:
 8006430:	f7ff bf90 	b.w	8006354 <_strtoul_l.constprop.0>

08006434 <_malloc_usable_size_r>:
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f18      	subs	r0, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfbc      	itt	lt
 800643e:	580b      	ldrlt	r3, [r1, r0]
 8006440:	18c0      	addlt	r0, r0, r3
 8006442:	4770      	bx	lr

08006444 <_init>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr

08006450 <_fini>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr
