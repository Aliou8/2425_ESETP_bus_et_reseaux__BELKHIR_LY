
TP_BELKHIR_LY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000494c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00005d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00005d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00005d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004d10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000007c  08004d8c  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004d8c  00006314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de71  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002647  00000000  00000000  00013f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00016568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b8  00000000  00000000  00017210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000405a  00000000  00000000  00017bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fc3  00000000  00000000  0001bc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf4a6  00000000  00000000  0002dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd08b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  000fd0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00100bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b04 	.word	0x08004b04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08004b04 	.word	0x08004b04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BMP280_RegisterWrite>:
static uint8_t BMP280_REG_PRESSURE = 0xF7;

static uint8_t calibData[BMP280_CALIB_DAATA_LEN];
static uint32_t t_fine ;

int BMP280_RegisterWrite(uint8_t reg, uint8_t data) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	733b      	strb	r3, [r7, #12]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	737b      	strb	r3, [r7, #13]
    if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY)) {
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <BMP280_RegisterWrite+0x44>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2302      	movs	r3, #2
 80005ca:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <BMP280_RegisterWrite+0x48>)
 80005cc:	f001 fa12 	bl	80019f4 <HAL_I2C_Master_Transmit>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <BMP280_RegisterWrite+0x3a>
        return 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <BMP280_RegisterWrite+0x3c>
    }
    return 1;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	200000d8 	.word	0x200000d8

080005ec <BMP280_RegisterRead>:

int BMP280_RegisterRead(uint8_t reg, uint8_t *data) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
    if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, &reg, 1, HAL_MAX_DELAY)) {
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <BMP280_RegisterRead+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	1dfa      	adds	r2, r7, #7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <BMP280_RegisterRead+0x5c>)
 800060a:	f001 f9f3 	bl	80019f4 <HAL_I2C_Master_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <BMP280_RegisterRead+0x2c>
        return 1;
 8000614:	2301      	movs	r3, #1
 8000616:	e010      	b.n	800063a <BMP280_RegisterRead+0x4e>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, sizeof(data), HAL_MAX_DELAY)) {
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <BMP280_RegisterRead+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2304      	movs	r3, #4
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <BMP280_RegisterRead+0x5c>)
 800062a:	f001 fae1 	bl	8001bf0 <HAL_I2C_Master_Receive>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <BMP280_RegisterRead+0x4c>
        return 1;
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <BMP280_RegisterRead+0x4e>
    }
    return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
 8000648:	200000d8 	.word	0x200000d8

0800064c <BMP280_Init>:

void BMP280_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
    uint8_t ConfigValue = 0x57;
 8000652:	2357      	movs	r3, #87	@ 0x57
 8000654:	71fb      	strb	r3, [r7, #7]
    if (1 == BMP280_RegisterWrite(BMP280_REG_CONFIG, ConfigValue)) {
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <BMP280_Init+0x34>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff9e 	bl	80005a0 <BMP280_RegisterWrite>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d103      	bne.n	8000672 <BMP280_Init+0x26>
        printf("Erreur pendant l'écriture de la configuration \r\n");
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <BMP280_Init+0x38>)
 800066c:	f003 fbe6 	bl	8003e3c <puts>
        return;  // Quitter la fonction après une erreur
 8000670:	e002      	b.n	8000678 <BMP280_Init+0x2c>
    }
    printf("Configuration OK \r\n");
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <BMP280_Init+0x3c>)
 8000674:	f003 fbe2 	bl	8003e3c <puts>
}
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000003 	.word	0x20000003
 8000684:	08004b1c 	.word	0x08004b1c
 8000688:	08004b50 	.word	0x08004b50

0800068c <BMP280_ReadID>:

void BMP280_ReadID(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
    uint8_t idValue;
    if (1 == BMP280_RegisterRead(BMP280_REG_ID, &idValue)) {
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <BMP280_ReadID+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	1dfa      	adds	r2, r7, #7
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffa6 	bl	80005ec <BMP280_RegisterRead>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d103      	bne.n	80006ae <BMP280_ReadID+0x22>
        printf("Problème de lecture du registre ID \r\n");
 80006a6:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <BMP280_ReadID+0x48>)
 80006a8:	f003 fbc8 	bl	8003e3c <puts>
        return;  // Quitter la fonction après une erreur
 80006ac:	e00d      	b.n	80006ca <BMP280_ReadID+0x3e>
    }
    if (BMP280_ID_Value != idValue) {
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <BMP280_ReadID+0x4c>)
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d003      	beq.n	80006c0 <BMP280_ReadID+0x34>
        printf("La valeur du registre ID n'est pas bonne \r\n");
 80006b8:	4808      	ldr	r0, [pc, #32]	@ (80006dc <BMP280_ReadID+0x50>)
 80006ba:	f003 fbbf 	bl	8003e3c <puts>
        return;  // Quitter la fonction si la valeur n'est pas correcte
 80006be:	e004      	b.n	80006ca <BMP280_ReadID+0x3e>
    }
    printf("La valeur lue est : %u\r\n", idValue);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <BMP280_ReadID+0x54>)
 80006c6:	f003 fb51 	bl	8003d6c <iprintf>
}
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000001 	.word	0x20000001
 80006d4:	08004b64 	.word	0x08004b64
 80006d8:	20000002 	.word	0x20000002
 80006dc:	08004b8c 	.word	0x08004b8c
 80006e0:	08004bb8 	.word	0x08004bb8

080006e4 <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
    if (1 == BMP280_RegisterRead(BMP280_REG_CALIB_DATA, calibData)) {
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <BMP280_ReadCalibrationData+0x50>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4912      	ldr	r1, [pc, #72]	@ (8000738 <BMP280_ReadCalibrationData+0x54>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff7b 	bl	80005ec <BMP280_RegisterRead>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d103      	bne.n	8000704 <BMP280_ReadCalibrationData+0x20>
        printf("La lecture de calibration a échoué \r\n");
 80006fc:	480f      	ldr	r0, [pc, #60]	@ (800073c <BMP280_ReadCalibrationData+0x58>)
 80006fe:	f003 fb9d 	bl	8003e3c <puts>
        return;  // Quitter la fonction après une erreur
 8000702:	e014      	b.n	800072e <BMP280_ReadCalibrationData+0x4a>
    }

    printf("Lecture des données de calibration OK \r\n");
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <BMP280_ReadCalibrationData+0x5c>)
 8000706:	f003 fb99 	bl	8003e3c <puts>
    for (int i = 0; i < BMP280_CALIB_DAATA_LEN; i++) {
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e00b      	b.n	8000728 <BMP280_ReadCalibrationData+0x44>
        printf("La valeur lue %d est 0x%X \r\n", i, calibData[i]);
 8000710:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <BMP280_ReadCalibrationData+0x54>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <BMP280_ReadCalibrationData+0x60>)
 800071e:	f003 fb25 	bl	8003d6c <iprintf>
    for (int i = 0; i < BMP280_CALIB_DAATA_LEN; i++) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b17      	cmp	r3, #23
 800072c:	ddf0      	ble.n	8000710 <BMP280_ReadCalibrationData+0x2c>
    }
}
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000004 	.word	0x20000004
 8000738:	20000098 	.word	0x20000098
 800073c:	08004bd4 	.word	0x08004bd4
 8000740:	08004bfc 	.word	0x08004bfc
 8000744:	08004c28 	.word	0x08004c28

08000748 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800074e:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <MX_CAN1_Init+0x64>)
 8000750:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000754:	2210      	movs	r2, #16
 8000756:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800077e:	2200      	movs	r2, #0
 8000780:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000784:	2200      	movs	r2, #0
 8000786:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000796:	f000 fc73 	bl	8001080 <HAL_CAN_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f9ca 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000b0 	.word	0x200000b0
 80007ac:	40006400 	.word	0x40006400

080007b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	@ (8000834 <HAL_CAN_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12c      	bne.n	800082c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <HAL_CAN_MspInit+0x88>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_CAN_MspInit+0x88>)
 80007dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_CAN_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <HAL_CAN_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <HAL_CAN_MspInit+0x88>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <HAL_CAN_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800080a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800081c:	2309      	movs	r3, #9
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <HAL_CAN_MspInit+0x8c>)
 8000828:	f000 fe0c 	bl	8001444 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40006400 	.word	0x40006400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <MX_GPIO_Init+0x84>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a1d      	ldr	r2, [pc, #116]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <MX_GPIO_Init+0x84>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <MX_GPIO_Init+0x84>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <MX_GPIO_Init+0x84>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_GPIO_Init+0x84>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	@ (800091c <MX_I2C1_Init+0x54>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008d4:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x58>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_I2C1_Init+0x50>)
 8000906:	f000 ff31 	bl	800176c <HAL_I2C_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000910:	f000 f912 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000d8 	.word	0x200000d8
 800091c:	40005400 	.word	0x40005400
 8000920:	000186a0 	.word	0x000186a0

08000924 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <HAL_I2C_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12c      	bne.n	80009a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <HAL_I2C_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a17      	ldr	r2, [pc, #92]	@ (80009ac <HAL_I2C_MspInit+0x88>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_I2C_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000962:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000974:	2304      	movs	r3, #4
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <HAL_I2C_MspInit+0x8c>)
 8000980:	f000 fd60 	bl	8001444 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_I2C_MspInit+0x88>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <HAL_I2C_MspInit+0x88>)
 800098e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000992:	6413      	str	r3, [r2, #64]	@ 0x40
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_I2C_MspInit+0x88>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400

080009b4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart3, (uint8_t*)&chr,1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);
 80009bc:	1d39      	adds	r1, r7, #4
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	2201      	movs	r2, #1
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <__io_putchar+0x20>)
 80009c6:	f002 fd53 	bl	8003470 <HAL_UART_Transmit>
	return chr;
 80009ca:	687b      	ldr	r3, [r7, #4]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000134 	.word	0x20000134

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 faba 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f838 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff ff2c 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 f9b8 	bl	8000d5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009ec:	f7ff ff6c 	bl	80008c8 <MX_I2C1_Init>
  MX_CAN1_Init();
 80009f0:	f7ff feaa 	bl	8000748 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80009f4:	f000 f9dc 	bl	8000db0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("=============TP BUS & RESEAUX ===========\r\n") ;
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <main+0x64>)
 80009fa:	f003 fa1f 	bl	8003e3c <puts>
	BMP280_Init() ;
 80009fe:	f7ff fe25 	bl	800064c <BMP280_Init>
	BMP280_ReadID() ;
 8000a02:	f7ff fe43 	bl	800068c <BMP280_ReadID>
	BMP280_ReadCalibrationData();
 8000a06:	f7ff fe6d 	bl	80006e4 <BMP280_ReadCalibrationData>
	if(BMP280_RegisterRead(BMP280_REG , &idValue)==0)
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <main+0x68>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <main+0x6c>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fdeb 	bl	80005ec <BMP280_RegisterRead>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d105      	bne.n	8000a28 <main+0x50>
	{
		printf("la valeur de Config est 0x%X\r\n",idValue);
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <main+0x6c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <main+0x70>)
 8000a24:	f003 f9a2 	bl	8003d6c <iprintf>
		//printf("La temperature est : %lu\r\n", Temperature) ;
		//printf("La pression est : %lu\r\n", Pression) ;
		//HAL_Delay(1000);
		//HAL_UART_Receive(&huart3, (uint8_t*)&c,sizeof(c), HAL_MAX_DELAY);
		//HAL_Delay(1000) ;
		printf("\r\n La valeur recue est : %s \r\n",c) ;
 8000a28:	4908      	ldr	r1, [pc, #32]	@ (8000a4c <main+0x74>)
 8000a2a:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <main+0x78>)
 8000a2c:	f003 f99e 	bl	8003d6c <iprintf>
		HAL_Delay(1000) ;
 8000a30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a34:	f000 fb00 	bl	8001038 <HAL_Delay>
		printf("\r\n La valeur recue est : %s \r\n",c) ;
 8000a38:	bf00      	nop
 8000a3a:	e7f5      	b.n	8000a28 <main+0x50>
 8000a3c:	08004c48 	.word	0x08004c48
 8000a40:	20000005 	.word	0x20000005
 8000a44:	2000012c 	.word	0x2000012c
 8000a48:	08004c74 	.word	0x08004c74
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	08004c94 	.word	0x08004c94

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	@ 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2234      	movs	r2, #52	@ 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 faca 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <SystemClock_Config+0xdc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a2b      	ldr	r2, [pc, #172]	@ (8000b30 <SystemClock_Config+0xdc>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <SystemClock_Config+0xdc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <SystemClock_Config+0xe0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a25      	ldr	r2, [pc, #148]	@ (8000b34 <SystemClock_Config+0xe0>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <SystemClock_Config+0xe0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ac8:	23b4      	movs	r3, #180	@ 0xb4
 8000aca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 f9d9 	bl	8002e94 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ae8:	f000 f826 	bl	8000b38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aec:	f001 fe38 	bl	8002760 <HAL_PWREx_EnableOverDrive>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000af6:	f000 f81f 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2105      	movs	r1, #5
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fe71 	bl	8002800 <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b24:	f000 f808 	bl	8000b38 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	@ 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fc2a 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <NMI_Handler+0x4>

08000b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <MemManage_Handler+0x4>

08000bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 fa05 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e00a      	b.n	8000c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c04:	f3af 8000 	nop.w
 8000c08:	4601      	mov	r1, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	b2ca      	uxtb	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbf0      	blt.n	8000c04 <_read+0x12>
  }

  return len;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e009      	b.n	8000c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff feb4 	bl	80009b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbf1      	blt.n	8000c3e <_write+0x12>
  }
  return len;
 8000c5a:	687b      	ldr	r3, [r7, #4]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_close>:

int _close(int file)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_isatty>:

int _isatty(int file)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f003 f9cc 	bl	8004098 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20020000 	.word	0x20020000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000130 	.word	0x20000130
 8000d34:	20000318 	.word	0x20000318

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <MX_USART2_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d94:	f002 fb1c 	bl	80033d0 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f7ff fecb 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000134 	.word	0x20000134
 8000dac:	40004400 	.word	0x40004400

08000db0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <MX_USART3_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_USART3_UART_Init+0x4c>)
 8000de8:	f002 faf2 	bl	80033d0 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f7ff fea1 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000017c 	.word	0x2000017c
 8000e00:	40004800 	.word	0x40004800

08000e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	@ 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_UART_MspInit+0xe8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12c      	bne.n	8000e80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a30      	ldr	r2, [pc, #192]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a29      	ldr	r2, [pc, #164]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	481e      	ldr	r0, [pc, #120]	@ (8000ef4 <HAL_UART_MspInit+0xf0>)
 8000e7a:	f000 fae3 	bl	8001444 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e7e:	e031      	b.n	8000ee4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <HAL_UART_MspInit+0xf4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12c      	bne.n	8000ee4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_UART_MspInit+0xec>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ec2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <HAL_UART_MspInit+0xf8>)
 8000ee0:	f000 fab0 	bl	8001444 <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	@ 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40004800 	.word	0x40004800
 8000efc:	40020800 	.word	0x40020800

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f04:	f7ff ff18 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	@ (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	@ (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 f8b9 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fd51 	bl	80009d8 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f44:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8000f48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f4c:	20000314 	.word	0x20000314

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 fa2d 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fddc 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fa37 	bl	800142a <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 fa0d 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000014 	.word	0x20000014
 8000ff0:	2000001c 	.word	0x2000001c
 8000ff4:	20000018 	.word	0x20000018

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2000001c 	.word	0x2000001c
 800101c:	200001c4 	.word	0x200001c4

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001c4 	.word	0x200001c4

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000001c 	.word	0x2000001c

08001080 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e0ed      	b.n	800126e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fb86 	bl	80007b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b4:	f7ff ffb4 	bl	8001020 <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ba:	e012      	b.n	80010e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010bc:	f7ff ffb0 	bl	8001020 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b0a      	cmp	r3, #10
 80010c8:	d90b      	bls.n	80010e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2205      	movs	r2, #5
 80010da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0c5      	b.n	800126e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0e5      	beq.n	80010bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0202 	bic.w	r2, r2, #2
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001100:	f7ff ff8e 	bl	8001020 <HAL_GetTick>
 8001104:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001106:	e012      	b.n	800112e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001108:	f7ff ff8a 	bl	8001020 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d90b      	bls.n	800112e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2205      	movs	r2, #5
 8001126:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e09f      	b.n	800126e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e5      	bne.n	8001108 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e1b      	ldrb	r3, [r3, #24]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7e5b      	ldrb	r3, [r3, #25]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e007      	b.n	8001190 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800118e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7e9b      	ldrb	r3, [r3, #26]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0220 	orr.w	r2, r2, #32
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0220 	bic.w	r2, r2, #32
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7edb      	ldrb	r3, [r3, #27]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0210 	bic.w	r2, r2, #16
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0210 	orr.w	r2, r2, #16
 80011e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7f1b      	ldrb	r3, [r3, #28]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0208 	orr.w	r2, r2, #8
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e007      	b.n	800120e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0208 	bic.w	r2, r2, #8
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7f5b      	ldrb	r3, [r3, #29]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d108      	bne.n	8001228 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0204 	orr.w	r2, r2, #4
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e007      	b.n	8001238 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0204 	bic.w	r2, r2, #4
 8001236:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	ea42 0103 	orr.w	r1, r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff47 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5c 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb0 	bl	8001398 <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e165      	b.n	800172c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8154 	bne.w	8001726 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d005      	beq.n	8001496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	2b02      	cmp	r3, #2
 8001494:	d130      	bne.n	80014f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 0201 	and.w	r2, r3, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b03      	cmp	r3, #3
 8001502:	d017      	beq.n	8001534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80ae 	beq.w	8001726 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015da:	4b5a      	ldr	r3, [pc, #360]	@ (8001744 <HAL_GPIO_Init+0x300>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <HAL_GPIO_Init+0x304>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4f      	ldr	r2, [pc, #316]	@ (800174c <HAL_GPIO_Init+0x308>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d025      	beq.n	800165e <HAL_GPIO_Init+0x21a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4e      	ldr	r2, [pc, #312]	@ (8001750 <HAL_GPIO_Init+0x30c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01f      	beq.n	800165a <HAL_GPIO_Init+0x216>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4d      	ldr	r2, [pc, #308]	@ (8001754 <HAL_GPIO_Init+0x310>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x212>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4c      	ldr	r2, [pc, #304]	@ (8001758 <HAL_GPIO_Init+0x314>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4b      	ldr	r2, [pc, #300]	@ (800175c <HAL_GPIO_Init+0x318>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x20a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4a      	ldr	r2, [pc, #296]	@ (8001760 <HAL_GPIO_Init+0x31c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x206>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a49      	ldr	r2, [pc, #292]	@ (8001764 <HAL_GPIO_Init+0x320>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x202>
 8001642:	2306      	movs	r3, #6
 8001644:	e00c      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001646:	2307      	movs	r3, #7
 8001648:	e00a      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800164a:	2305      	movs	r3, #5
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800164e:	2304      	movs	r3, #4
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800165e:	2300      	movs	r3, #0
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	@ (8001748 <HAL_GPIO_Init+0x304>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a2:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <HAL_GPIO_Init+0x324>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <HAL_GPIO_Init+0x324>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016cc:	4a26      	ldr	r2, [pc, #152]	@ (8001768 <HAL_GPIO_Init+0x324>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d2:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_GPIO_Init+0x324>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001768 <HAL_GPIO_Init+0x324>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_GPIO_Init+0x324>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001720:	4a11      	ldr	r2, [pc, #68]	@ (8001768 <HAL_GPIO_Init+0x324>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	f67f ae96 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021000 	.word	0x40021000
 8001760:	40021400 	.word	0x40021400
 8001764:	40021800 	.word	0x40021800
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e12b      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff f8c6 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	@ 0x24
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d0:	f001 f908 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a81      	ldr	r2, [pc, #516]	@ (80019e0 <HAL_I2C_Init+0x274>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d807      	bhi.n	80017f0 <HAL_I2C_Init+0x84>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a80      	ldr	r2, [pc, #512]	@ (80019e4 <HAL_I2C_Init+0x278>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x92>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a7d      	ldr	r2, [pc, #500]	@ (80019e8 <HAL_I2C_Init+0x27c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e7      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a78      	ldr	r2, [pc, #480]	@ (80019ec <HAL_I2C_Init+0x280>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a6a      	ldr	r2, [pc, #424]	@ (80019e0 <HAL_I2C_Init+0x274>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d802      	bhi.n	8001840 <HAL_I2C_Init+0xd4>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	e009      	b.n	8001854 <HAL_I2C_Init+0xe8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	4a69      	ldr	r2, [pc, #420]	@ (80019f0 <HAL_I2C_Init+0x284>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001866:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	495c      	ldr	r1, [pc, #368]	@ (80019e0 <HAL_I2C_Init+0x274>)
 8001870:	428b      	cmp	r3, r1
 8001872:	d819      	bhi.n	80018a8 <HAL_I2C_Init+0x13c>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e59      	subs	r1, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001888:	400b      	ands	r3, r1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_I2C_Init+0x138>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e59      	subs	r1, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fbb1 f3f3 	udiv	r3, r1, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a2:	e051      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e04f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <HAL_I2C_Init+0x168>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e012      	b.n	80018fa <HAL_I2C_Init+0x18e>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x196>
 80018fe:	2301      	movs	r3, #1
 8001900:	e022      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <HAL_I2C_Init+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e58      	subs	r0, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	440b      	add	r3, r1
 8001918:	fbb0 f3f3 	udiv	r3, r0, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001926:	e00f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	0099      	lsls	r1, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	6809      	ldr	r1, [r1, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6911      	ldr	r1, [r2, #16]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	000186a0 	.word	0x000186a0
 80019e4:	001e847f 	.word	0x001e847f
 80019e8:	003d08ff 	.word	0x003d08ff
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	460b      	mov	r3, r1
 8001a02:	817b      	strh	r3, [r7, #10]
 8001a04:	4613      	mov	r3, r2
 8001a06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff fb0a 	bl	8001020 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	f040 80e0 	bne.w	8001bdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2319      	movs	r3, #25
 8001a22:	2201      	movs	r2, #1
 8001a24:	4970      	ldr	r1, [pc, #448]	@ (8001be8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fc64 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a32:	2302      	movs	r3, #2
 8001a34:	e0d3      	b.n	8001bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x50>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e0cc      	b.n	8001bde <HAL_I2C_Master_Transmit+0x1ea>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d007      	beq.n	8001a6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2221      	movs	r2, #33	@ 0x21
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2210      	movs	r2, #16
 8001a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	893a      	ldrh	r2, [r7, #8]
 8001a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4a50      	ldr	r2, [pc, #320]	@ (8001bec <HAL_I2C_Master_Transmit+0x1f8>)
 8001aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aac:	8979      	ldrh	r1, [r7, #10]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 face 	bl	8002054 <I2C_MasterRequestWrite>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e08d      	b.n	8001bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ad8:	e066      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	6a39      	ldr	r1, [r7, #32]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fd22 	bl	8002528 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d107      	bne.n	8001b02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06b      	b.n	8001bde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d11b      	bne.n	8001b7c <HAL_I2C_Master_Transmit+0x188>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d017      	beq.n	8001b7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	6a39      	ldr	r1, [r7, #32]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fd19 	bl	80025b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d107      	bne.n	8001ba4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e01a      	b.n	8001bde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d194      	bne.n	8001ada <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	00100002 	.word	0x00100002
 8001bec:	ffff0000 	.word	0xffff0000

08001bf0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	817b      	strh	r3, [r7, #10]
 8001c00:	4613      	mov	r3, r2
 8001c02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff fa0c 	bl	8001020 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	f040 8217 	bne.w	8002046 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2319      	movs	r3, #25
 8001c1e:	2201      	movs	r2, #1
 8001c20:	497c      	ldr	r1, [pc, #496]	@ (8001e14 <HAL_I2C_Master_Receive+0x224>)
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fb66 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e20a      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_I2C_Master_Receive+0x50>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e203      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d007      	beq.n	8001c66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2222      	movs	r2, #34	@ 0x22
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2210      	movs	r2, #16
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	893a      	ldrh	r2, [r7, #8]
 8001c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	@ (8001e18 <HAL_I2C_Master_Receive+0x228>)
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fa52 	bl	8002158 <I2C_MasterRequestRead>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1c4      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d113      	bne.n	8001cee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e198      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d11b      	bne.n	8001d2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e178      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d11b      	bne.n	8001d6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	e158      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d94:	e144      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	f200 80f1 	bhi.w	8001f82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d123      	bne.n	8001df0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001daa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fc4b 	bl	8002648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e145      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dee:	e117      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d14e      	bne.n	8001e96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4906      	ldr	r1, [pc, #24]	@ (8001e1c <HAL_I2C_Master_Receive+0x22c>)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa76 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e11a      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
 8001e12:	bf00      	nop
 8001e14:	00100002 	.word	0x00100002
 8001e18:	ffff0000 	.word	0xffff0000
 8001e1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e94:	e0c4      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	496c      	ldr	r1, [pc, #432]	@ (8002050 <HAL_I2C_Master_Receive+0x460>)
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fa27 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0cb      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4955      	ldr	r1, [pc, #340]	@ (8002050 <HAL_I2C_Master_Receive+0x460>)
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f9f9 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e09d      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f80:	e04e      	b.n	8002020 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fb5e 	bl	8002648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e058      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d124      	bne.n	8002020 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d107      	bne.n	8001fee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	f47f aeb6 	bne.w	8001d96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	3728      	adds	r7, #40	@ 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	00010004 	.word	0x00010004

08002054 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d006      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d003      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800207c:	d108      	bne.n	8002090 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00b      	b.n	80020a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	2b12      	cmp	r3, #18
 8002096:	d107      	bne.n	80020a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f91d 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ce:	d103      	bne.n	80020d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e035      	b.n	8002148 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020e4:	d108      	bne.n	80020f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e01b      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	11db      	asrs	r3, r3, #7
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 0306 	and.w	r3, r3, #6
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f063 030f 	orn	r3, r3, #15
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	490e      	ldr	r1, [pc, #56]	@ (8002150 <I2C_MasterRequestWrite+0xfc>)
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f966 	bl	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e010      	b.n	8002148 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4907      	ldr	r1, [pc, #28]	@ (8002154 <I2C_MasterRequestWrite+0x100>)
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f956 	bl	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	00010008 	.word	0x00010008
 8002154:	00010002 	.word	0x00010002

08002158 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	460b      	mov	r3, r1
 8002166:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800217c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d006      	beq.n	8002192 <I2C_MasterRequestRead+0x3a>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d003      	beq.n	8002192 <I2C_MasterRequestRead+0x3a>
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002190:	d108      	bne.n	80021a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00b      	b.n	80021bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	2b11      	cmp	r3, #17
 80021aa:	d107      	bne.n	80021bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f893 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00d      	beq.n	80021f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021e2:	d103      	bne.n	80021ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e079      	b.n	80022e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021f8:	d108      	bne.n	800220c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021fa:	897b      	ldrh	r3, [r7, #10]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	611a      	str	r2, [r3, #16]
 800220a:	e05f      	b.n	80022cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800220c:	897b      	ldrh	r3, [r7, #10]
 800220e:	11db      	asrs	r3, r3, #7
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f003 0306 	and.w	r3, r3, #6
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f063 030f 	orn	r3, r3, #15
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4930      	ldr	r1, [pc, #192]	@ (80022ec <I2C_MasterRequestRead+0x194>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f8dc 	bl	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e054      	b.n	80022e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4929      	ldr	r1, [pc, #164]	@ (80022f0 <I2C_MasterRequestRead+0x198>)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f8cc 	bl	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e044      	b.n	80022e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800227e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f831 	bl	80022f4 <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a6:	d103      	bne.n	80022b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e017      	b.n	80022e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	11db      	asrs	r3, r3, #7
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0306 	and.w	r3, r3, #6
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f063 030e 	orn	r3, r3, #14
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4907      	ldr	r1, [pc, #28]	@ (80022f0 <I2C_MasterRequestRead+0x198>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f888 	bl	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	00010008 	.word	0x00010008
 80022f0:	00010002 	.word	0x00010002

080022f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002304:	e048      	b.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d044      	beq.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7fe fe87 	bl	8001020 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d139      	bne.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d10d      	bne.n	800234a <I2C_WaitOnFlagUntilTimeout+0x56>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	43da      	mvns	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4013      	ands	r3, r2
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	e00c      	b.n	8002364 <I2C_WaitOnFlagUntilTimeout+0x70>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	43da      	mvns	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4013      	ands	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	429a      	cmp	r2, r3
 8002368:	d116      	bne.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e023      	b.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d10d      	bne.n	80023be <I2C_WaitOnFlagUntilTimeout+0xca>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	43da      	mvns	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4013      	ands	r3, r2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	e00c      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d093      	beq.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f6:	e071      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002406:	d123      	bne.n	8002450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002416:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	f043 0204 	orr.w	r2, r3, #4
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e067      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d041      	beq.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe fde2 	bl	8001020 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d136      	bne.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10c      	bne.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4013      	ands	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e00b      	b.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e021      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	0c1b      	lsrs	r3, r3, #16
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10c      	bne.n	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e00b      	b.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4013      	ands	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f af6d 	bne.w	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002534:	e034      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8e3 	bl	8002702 <I2C_IsAcknowledgeFailed>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e034      	b.n	80025b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d028      	beq.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7fe fd67 	bl	8001020 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11d      	bne.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256e:	2b80      	cmp	r3, #128	@ 0x80
 8002570:	d016      	beq.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e007      	b.n	80025b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025aa:	2b80      	cmp	r3, #128	@ 0x80
 80025ac:	d1c3      	bne.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f89b 	bl	8002702 <I2C_IsAcknowledgeFailed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e034      	b.n	8002640 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d028      	beq.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7fe fd1f 	bl	8001020 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11d      	bne.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d016      	beq.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d1c3      	bne.n	80025c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002654:	e049      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b10      	cmp	r3, #16
 8002662:	d119      	bne.n	8002698 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0210 	mvn.w	r2, #16
 800266c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e030      	b.n	80026fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002698:	f7fe fcc2 	bl	8001020 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d302      	bcc.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11d      	bne.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d016      	beq.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e007      	b.n	80026fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b40      	cmp	r3, #64	@ 0x40
 80026f6:	d1ae      	bne.n	8002656 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002718:	d11b      	bne.n	8002752 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002722:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002786:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800278c:	f7fe fc48 	bl	8001020 <HAL_GetTick>
 8002790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002792:	e009      	b.n	80027a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002794:	f7fe fc44 	bl	8001020 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027a2:	d901      	bls.n	80027a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e01f      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b4:	d1ee      	bne.n	8002794 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027bc:	f7fe fc30 	bl	8001020 <HAL_GetTick>
 80027c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c2:	e009      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027c4:	f7fe fc2c 	bl	8001020 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027d2:	d901      	bls.n	80027d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e007      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027d8:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027e4:	d1ee      	bne.n	80027c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	420e0040 	.word	0x420e0040
 80027f8:	40007000 	.word	0x40007000
 80027fc:	420e0044 	.word	0x420e0044

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fb96 	bl	8001020 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fb92 	bl	8001020 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f855 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe faf6 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08004cb4 	.word	0x08004cb4
 80029c4:	20000014 	.word	0x20000014
 80029c8:	20000018 	.word	0x20000018

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000014 	.word	0x20000014

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	08004cc4 	.word	0x08004cc4

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff ffdc 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	@ (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	08004cc4 	.word	0x08004cc4

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b0ae      	sub	sp, #184	@ 0xb8
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5a:	4bcb      	ldr	r3, [pc, #812]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	f200 8206 	bhi.w	8002e74 <HAL_RCC_GetSysClockFreq+0x440>
 8002a68:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002aa5 	.word	0x08002aa5
 8002a74:	08002e75 	.word	0x08002e75
 8002a78:	08002e75 	.word	0x08002e75
 8002a7c:	08002e75 	.word	0x08002e75
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002e75 	.word	0x08002e75
 8002a88:	08002e75 	.word	0x08002e75
 8002a8c:	08002e75 	.word	0x08002e75
 8002a90:	08002ab5 	.word	0x08002ab5
 8002a94:	08002e75 	.word	0x08002e75
 8002a98:	08002e75 	.word	0x08002e75
 8002a9c:	08002e75 	.word	0x08002e75
 8002aa0:	08002ca5 	.word	0x08002ca5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4bb9      	ldr	r3, [pc, #740]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x358>)
 8002aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aaa:	e1e7      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aac:	4bb8      	ldr	r3, [pc, #736]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ab2:	e1e3      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab4:	4bb4      	ldr	r3, [pc, #720]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002abc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac0:	4bb1      	ldr	r3, [pc, #708]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d071      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002acc:	4bae      	ldr	r3, [pc, #696]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ad8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	1a51      	subs	r1, r2, r1
 8002b0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb63 0301 	sbc.w	r3, r3, r1
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b24:	4649      	mov	r1, r9
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2e:	4641      	mov	r1, r8
 8002b30:	018a      	lsls	r2, r1, #6
 8002b32:	4641      	mov	r1, r8
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b38:	4649      	mov	r1, r9
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	00cb      	lsls	r3, r1, #3
 8002b50:	4641      	mov	r1, r8
 8002b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b56:	4641      	mov	r1, r8
 8002b58:	00ca      	lsls	r2, r1, #3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4622      	mov	r2, r4
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b66:	462b      	mov	r3, r5
 8002b68:	460a      	mov	r2, r1
 8002b6a:	eb42 0303 	adc.w	r3, r2, r3
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	024b      	lsls	r3, r1, #9
 8002b80:	4621      	mov	r1, r4
 8002b82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b86:	4621      	mov	r1, r4
 8002b88:	024a      	lsls	r2, r1, #9
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ba0:	f7fd fb86 	bl	80002b0 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bae:	e067      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b75      	ldr	r3, [pc, #468]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bca:	2300      	movs	r3, #0
 8002bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be4:	0150      	lsls	r0, r2, #5
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4621      	mov	r1, r4
 8002bec:	1a51      	subs	r1, r2, r1
 8002bee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c04:	4649      	mov	r1, r9
 8002c06:	018b      	lsls	r3, r1, #6
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0e:	4641      	mov	r1, r8
 8002c10:	018a      	lsls	r2, r1, #6
 8002c12:	4641      	mov	r1, r8
 8002c14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c18:	4649      	mov	r1, r9
 8002c1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c32:	4692      	mov	sl, r2
 8002c34:	469b      	mov	fp, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb1a 0303 	adds.w	r3, sl, r3
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	462b      	mov	r3, r5
 8002c40:	eb4b 0303 	adc.w	r3, fp, r3
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c52:	4629      	mov	r1, r5
 8002c54:	028b      	lsls	r3, r1, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	028a      	lsls	r2, r1, #10
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c68:	2200      	movs	r2, #0
 8002c6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c72:	f7fd fb1d 	bl	80002b0 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c80:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ca2:	e0eb      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca4:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb0:	4b35      	ldr	r3, [pc, #212]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d06b      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbc:	4b32      	ldr	r3, [pc, #200]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cce:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cd8:	4622      	mov	r2, r4
 8002cda:	462b      	mov	r3, r5
 8002cdc:	f04f 0000 	mov.w	r0, #0
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	0159      	lsls	r1, r3, #5
 8002ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cea:	0150      	lsls	r0, r2, #5
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	1a51      	subs	r1, r2, r1
 8002cf4:	61b9      	str	r1, [r7, #24]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	018b      	lsls	r3, r1, #6
 8002d0e:	4651      	mov	r1, sl
 8002d10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d14:	4651      	mov	r1, sl
 8002d16:	018a      	lsls	r2, r1, #6
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d1e:	4659      	mov	r1, fp
 8002d20:	eb63 0901 	sbc.w	r9, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d38:	4690      	mov	r8, r2
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	eb18 0303 	adds.w	r3, r8, r3
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	462b      	mov	r3, r5
 8002d46:	eb49 0303 	adc.w	r3, r9, r3
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	024b      	lsls	r3, r1, #9
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d62:	4621      	mov	r1, r4
 8002d64:	024a      	lsls	r2, r1, #9
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d6e:	2200      	movs	r2, #0
 8002d70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d78:	f7fd fa9a 	bl	80002b0 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d86:	e065      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x420>
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d94:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4611      	mov	r1, r2
 8002da0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002da4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002da6:	2300      	movs	r3, #0
 8002da8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002daa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dae:	4642      	mov	r2, r8
 8002db0:	464b      	mov	r3, r9
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	4649      	mov	r1, r9
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002de0:	4659      	mov	r1, fp
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	4651      	mov	r1, sl
 8002de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dea:	4651      	mov	r1, sl
 8002dec:	018a      	lsls	r2, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	1a54      	subs	r4, r2, r1
 8002df2:	4659      	mov	r1, fp
 8002df4:	eb63 0501 	sbc.w	r5, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb45 0303 	adc.w	r3, r5, r3
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e26:	4629      	mov	r1, r5
 8002e28:	028b      	lsls	r3, r1, #10
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e30:	4621      	mov	r1, r4
 8002e32:	028a      	lsls	r2, r1, #10
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e46:	f7fd fa33 	bl	80002b0 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0f1b      	lsrs	r3, r3, #28
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e72:	e003      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	37b8      	adds	r7, #184	@ 0xb8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400

08002e94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e28d      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8083 	beq.w	8002fba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002eb4:	4b94      	ldr	r3, [pc, #592]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d019      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ec0:	4b91      	ldr	r3, [pc, #580]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4b8b      	ldr	r3, [pc, #556]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d112      	bne.n	8002f0c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b88      	ldr	r3, [pc, #544]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	4b84      	ldr	r3, [pc, #528]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x124>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d157      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e25a      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x90>
 8002f16:	4b7c      	ldr	r3, [pc, #496]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xcc>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0xb4>
 8002f2e:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b73      	ldr	r3, [pc, #460]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a72      	ldr	r2, [pc, #456]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xcc>
 8002f48:	4b6f      	ldr	r3, [pc, #444]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6b      	ldr	r2, [pc, #428]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe f85a 	bl	8001020 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe f856 	bl	8001020 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	@ 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e21f      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b61      	ldr	r3, [pc, #388]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xdc>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe f846 	bl	8001020 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe f842 	bl	8001020 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	@ 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e20b      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x104>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d06f      	beq.n	80030a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fc6:	4b50      	ldr	r3, [pc, #320]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d017      	beq.n	8003002 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fde:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff6:	4b44      	ldr	r3, [pc, #272]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b41      	ldr	r3, [pc, #260]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x186>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1d3      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4937      	ldr	r1, [pc, #220]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x278>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fd ffef 	bl	8001020 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fd ffeb 	bl	8001020 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1b4      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4925      	ldr	r1, [pc, #148]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b24      	ldr	r3, [pc, #144]	@ (800310c <HAL_RCC_OscConfig+0x278>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fd ffce 	bl	8001020 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7fd ffca 	bl	8001020 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e193      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d036      	beq.n	8003120 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <HAL_RCC_OscConfig+0x27c>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fd ffae 	bl	8001020 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fd ffaa 	bl	8001020 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e173      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x274>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x234>
 80030e6:	e01b      	b.n	8003120 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fd ff97 	bl	8001020 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	e00e      	b.n	8003114 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fd ff93 	bl	8001020 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d907      	bls.n	8003114 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e15c      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b8a      	ldr	r3, [pc, #552]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ea      	bne.n	80030f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8097 	beq.w	800325c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b83      	ldr	r3, [pc, #524]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b7f      	ldr	r3, [pc, #508]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4a7e      	ldr	r2, [pc, #504]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	@ 0x40
 800314e:	4b7c      	ldr	r3, [pc, #496]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b79      	ldr	r3, [pc, #484]	@ (8003344 <HAL_RCC_OscConfig+0x4b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316a:	4b76      	ldr	r3, [pc, #472]	@ (8003344 <HAL_RCC_OscConfig+0x4b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	@ (8003344 <HAL_RCC_OscConfig+0x4b0>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7fd ff53 	bl	8001020 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fd ff4f 	bl	8001020 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e118      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b6c      	ldr	r3, [pc, #432]	@ (8003344 <HAL_RCC_OscConfig+0x4b0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x31e>
 80031a4:	4b66      	ldr	r3, [pc, #408]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	4a65      	ldr	r2, [pc, #404]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x358>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x340>
 80031ba:	4b61      	ldr	r3, [pc, #388]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	4a60      	ldr	r2, [pc, #384]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x358>
 80031d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a59      	ldr	r2, [pc, #356]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e0:	4b57      	ldr	r3, [pc, #348]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a56      	ldr	r2, [pc, #344]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fd ff14 	bl	8001020 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd ff10 	bl	8001020 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0d7      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b4b      	ldr	r3, [pc, #300]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCC_OscConfig+0x368>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fd fefe 	bl	8001020 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fd fefa 	bl	8001020 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0c1      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	4b40      	ldr	r3, [pc, #256]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a3a      	ldr	r2, [pc, #232]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80ad 	beq.w	80033c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003266:	4b36      	ldr	r3, [pc, #216]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d060      	beq.n	8003334 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d145      	bne.n	8003306 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b33      	ldr	r3, [pc, #204]	@ (8003348 <HAL_RCC_OscConfig+0x4b4>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fd fece 	bl	8001020 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd feca 	bl	8001020 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e093      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	071b      	lsls	r3, r3, #28
 80032d2:	491b      	ldr	r1, [pc, #108]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <HAL_RCC_OscConfig+0x4b4>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fd fe9f 	bl	8001020 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fd fe9b 	bl	8001020 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e064      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x452>
 8003304:	e05c      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <HAL_RCC_OscConfig+0x4b4>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd fe88 	bl	8001020 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd fe84 	bl	8001020 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e04d      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x480>
 8003332:	e045      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e040      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1f      	ldr	r3, [pc, #124]	@ (80033cc <HAL_RCC_OscConfig+0x538>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d030      	beq.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d129      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d122      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d119      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d10f      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e042      	b.n	8003468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fd04 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	@ 0x24
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f973 	bl	8003700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	d175      	bne.n	800357c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_UART_Transmit+0x2c>
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e06e      	b.n	800357e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2221      	movs	r2, #33	@ 0x21
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ae:	f7fd fdb7 	bl	8001020 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c8:	d108      	bne.n	80034dc <HAL_UART_Transmit+0x6c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e003      	b.n	80034e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034e4:	e02e      	b.n	8003544 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2180      	movs	r1, #128	@ 0x80
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f848 	bl	8003586 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e03a      	b.n	800357e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3302      	adds	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	e007      	b.n	8003536 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1cb      	bne.n	80034e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2140      	movs	r1, #64	@ 0x40
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f814 	bl	8003586 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e006      	b.n	800357e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003596:	e03b      	b.n	8003610 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d037      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fd fd3e 	bl	8001020 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	6a3a      	ldr	r2, [r7, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d302      	bcc.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03a      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d023      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d020      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	d01d      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d116      	bne.n	8003610 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f81d 	bl	8003638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2208      	movs	r2, #8
 8003602:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e00f      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d0b4      	beq.n	8003598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b095      	sub	sp, #84	@ 0x54
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003660:	643a      	str	r2, [r7, #64]	@ 0x40
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800366e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	61fb      	str	r3, [r7, #28]
   return(result);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d119      	bne.n	80036e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f023 0310 	bic.w	r3, r3, #16
 80036c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d0:	61ba      	str	r2, [r7, #24]
 80036d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	613b      	str	r3, [r7, #16]
   return(result);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036f2:	bf00      	nop
 80036f4:	3754      	adds	r7, #84	@ 0x54
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003704:	b0c0      	sub	sp, #256	@ 0x100
 8003706:	af00      	add	r7, sp, #0
 8003708:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	68d9      	ldr	r1, [r3, #12]
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	ea40 0301 	orr.w	r3, r0, r1
 8003728:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003758:	f021 010c 	bic.w	r1, r1, #12
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003766:	430b      	orrs	r3, r1
 8003768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377a:	6999      	ldr	r1, [r3, #24]
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	ea40 0301 	orr.w	r3, r0, r1
 8003786:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b8f      	ldr	r3, [pc, #572]	@ (80039cc <UART_SetConfig+0x2cc>)
 8003790:	429a      	cmp	r2, r3
 8003792:	d005      	beq.n	80037a0 <UART_SetConfig+0xa0>
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b8d      	ldr	r3, [pc, #564]	@ (80039d0 <UART_SetConfig+0x2d0>)
 800379c:	429a      	cmp	r2, r3
 800379e:	d104      	bne.n	80037aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7ff f934 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 80037a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037a8:	e003      	b.n	80037b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037aa:	f7ff f91b 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 80037ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037bc:	f040 810c 	bne.w	80039d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037da:	415b      	adcs	r3, r3
 80037dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037e2:	4621      	mov	r1, r4
 80037e4:	eb12 0801 	adds.w	r8, r2, r1
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb43 0901 	adc.w	r9, r3, r1
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003802:	4690      	mov	r8, r2
 8003804:	4699      	mov	r9, r3
 8003806:	4623      	mov	r3, r4
 8003808:	eb18 0303 	adds.w	r3, r8, r3
 800380c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003810:	462b      	mov	r3, r5
 8003812:	eb49 0303 	adc.w	r3, r9, r3
 8003816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003826:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800382a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800382e:	460b      	mov	r3, r1
 8003830:	18db      	adds	r3, r3, r3
 8003832:	653b      	str	r3, [r7, #80]	@ 0x50
 8003834:	4613      	mov	r3, r2
 8003836:	eb42 0303 	adc.w	r3, r2, r3
 800383a:	657b      	str	r3, [r7, #84]	@ 0x54
 800383c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003840:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003844:	f7fc fd34 	bl	80002b0 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <UART_SetConfig+0x2d4>)
 800384e:	fba3 2302 	umull	r2, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	011c      	lsls	r4, r3, #4
 8003856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385a:	2200      	movs	r2, #0
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003860:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003864:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003868:	4642      	mov	r2, r8
 800386a:	464b      	mov	r3, r9
 800386c:	1891      	adds	r1, r2, r2
 800386e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003870:	415b      	adcs	r3, r3
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003874:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003878:	4641      	mov	r1, r8
 800387a:	eb12 0a01 	adds.w	sl, r2, r1
 800387e:	4649      	mov	r1, r9
 8003880:	eb43 0b01 	adc.w	fp, r3, r1
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003890:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003898:	4692      	mov	sl, r2
 800389a:	469b      	mov	fp, r3
 800389c:	4643      	mov	r3, r8
 800389e:	eb1a 0303 	adds.w	r3, sl, r3
 80038a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038a6:	464b      	mov	r3, r9
 80038a8:	eb4b 0303 	adc.w	r3, fp, r3
 80038ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038c4:	460b      	mov	r3, r1
 80038c6:	18db      	adds	r3, r3, r3
 80038c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ca:	4613      	mov	r3, r2
 80038cc:	eb42 0303 	adc.w	r3, r2, r3
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038da:	f7fc fce9 	bl	80002b0 <__aeabi_uldivmod>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <UART_SetConfig+0x2d4>)
 80038e6:	fba3 2301 	umull	r2, r3, r3, r1
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2264      	movs	r2, #100	@ 0x64
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	1acb      	subs	r3, r1, r3
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038fa:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <UART_SetConfig+0x2d4>)
 80038fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003908:	441c      	add	r4, r3
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003914:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003918:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	1891      	adds	r1, r2, r2
 8003922:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003924:	415b      	adcs	r3, r3
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003928:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800392c:	4641      	mov	r1, r8
 800392e:	1851      	adds	r1, r2, r1
 8003930:	6339      	str	r1, [r7, #48]	@ 0x30
 8003932:	4649      	mov	r1, r9
 8003934:	414b      	adcs	r3, r1
 8003936:	637b      	str	r3, [r7, #52]	@ 0x34
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003944:	4659      	mov	r1, fp
 8003946:	00cb      	lsls	r3, r1, #3
 8003948:	4651      	mov	r1, sl
 800394a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394e:	4651      	mov	r1, sl
 8003950:	00ca      	lsls	r2, r1, #3
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	4603      	mov	r3, r0
 8003958:	4642      	mov	r2, r8
 800395a:	189b      	adds	r3, r3, r2
 800395c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003960:	464b      	mov	r3, r9
 8003962:	460a      	mov	r2, r1
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003978:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800397c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003980:	460b      	mov	r3, r1
 8003982:	18db      	adds	r3, r3, r3
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003986:	4613      	mov	r3, r2
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003992:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003996:	f7fc fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <UART_SetConfig+0x2d4>)
 80039a0:	fba3 1302 	umull	r1, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	2164      	movs	r1, #100	@ 0x64
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	3332      	adds	r3, #50	@ 0x32
 80039b2:	4a08      	ldr	r2, [pc, #32]	@ (80039d4 <UART_SetConfig+0x2d4>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	f003 0207 	and.w	r2, r3, #7
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4422      	add	r2, r4
 80039c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039c8:	e106      	b.n	8003bd8 <UART_SetConfig+0x4d8>
 80039ca:	bf00      	nop
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40011400 	.word	0x40011400
 80039d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039ea:	4642      	mov	r2, r8
 80039ec:	464b      	mov	r3, r9
 80039ee:	1891      	adds	r1, r2, r2
 80039f0:	6239      	str	r1, [r7, #32]
 80039f2:	415b      	adcs	r3, r3
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039fa:	4641      	mov	r1, r8
 80039fc:	1854      	adds	r4, r2, r1
 80039fe:	4649      	mov	r1, r9
 8003a00:	eb43 0501 	adc.w	r5, r3, r1
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	00eb      	lsls	r3, r5, #3
 8003a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a12:	00e2      	lsls	r2, r4, #3
 8003a14:	4614      	mov	r4, r2
 8003a16:	461d      	mov	r5, r3
 8003a18:	4643      	mov	r3, r8
 8003a1a:	18e3      	adds	r3, r4, r3
 8003a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a20:	464b      	mov	r3, r9
 8003a22:	eb45 0303 	adc.w	r3, r5, r3
 8003a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a46:	4629      	mov	r1, r5
 8003a48:	008b      	lsls	r3, r1, #2
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a50:	4621      	mov	r1, r4
 8003a52:	008a      	lsls	r2, r1, #2
 8003a54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a58:	f7fc fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4b60      	ldr	r3, [pc, #384]	@ (8003be4 <UART_SetConfig+0x4e4>)
 8003a62:	fba3 2302 	umull	r2, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	011c      	lsls	r4, r3, #4
 8003a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	464b      	mov	r3, r9
 8003a80:	1891      	adds	r1, r2, r2
 8003a82:	61b9      	str	r1, [r7, #24]
 8003a84:	415b      	adcs	r3, r3
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	1851      	adds	r1, r2, r1
 8003a90:	6139      	str	r1, [r7, #16]
 8003a92:	4649      	mov	r1, r9
 8003a94:	414b      	adcs	r3, r1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	00cb      	lsls	r3, r1, #3
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aae:	4651      	mov	r1, sl
 8003ab0:	00ca      	lsls	r2, r1, #3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4642      	mov	r2, r8
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	eb42 0303 	adc.w	r3, r2, r3
 8003ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ad6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	008b      	lsls	r3, r1, #2
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aee:	4641      	mov	r1, r8
 8003af0:	008a      	lsls	r2, r1, #2
 8003af2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003af6:	f7fc fbdb 	bl	80002b0 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	4b38      	ldr	r3, [pc, #224]	@ (8003be4 <UART_SetConfig+0x4e4>)
 8003b02:	fba3 2301 	umull	r2, r3, r3, r1
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2264      	movs	r2, #100	@ 0x64
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	@ 0x32
 8003b14:	4a33      	ldr	r2, [pc, #204]	@ (8003be4 <UART_SetConfig+0x4e4>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b20:	441c      	add	r4, r3
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	1891      	adds	r1, r2, r2
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	415b      	adcs	r3, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b40:	4641      	mov	r1, r8
 8003b42:	1851      	adds	r1, r2, r1
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	4649      	mov	r1, r9
 8003b48:	414b      	adcs	r3, r1
 8003b4a:	607b      	str	r3, [r7, #4]
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b58:	4659      	mov	r1, fp
 8003b5a:	00cb      	lsls	r3, r1, #3
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b62:	4651      	mov	r1, sl
 8003b64:	00ca      	lsls	r2, r1, #3
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b72:	464b      	mov	r3, r9
 8003b74:	460a      	mov	r2, r1
 8003b76:	eb42 0303 	adc.w	r3, r2, r3
 8003b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b86:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b94:	4649      	mov	r1, r9
 8003b96:	008b      	lsls	r3, r1, #2
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	008a      	lsls	r2, r1, #2
 8003ba2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ba6:	f7fc fb83 	bl	80002b0 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <UART_SetConfig+0x4e4>)
 8003bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2164      	movs	r1, #100	@ 0x64
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	3332      	adds	r3, #50	@ 0x32
 8003bc2:	4a08      	ldr	r2, [pc, #32]	@ (8003be4 <UART_SetConfig+0x4e4>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 020f 	and.w	r2, r3, #15
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4422      	add	r2, r4
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bde:	46bd      	mov	sp, r7
 8003be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be4:	51eb851f 	.word	0x51eb851f

08003be8 <std>:
 8003be8:	2300      	movs	r3, #0
 8003bea:	b510      	push	{r4, lr}
 8003bec:	4604      	mov	r4, r0
 8003bee:	e9c0 3300 	strd	r3, r3, [r0]
 8003bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bf6:	6083      	str	r3, [r0, #8]
 8003bf8:	8181      	strh	r1, [r0, #12]
 8003bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bfc:	81c2      	strh	r2, [r0, #14]
 8003bfe:	6183      	str	r3, [r0, #24]
 8003c00:	4619      	mov	r1, r3
 8003c02:	2208      	movs	r2, #8
 8003c04:	305c      	adds	r0, #92	@ 0x5c
 8003c06:	f000 f9f9 	bl	8003ffc <memset>
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <std+0x58>)
 8003c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <std+0x5c>)
 8003c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <std+0x60>)
 8003c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <std+0x64>)
 8003c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <std+0x68>)
 8003c1c:	6224      	str	r4, [r4, #32]
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	d006      	beq.n	8003c30 <std+0x48>
 8003c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c26:	4294      	cmp	r4, r2
 8003c28:	d002      	beq.n	8003c30 <std+0x48>
 8003c2a:	33d0      	adds	r3, #208	@ 0xd0
 8003c2c:	429c      	cmp	r4, r3
 8003c2e:	d105      	bne.n	8003c3c <std+0x54>
 8003c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c38:	f000 ba58 	b.w	80040ec <__retarget_lock_init_recursive>
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	bf00      	nop
 8003c40:	08003e4d 	.word	0x08003e4d
 8003c44:	08003e6f 	.word	0x08003e6f
 8003c48:	08003ea7 	.word	0x08003ea7
 8003c4c:	08003ecb 	.word	0x08003ecb
 8003c50:	200001c8 	.word	0x200001c8

08003c54 <stdio_exit_handler>:
 8003c54:	4a02      	ldr	r2, [pc, #8]	@ (8003c60 <stdio_exit_handler+0xc>)
 8003c56:	4903      	ldr	r1, [pc, #12]	@ (8003c64 <stdio_exit_handler+0x10>)
 8003c58:	4803      	ldr	r0, [pc, #12]	@ (8003c68 <stdio_exit_handler+0x14>)
 8003c5a:	f000 b869 	b.w	8003d30 <_fwalk_sglue>
 8003c5e:	bf00      	nop
 8003c60:	20000020 	.word	0x20000020
 8003c64:	0800498d 	.word	0x0800498d
 8003c68:	20000030 	.word	0x20000030

08003c6c <cleanup_stdio>:
 8003c6c:	6841      	ldr	r1, [r0, #4]
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <cleanup_stdio+0x34>)
 8003c70:	4299      	cmp	r1, r3
 8003c72:	b510      	push	{r4, lr}
 8003c74:	4604      	mov	r4, r0
 8003c76:	d001      	beq.n	8003c7c <cleanup_stdio+0x10>
 8003c78:	f000 fe88 	bl	800498c <_fflush_r>
 8003c7c:	68a1      	ldr	r1, [r4, #8]
 8003c7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <cleanup_stdio+0x38>)
 8003c80:	4299      	cmp	r1, r3
 8003c82:	d002      	beq.n	8003c8a <cleanup_stdio+0x1e>
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 fe81 	bl	800498c <_fflush_r>
 8003c8a:	68e1      	ldr	r1, [r4, #12]
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <cleanup_stdio+0x3c>)
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	d004      	beq.n	8003c9c <cleanup_stdio+0x30>
 8003c92:	4620      	mov	r0, r4
 8003c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c98:	f000 be78 	b.w	800498c <_fflush_r>
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200001c8 	.word	0x200001c8
 8003ca4:	20000230 	.word	0x20000230
 8003ca8:	20000298 	.word	0x20000298

08003cac <global_stdio_init.part.0>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <global_stdio_init.part.0+0x30>)
 8003cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8003ce0 <global_stdio_init.part.0+0x34>)
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce4 <global_stdio_init.part.0+0x38>)
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2104      	movs	r1, #4
 8003cbc:	f7ff ff94 	bl	8003be8 <std>
 8003cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2109      	movs	r1, #9
 8003cc8:	f7ff ff8e 	bl	8003be8 <std>
 8003ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd6:	2112      	movs	r1, #18
 8003cd8:	f7ff bf86 	b.w	8003be8 <std>
 8003cdc:	20000300 	.word	0x20000300
 8003ce0:	200001c8 	.word	0x200001c8
 8003ce4:	08003c55 	.word	0x08003c55

08003ce8 <__sfp_lock_acquire>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	@ (8003cf0 <__sfp_lock_acquire+0x8>)
 8003cea:	f000 ba00 	b.w	80040ee <__retarget_lock_acquire_recursive>
 8003cee:	bf00      	nop
 8003cf0:	20000309 	.word	0x20000309

08003cf4 <__sfp_lock_release>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	@ (8003cfc <__sfp_lock_release+0x8>)
 8003cf6:	f000 b9fb 	b.w	80040f0 <__retarget_lock_release_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	20000309 	.word	0x20000309

08003d00 <__sinit>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4604      	mov	r4, r0
 8003d04:	f7ff fff0 	bl	8003ce8 <__sfp_lock_acquire>
 8003d08:	6a23      	ldr	r3, [r4, #32]
 8003d0a:	b11b      	cbz	r3, 8003d14 <__sinit+0x14>
 8003d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d10:	f7ff bff0 	b.w	8003cf4 <__sfp_lock_release>
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <__sinit+0x28>)
 8003d16:	6223      	str	r3, [r4, #32]
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__sinit+0x2c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f5      	bne.n	8003d0c <__sinit+0xc>
 8003d20:	f7ff ffc4 	bl	8003cac <global_stdio_init.part.0>
 8003d24:	e7f2      	b.n	8003d0c <__sinit+0xc>
 8003d26:	bf00      	nop
 8003d28:	08003c6d 	.word	0x08003c6d
 8003d2c:	20000300 	.word	0x20000300

08003d30 <_fwalk_sglue>:
 8003d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d34:	4607      	mov	r7, r0
 8003d36:	4688      	mov	r8, r1
 8003d38:	4614      	mov	r4, r2
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d40:	f1b9 0901 	subs.w	r9, r9, #1
 8003d44:	d505      	bpl.n	8003d52 <_fwalk_sglue+0x22>
 8003d46:	6824      	ldr	r4, [r4, #0]
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	d1f7      	bne.n	8003d3c <_fwalk_sglue+0xc>
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d52:	89ab      	ldrh	r3, [r5, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d907      	bls.n	8003d68 <_fwalk_sglue+0x38>
 8003d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	d003      	beq.n	8003d68 <_fwalk_sglue+0x38>
 8003d60:	4629      	mov	r1, r5
 8003d62:	4638      	mov	r0, r7
 8003d64:	47c0      	blx	r8
 8003d66:	4306      	orrs	r6, r0
 8003d68:	3568      	adds	r5, #104	@ 0x68
 8003d6a:	e7e9      	b.n	8003d40 <_fwalk_sglue+0x10>

08003d6c <iprintf>:
 8003d6c:	b40f      	push	{r0, r1, r2, r3}
 8003d6e:	b507      	push	{r0, r1, r2, lr}
 8003d70:	4906      	ldr	r1, [pc, #24]	@ (8003d8c <iprintf+0x20>)
 8003d72:	ab04      	add	r3, sp, #16
 8003d74:	6808      	ldr	r0, [r1, #0]
 8003d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d7a:	6881      	ldr	r1, [r0, #8]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	f000 fadb 	bl	8004338 <_vfiprintf_r>
 8003d82:	b003      	add	sp, #12
 8003d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d88:	b004      	add	sp, #16
 8003d8a:	4770      	bx	lr
 8003d8c:	2000002c 	.word	0x2000002c

08003d90 <_puts_r>:
 8003d90:	6a03      	ldr	r3, [r0, #32]
 8003d92:	b570      	push	{r4, r5, r6, lr}
 8003d94:	6884      	ldr	r4, [r0, #8]
 8003d96:	4605      	mov	r5, r0
 8003d98:	460e      	mov	r6, r1
 8003d9a:	b90b      	cbnz	r3, 8003da0 <_puts_r+0x10>
 8003d9c:	f7ff ffb0 	bl	8003d00 <__sinit>
 8003da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003da2:	07db      	lsls	r3, r3, #31
 8003da4:	d405      	bmi.n	8003db2 <_puts_r+0x22>
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	0598      	lsls	r0, r3, #22
 8003daa:	d402      	bmi.n	8003db2 <_puts_r+0x22>
 8003dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dae:	f000 f99e 	bl	80040ee <__retarget_lock_acquire_recursive>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	0719      	lsls	r1, r3, #28
 8003db6:	d502      	bpl.n	8003dbe <_puts_r+0x2e>
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d135      	bne.n	8003e2a <_puts_r+0x9a>
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f8c5 	bl	8003f50 <__swsetup_r>
 8003dc6:	b380      	cbz	r0, 8003e2a <_puts_r+0x9a>
 8003dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8003dcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dce:	07da      	lsls	r2, r3, #31
 8003dd0:	d405      	bmi.n	8003dde <_puts_r+0x4e>
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	059b      	lsls	r3, r3, #22
 8003dd6:	d402      	bmi.n	8003dde <_puts_r+0x4e>
 8003dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dda:	f000 f989 	bl	80040f0 <__retarget_lock_release_recursive>
 8003dde:	4628      	mov	r0, r5
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	da04      	bge.n	8003df0 <_puts_r+0x60>
 8003de6:	69a2      	ldr	r2, [r4, #24]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	dc17      	bgt.n	8003e1c <_puts_r+0x8c>
 8003dec:	290a      	cmp	r1, #10
 8003dee:	d015      	beq.n	8003e1c <_puts_r+0x8c>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	6022      	str	r2, [r4, #0]
 8003df6:	7019      	strb	r1, [r3, #0]
 8003df8:	68a3      	ldr	r3, [r4, #8]
 8003dfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	60a3      	str	r3, [r4, #8]
 8003e02:	2900      	cmp	r1, #0
 8003e04:	d1ed      	bne.n	8003de2 <_puts_r+0x52>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da11      	bge.n	8003e2e <_puts_r+0x9e>
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	210a      	movs	r1, #10
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 f85f 	bl	8003ed2 <__swbuf_r>
 8003e14:	3001      	adds	r0, #1
 8003e16:	d0d7      	beq.n	8003dc8 <_puts_r+0x38>
 8003e18:	250a      	movs	r5, #10
 8003e1a:	e7d7      	b.n	8003dcc <_puts_r+0x3c>
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 f857 	bl	8003ed2 <__swbuf_r>
 8003e24:	3001      	adds	r0, #1
 8003e26:	d1e7      	bne.n	8003df8 <_puts_r+0x68>
 8003e28:	e7ce      	b.n	8003dc8 <_puts_r+0x38>
 8003e2a:	3e01      	subs	r6, #1
 8003e2c:	e7e4      	b.n	8003df8 <_puts_r+0x68>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	6022      	str	r2, [r4, #0]
 8003e34:	220a      	movs	r2, #10
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e7ee      	b.n	8003e18 <_puts_r+0x88>
	...

08003e3c <puts>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	@ (8003e48 <puts+0xc>)
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f7ff bfa5 	b.w	8003d90 <_puts_r>
 8003e46:	bf00      	nop
 8003e48:	2000002c 	.word	0x2000002c

08003e4c <__sread>:
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	460c      	mov	r4, r1
 8003e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e54:	f000 f8fc 	bl	8004050 <_read_r>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	bfab      	itete	ge
 8003e5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e60:	181b      	addge	r3, r3, r0
 8003e62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e66:	bfac      	ite	ge
 8003e68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e6a:	81a3      	strhlt	r3, [r4, #12]
 8003e6c:	bd10      	pop	{r4, pc}

08003e6e <__swrite>:
 8003e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e72:	461f      	mov	r7, r3
 8003e74:	898b      	ldrh	r3, [r1, #12]
 8003e76:	05db      	lsls	r3, r3, #23
 8003e78:	4605      	mov	r5, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	d505      	bpl.n	8003e8c <__swrite+0x1e>
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	2302      	movs	r3, #2
 8003e86:	2200      	movs	r2, #0
 8003e88:	f000 f8d0 	bl	800402c <_lseek_r>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	4632      	mov	r2, r6
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	f000 b8e7 	b.w	8004074 <_write_r>

08003ea6 <__sseek>:
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eae:	f000 f8bd 	bl	800402c <_lseek_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	bf15      	itete	ne
 8003eb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003eba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ebe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ec2:	81a3      	strheq	r3, [r4, #12]
 8003ec4:	bf18      	it	ne
 8003ec6:	81a3      	strhne	r3, [r4, #12]
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <__sclose>:
 8003eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ece:	f000 b89d 	b.w	800400c <_close_r>

08003ed2 <__swbuf_r>:
 8003ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed4:	460e      	mov	r6, r1
 8003ed6:	4614      	mov	r4, r2
 8003ed8:	4605      	mov	r5, r0
 8003eda:	b118      	cbz	r0, 8003ee4 <__swbuf_r+0x12>
 8003edc:	6a03      	ldr	r3, [r0, #32]
 8003ede:	b90b      	cbnz	r3, 8003ee4 <__swbuf_r+0x12>
 8003ee0:	f7ff ff0e 	bl	8003d00 <__sinit>
 8003ee4:	69a3      	ldr	r3, [r4, #24]
 8003ee6:	60a3      	str	r3, [r4, #8]
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	071a      	lsls	r2, r3, #28
 8003eec:	d501      	bpl.n	8003ef2 <__swbuf_r+0x20>
 8003eee:	6923      	ldr	r3, [r4, #16]
 8003ef0:	b943      	cbnz	r3, 8003f04 <__swbuf_r+0x32>
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f000 f82b 	bl	8003f50 <__swsetup_r>
 8003efa:	b118      	cbz	r0, 8003f04 <__swbuf_r+0x32>
 8003efc:	f04f 37ff 	mov.w	r7, #4294967295
 8003f00:	4638      	mov	r0, r7
 8003f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	6922      	ldr	r2, [r4, #16]
 8003f08:	1a98      	subs	r0, r3, r2
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	b2f6      	uxtb	r6, r6
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	4637      	mov	r7, r6
 8003f12:	dc05      	bgt.n	8003f20 <__swbuf_r+0x4e>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 fd38 	bl	800498c <_fflush_r>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d1ed      	bne.n	8003efc <__swbuf_r+0x2a>
 8003f20:	68a3      	ldr	r3, [r4, #8]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	6022      	str	r2, [r4, #0]
 8003f2c:	701e      	strb	r6, [r3, #0]
 8003f2e:	6962      	ldr	r2, [r4, #20]
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d004      	beq.n	8003f40 <__swbuf_r+0x6e>
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	07db      	lsls	r3, r3, #31
 8003f3a:	d5e1      	bpl.n	8003f00 <__swbuf_r+0x2e>
 8003f3c:	2e0a      	cmp	r6, #10
 8003f3e:	d1df      	bne.n	8003f00 <__swbuf_r+0x2e>
 8003f40:	4621      	mov	r1, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 fd22 	bl	800498c <_fflush_r>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d0d9      	beq.n	8003f00 <__swbuf_r+0x2e>
 8003f4c:	e7d6      	b.n	8003efc <__swbuf_r+0x2a>
	...

08003f50 <__swsetup_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4b29      	ldr	r3, [pc, #164]	@ (8003ff8 <__swsetup_r+0xa8>)
 8003f54:	4605      	mov	r5, r0
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	460c      	mov	r4, r1
 8003f5a:	b118      	cbz	r0, 8003f64 <__swsetup_r+0x14>
 8003f5c:	6a03      	ldr	r3, [r0, #32]
 8003f5e:	b90b      	cbnz	r3, 8003f64 <__swsetup_r+0x14>
 8003f60:	f7ff fece 	bl	8003d00 <__sinit>
 8003f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f68:	0719      	lsls	r1, r3, #28
 8003f6a:	d422      	bmi.n	8003fb2 <__swsetup_r+0x62>
 8003f6c:	06da      	lsls	r2, r3, #27
 8003f6e:	d407      	bmi.n	8003f80 <__swsetup_r+0x30>
 8003f70:	2209      	movs	r2, #9
 8003f72:	602a      	str	r2, [r5, #0]
 8003f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7e:	e033      	b.n	8003fe8 <__swsetup_r+0x98>
 8003f80:	0758      	lsls	r0, r3, #29
 8003f82:	d512      	bpl.n	8003faa <__swsetup_r+0x5a>
 8003f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f86:	b141      	cbz	r1, 8003f9a <__swsetup_r+0x4a>
 8003f88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	d002      	beq.n	8003f96 <__swsetup_r+0x46>
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 f8af 	bl	80040f4 <_free_r>
 8003f96:	2300      	movs	r3, #0
 8003f98:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0308 	orr.w	r3, r3, #8
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	b94b      	cbnz	r3, 8003fca <__swsetup_r+0x7a>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc0:	d003      	beq.n	8003fca <__swsetup_r+0x7a>
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 fd2f 	bl	8004a28 <__smakebuf_r>
 8003fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fce:	f013 0201 	ands.w	r2, r3, #1
 8003fd2:	d00a      	beq.n	8003fea <__swsetup_r+0x9a>
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60a2      	str	r2, [r4, #8]
 8003fd8:	6962      	ldr	r2, [r4, #20]
 8003fda:	4252      	negs	r2, r2
 8003fdc:	61a2      	str	r2, [r4, #24]
 8003fde:	6922      	ldr	r2, [r4, #16]
 8003fe0:	b942      	cbnz	r2, 8003ff4 <__swsetup_r+0xa4>
 8003fe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003fe6:	d1c5      	bne.n	8003f74 <__swsetup_r+0x24>
 8003fe8:	bd38      	pop	{r3, r4, r5, pc}
 8003fea:	0799      	lsls	r1, r3, #30
 8003fec:	bf58      	it	pl
 8003fee:	6962      	ldrpl	r2, [r4, #20]
 8003ff0:	60a2      	str	r2, [r4, #8]
 8003ff2:	e7f4      	b.n	8003fde <__swsetup_r+0x8e>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e7f7      	b.n	8003fe8 <__swsetup_r+0x98>
 8003ff8:	2000002c 	.word	0x2000002c

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <_close_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d06      	ldr	r5, [pc, #24]	@ (8004028 <_close_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fc fe24 	bl	8000c64 <_close>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_close_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_close_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000304 	.word	0x20000304

0800402c <_lseek_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d07      	ldr	r5, [pc, #28]	@ (800404c <_lseek_r+0x20>)
 8004030:	4604      	mov	r4, r0
 8004032:	4608      	mov	r0, r1
 8004034:	4611      	mov	r1, r2
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fc fe39 	bl	8000cb2 <_lseek>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_lseek_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_lseek_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20000304 	.word	0x20000304

08004050 <_read_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	@ (8004070 <_read_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fc fdc7 	bl	8000bf2 <_read>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_read_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_read_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000304 	.word	0x20000304

08004074 <_write_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d07      	ldr	r5, [pc, #28]	@ (8004094 <_write_r+0x20>)
 8004078:	4604      	mov	r4, r0
 800407a:	4608      	mov	r0, r1
 800407c:	4611      	mov	r1, r2
 800407e:	2200      	movs	r2, #0
 8004080:	602a      	str	r2, [r5, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	f7fc fdd2 	bl	8000c2c <_write>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_write_r+0x1e>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_write_r+0x1e>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	20000304 	.word	0x20000304

08004098 <__errno>:
 8004098:	4b01      	ldr	r3, [pc, #4]	@ (80040a0 <__errno+0x8>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	2000002c 	.word	0x2000002c

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4d0d      	ldr	r5, [pc, #52]	@ (80040dc <__libc_init_array+0x38>)
 80040a8:	4c0d      	ldr	r4, [pc, #52]	@ (80040e0 <__libc_init_array+0x3c>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	2600      	movs	r6, #0
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	4d0b      	ldr	r5, [pc, #44]	@ (80040e4 <__libc_init_array+0x40>)
 80040b6:	4c0c      	ldr	r4, [pc, #48]	@ (80040e8 <__libc_init_array+0x44>)
 80040b8:	f000 fd24 	bl	8004b04 <_init>
 80040bc:	1b64      	subs	r4, r4, r5
 80040be:	10a4      	asrs	r4, r4, #2
 80040c0:	2600      	movs	r6, #0
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	08004d08 	.word	0x08004d08
 80040e0:	08004d08 	.word	0x08004d08
 80040e4:	08004d08 	.word	0x08004d08
 80040e8:	08004d0c 	.word	0x08004d0c

080040ec <__retarget_lock_init_recursive>:
 80040ec:	4770      	bx	lr

080040ee <__retarget_lock_acquire_recursive>:
 80040ee:	4770      	bx	lr

080040f0 <__retarget_lock_release_recursive>:
 80040f0:	4770      	bx	lr
	...

080040f4 <_free_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4605      	mov	r5, r0
 80040f8:	2900      	cmp	r1, #0
 80040fa:	d041      	beq.n	8004180 <_free_r+0x8c>
 80040fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004100:	1f0c      	subs	r4, r1, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfb8      	it	lt
 8004106:	18e4      	addlt	r4, r4, r3
 8004108:	f000 f8e0 	bl	80042cc <__malloc_lock>
 800410c:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <_free_r+0x90>)
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	b933      	cbnz	r3, 8004120 <_free_r+0x2c>
 8004112:	6063      	str	r3, [r4, #4]
 8004114:	6014      	str	r4, [r2, #0]
 8004116:	4628      	mov	r0, r5
 8004118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800411c:	f000 b8dc 	b.w	80042d8 <__malloc_unlock>
 8004120:	42a3      	cmp	r3, r4
 8004122:	d908      	bls.n	8004136 <_free_r+0x42>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	1821      	adds	r1, r4, r0
 8004128:	428b      	cmp	r3, r1
 800412a:	bf01      	itttt	eq
 800412c:	6819      	ldreq	r1, [r3, #0]
 800412e:	685b      	ldreq	r3, [r3, #4]
 8004130:	1809      	addeq	r1, r1, r0
 8004132:	6021      	streq	r1, [r4, #0]
 8004134:	e7ed      	b.n	8004112 <_free_r+0x1e>
 8004136:	461a      	mov	r2, r3
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	b10b      	cbz	r3, 8004140 <_free_r+0x4c>
 800413c:	42a3      	cmp	r3, r4
 800413e:	d9fa      	bls.n	8004136 <_free_r+0x42>
 8004140:	6811      	ldr	r1, [r2, #0]
 8004142:	1850      	adds	r0, r2, r1
 8004144:	42a0      	cmp	r0, r4
 8004146:	d10b      	bne.n	8004160 <_free_r+0x6c>
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	4401      	add	r1, r0
 800414c:	1850      	adds	r0, r2, r1
 800414e:	4283      	cmp	r3, r0
 8004150:	6011      	str	r1, [r2, #0]
 8004152:	d1e0      	bne.n	8004116 <_free_r+0x22>
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	6053      	str	r3, [r2, #4]
 800415a:	4408      	add	r0, r1
 800415c:	6010      	str	r0, [r2, #0]
 800415e:	e7da      	b.n	8004116 <_free_r+0x22>
 8004160:	d902      	bls.n	8004168 <_free_r+0x74>
 8004162:	230c      	movs	r3, #12
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	e7d6      	b.n	8004116 <_free_r+0x22>
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	1821      	adds	r1, r4, r0
 800416c:	428b      	cmp	r3, r1
 800416e:	bf04      	itt	eq
 8004170:	6819      	ldreq	r1, [r3, #0]
 8004172:	685b      	ldreq	r3, [r3, #4]
 8004174:	6063      	str	r3, [r4, #4]
 8004176:	bf04      	itt	eq
 8004178:	1809      	addeq	r1, r1, r0
 800417a:	6021      	streq	r1, [r4, #0]
 800417c:	6054      	str	r4, [r2, #4]
 800417e:	e7ca      	b.n	8004116 <_free_r+0x22>
 8004180:	bd38      	pop	{r3, r4, r5, pc}
 8004182:	bf00      	nop
 8004184:	20000310 	.word	0x20000310

08004188 <sbrk_aligned>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4e0f      	ldr	r6, [pc, #60]	@ (80041c8 <sbrk_aligned+0x40>)
 800418c:	460c      	mov	r4, r1
 800418e:	6831      	ldr	r1, [r6, #0]
 8004190:	4605      	mov	r5, r0
 8004192:	b911      	cbnz	r1, 800419a <sbrk_aligned+0x12>
 8004194:	f000 fca6 	bl	8004ae4 <_sbrk_r>
 8004198:	6030      	str	r0, [r6, #0]
 800419a:	4621      	mov	r1, r4
 800419c:	4628      	mov	r0, r5
 800419e:	f000 fca1 	bl	8004ae4 <_sbrk_r>
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	d103      	bne.n	80041ae <sbrk_aligned+0x26>
 80041a6:	f04f 34ff 	mov.w	r4, #4294967295
 80041aa:	4620      	mov	r0, r4
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
 80041ae:	1cc4      	adds	r4, r0, #3
 80041b0:	f024 0403 	bic.w	r4, r4, #3
 80041b4:	42a0      	cmp	r0, r4
 80041b6:	d0f8      	beq.n	80041aa <sbrk_aligned+0x22>
 80041b8:	1a21      	subs	r1, r4, r0
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 fc92 	bl	8004ae4 <_sbrk_r>
 80041c0:	3001      	adds	r0, #1
 80041c2:	d1f2      	bne.n	80041aa <sbrk_aligned+0x22>
 80041c4:	e7ef      	b.n	80041a6 <sbrk_aligned+0x1e>
 80041c6:	bf00      	nop
 80041c8:	2000030c 	.word	0x2000030c

080041cc <_malloc_r>:
 80041cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d0:	1ccd      	adds	r5, r1, #3
 80041d2:	f025 0503 	bic.w	r5, r5, #3
 80041d6:	3508      	adds	r5, #8
 80041d8:	2d0c      	cmp	r5, #12
 80041da:	bf38      	it	cc
 80041dc:	250c      	movcc	r5, #12
 80041de:	2d00      	cmp	r5, #0
 80041e0:	4606      	mov	r6, r0
 80041e2:	db01      	blt.n	80041e8 <_malloc_r+0x1c>
 80041e4:	42a9      	cmp	r1, r5
 80041e6:	d904      	bls.n	80041f2 <_malloc_r+0x26>
 80041e8:	230c      	movs	r3, #12
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	2000      	movs	r0, #0
 80041ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042c8 <_malloc_r+0xfc>
 80041f6:	f000 f869 	bl	80042cc <__malloc_lock>
 80041fa:	f8d8 3000 	ldr.w	r3, [r8]
 80041fe:	461c      	mov	r4, r3
 8004200:	bb44      	cbnz	r4, 8004254 <_malloc_r+0x88>
 8004202:	4629      	mov	r1, r5
 8004204:	4630      	mov	r0, r6
 8004206:	f7ff ffbf 	bl	8004188 <sbrk_aligned>
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	4604      	mov	r4, r0
 800420e:	d158      	bne.n	80042c2 <_malloc_r+0xf6>
 8004210:	f8d8 4000 	ldr.w	r4, [r8]
 8004214:	4627      	mov	r7, r4
 8004216:	2f00      	cmp	r7, #0
 8004218:	d143      	bne.n	80042a2 <_malloc_r+0xd6>
 800421a:	2c00      	cmp	r4, #0
 800421c:	d04b      	beq.n	80042b6 <_malloc_r+0xea>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	4639      	mov	r1, r7
 8004222:	4630      	mov	r0, r6
 8004224:	eb04 0903 	add.w	r9, r4, r3
 8004228:	f000 fc5c 	bl	8004ae4 <_sbrk_r>
 800422c:	4581      	cmp	r9, r0
 800422e:	d142      	bne.n	80042b6 <_malloc_r+0xea>
 8004230:	6821      	ldr	r1, [r4, #0]
 8004232:	1a6d      	subs	r5, r5, r1
 8004234:	4629      	mov	r1, r5
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff ffa6 	bl	8004188 <sbrk_aligned>
 800423c:	3001      	adds	r0, #1
 800423e:	d03a      	beq.n	80042b6 <_malloc_r+0xea>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	442b      	add	r3, r5
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	f8d8 3000 	ldr.w	r3, [r8]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	bb62      	cbnz	r2, 80042a8 <_malloc_r+0xdc>
 800424e:	f8c8 7000 	str.w	r7, [r8]
 8004252:	e00f      	b.n	8004274 <_malloc_r+0xa8>
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	1b52      	subs	r2, r2, r5
 8004258:	d420      	bmi.n	800429c <_malloc_r+0xd0>
 800425a:	2a0b      	cmp	r2, #11
 800425c:	d917      	bls.n	800428e <_malloc_r+0xc2>
 800425e:	1961      	adds	r1, r4, r5
 8004260:	42a3      	cmp	r3, r4
 8004262:	6025      	str	r5, [r4, #0]
 8004264:	bf18      	it	ne
 8004266:	6059      	strne	r1, [r3, #4]
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	bf08      	it	eq
 800426c:	f8c8 1000 	streq.w	r1, [r8]
 8004270:	5162      	str	r2, [r4, r5]
 8004272:	604b      	str	r3, [r1, #4]
 8004274:	4630      	mov	r0, r6
 8004276:	f000 f82f 	bl	80042d8 <__malloc_unlock>
 800427a:	f104 000b 	add.w	r0, r4, #11
 800427e:	1d23      	adds	r3, r4, #4
 8004280:	f020 0007 	bic.w	r0, r0, #7
 8004284:	1ac2      	subs	r2, r0, r3
 8004286:	bf1c      	itt	ne
 8004288:	1a1b      	subne	r3, r3, r0
 800428a:	50a3      	strne	r3, [r4, r2]
 800428c:	e7af      	b.n	80041ee <_malloc_r+0x22>
 800428e:	6862      	ldr	r2, [r4, #4]
 8004290:	42a3      	cmp	r3, r4
 8004292:	bf0c      	ite	eq
 8004294:	f8c8 2000 	streq.w	r2, [r8]
 8004298:	605a      	strne	r2, [r3, #4]
 800429a:	e7eb      	b.n	8004274 <_malloc_r+0xa8>
 800429c:	4623      	mov	r3, r4
 800429e:	6864      	ldr	r4, [r4, #4]
 80042a0:	e7ae      	b.n	8004200 <_malloc_r+0x34>
 80042a2:	463c      	mov	r4, r7
 80042a4:	687f      	ldr	r7, [r7, #4]
 80042a6:	e7b6      	b.n	8004216 <_malloc_r+0x4a>
 80042a8:	461a      	mov	r2, r3
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	d1fb      	bne.n	80042a8 <_malloc_r+0xdc>
 80042b0:	2300      	movs	r3, #0
 80042b2:	6053      	str	r3, [r2, #4]
 80042b4:	e7de      	b.n	8004274 <_malloc_r+0xa8>
 80042b6:	230c      	movs	r3, #12
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	4630      	mov	r0, r6
 80042bc:	f000 f80c 	bl	80042d8 <__malloc_unlock>
 80042c0:	e794      	b.n	80041ec <_malloc_r+0x20>
 80042c2:	6005      	str	r5, [r0, #0]
 80042c4:	e7d6      	b.n	8004274 <_malloc_r+0xa8>
 80042c6:	bf00      	nop
 80042c8:	20000310 	.word	0x20000310

080042cc <__malloc_lock>:
 80042cc:	4801      	ldr	r0, [pc, #4]	@ (80042d4 <__malloc_lock+0x8>)
 80042ce:	f7ff bf0e 	b.w	80040ee <__retarget_lock_acquire_recursive>
 80042d2:	bf00      	nop
 80042d4:	20000308 	.word	0x20000308

080042d8 <__malloc_unlock>:
 80042d8:	4801      	ldr	r0, [pc, #4]	@ (80042e0 <__malloc_unlock+0x8>)
 80042da:	f7ff bf09 	b.w	80040f0 <__retarget_lock_release_recursive>
 80042de:	bf00      	nop
 80042e0:	20000308 	.word	0x20000308

080042e4 <__sfputc_r>:
 80042e4:	6893      	ldr	r3, [r2, #8]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	b410      	push	{r4}
 80042ec:	6093      	str	r3, [r2, #8]
 80042ee:	da08      	bge.n	8004302 <__sfputc_r+0x1e>
 80042f0:	6994      	ldr	r4, [r2, #24]
 80042f2:	42a3      	cmp	r3, r4
 80042f4:	db01      	blt.n	80042fa <__sfputc_r+0x16>
 80042f6:	290a      	cmp	r1, #10
 80042f8:	d103      	bne.n	8004302 <__sfputc_r+0x1e>
 80042fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042fe:	f7ff bde8 	b.w	8003ed2 <__swbuf_r>
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	1c58      	adds	r0, r3, #1
 8004306:	6010      	str	r0, [r2, #0]
 8004308:	7019      	strb	r1, [r3, #0]
 800430a:	4608      	mov	r0, r1
 800430c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004310:	4770      	bx	lr

08004312 <__sfputs_r>:
 8004312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004314:	4606      	mov	r6, r0
 8004316:	460f      	mov	r7, r1
 8004318:	4614      	mov	r4, r2
 800431a:	18d5      	adds	r5, r2, r3
 800431c:	42ac      	cmp	r4, r5
 800431e:	d101      	bne.n	8004324 <__sfputs_r+0x12>
 8004320:	2000      	movs	r0, #0
 8004322:	e007      	b.n	8004334 <__sfputs_r+0x22>
 8004324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004328:	463a      	mov	r2, r7
 800432a:	4630      	mov	r0, r6
 800432c:	f7ff ffda 	bl	80042e4 <__sfputc_r>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d1f3      	bne.n	800431c <__sfputs_r+0xa>
 8004334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004338 <_vfiprintf_r>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	460d      	mov	r5, r1
 800433e:	b09d      	sub	sp, #116	@ 0x74
 8004340:	4614      	mov	r4, r2
 8004342:	4698      	mov	r8, r3
 8004344:	4606      	mov	r6, r0
 8004346:	b118      	cbz	r0, 8004350 <_vfiprintf_r+0x18>
 8004348:	6a03      	ldr	r3, [r0, #32]
 800434a:	b90b      	cbnz	r3, 8004350 <_vfiprintf_r+0x18>
 800434c:	f7ff fcd8 	bl	8003d00 <__sinit>
 8004350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004352:	07d9      	lsls	r1, r3, #31
 8004354:	d405      	bmi.n	8004362 <_vfiprintf_r+0x2a>
 8004356:	89ab      	ldrh	r3, [r5, #12]
 8004358:	059a      	lsls	r2, r3, #22
 800435a:	d402      	bmi.n	8004362 <_vfiprintf_r+0x2a>
 800435c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800435e:	f7ff fec6 	bl	80040ee <__retarget_lock_acquire_recursive>
 8004362:	89ab      	ldrh	r3, [r5, #12]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	d501      	bpl.n	800436c <_vfiprintf_r+0x34>
 8004368:	692b      	ldr	r3, [r5, #16]
 800436a:	b99b      	cbnz	r3, 8004394 <_vfiprintf_r+0x5c>
 800436c:	4629      	mov	r1, r5
 800436e:	4630      	mov	r0, r6
 8004370:	f7ff fdee 	bl	8003f50 <__swsetup_r>
 8004374:	b170      	cbz	r0, 8004394 <_vfiprintf_r+0x5c>
 8004376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004378:	07dc      	lsls	r4, r3, #31
 800437a:	d504      	bpl.n	8004386 <_vfiprintf_r+0x4e>
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	b01d      	add	sp, #116	@ 0x74
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	89ab      	ldrh	r3, [r5, #12]
 8004388:	0598      	lsls	r0, r3, #22
 800438a:	d4f7      	bmi.n	800437c <_vfiprintf_r+0x44>
 800438c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800438e:	f7ff feaf 	bl	80040f0 <__retarget_lock_release_recursive>
 8004392:	e7f3      	b.n	800437c <_vfiprintf_r+0x44>
 8004394:	2300      	movs	r3, #0
 8004396:	9309      	str	r3, [sp, #36]	@ 0x24
 8004398:	2320      	movs	r3, #32
 800439a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800439e:	f8cd 800c 	str.w	r8, [sp, #12]
 80043a2:	2330      	movs	r3, #48	@ 0x30
 80043a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004554 <_vfiprintf_r+0x21c>
 80043a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043ac:	f04f 0901 	mov.w	r9, #1
 80043b0:	4623      	mov	r3, r4
 80043b2:	469a      	mov	sl, r3
 80043b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b8:	b10a      	cbz	r2, 80043be <_vfiprintf_r+0x86>
 80043ba:	2a25      	cmp	r2, #37	@ 0x25
 80043bc:	d1f9      	bne.n	80043b2 <_vfiprintf_r+0x7a>
 80043be:	ebba 0b04 	subs.w	fp, sl, r4
 80043c2:	d00b      	beq.n	80043dc <_vfiprintf_r+0xa4>
 80043c4:	465b      	mov	r3, fp
 80043c6:	4622      	mov	r2, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	4630      	mov	r0, r6
 80043cc:	f7ff ffa1 	bl	8004312 <__sfputs_r>
 80043d0:	3001      	adds	r0, #1
 80043d2:	f000 80a7 	beq.w	8004524 <_vfiprintf_r+0x1ec>
 80043d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043d8:	445a      	add	r2, fp
 80043da:	9209      	str	r2, [sp, #36]	@ 0x24
 80043dc:	f89a 3000 	ldrb.w	r3, [sl]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 809f 	beq.w	8004524 <_vfiprintf_r+0x1ec>
 80043e6:	2300      	movs	r3, #0
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043f0:	f10a 0a01 	add.w	sl, sl, #1
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	9307      	str	r3, [sp, #28]
 80043f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80043fe:	4654      	mov	r4, sl
 8004400:	2205      	movs	r2, #5
 8004402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004406:	4853      	ldr	r0, [pc, #332]	@ (8004554 <_vfiprintf_r+0x21c>)
 8004408:	f7fb ff02 	bl	8000210 <memchr>
 800440c:	9a04      	ldr	r2, [sp, #16]
 800440e:	b9d8      	cbnz	r0, 8004448 <_vfiprintf_r+0x110>
 8004410:	06d1      	lsls	r1, r2, #27
 8004412:	bf44      	itt	mi
 8004414:	2320      	movmi	r3, #32
 8004416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800441a:	0713      	lsls	r3, r2, #28
 800441c:	bf44      	itt	mi
 800441e:	232b      	movmi	r3, #43	@ 0x2b
 8004420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004424:	f89a 3000 	ldrb.w	r3, [sl]
 8004428:	2b2a      	cmp	r3, #42	@ 0x2a
 800442a:	d015      	beq.n	8004458 <_vfiprintf_r+0x120>
 800442c:	9a07      	ldr	r2, [sp, #28]
 800442e:	4654      	mov	r4, sl
 8004430:	2000      	movs	r0, #0
 8004432:	f04f 0c0a 	mov.w	ip, #10
 8004436:	4621      	mov	r1, r4
 8004438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800443c:	3b30      	subs	r3, #48	@ 0x30
 800443e:	2b09      	cmp	r3, #9
 8004440:	d94b      	bls.n	80044da <_vfiprintf_r+0x1a2>
 8004442:	b1b0      	cbz	r0, 8004472 <_vfiprintf_r+0x13a>
 8004444:	9207      	str	r2, [sp, #28]
 8004446:	e014      	b.n	8004472 <_vfiprintf_r+0x13a>
 8004448:	eba0 0308 	sub.w	r3, r0, r8
 800444c:	fa09 f303 	lsl.w	r3, r9, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	46a2      	mov	sl, r4
 8004456:	e7d2      	b.n	80043fe <_vfiprintf_r+0xc6>
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	1d19      	adds	r1, r3, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	9103      	str	r1, [sp, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	bfbb      	ittet	lt
 8004464:	425b      	neglt	r3, r3
 8004466:	f042 0202 	orrlt.w	r2, r2, #2
 800446a:	9307      	strge	r3, [sp, #28]
 800446c:	9307      	strlt	r3, [sp, #28]
 800446e:	bfb8      	it	lt
 8004470:	9204      	strlt	r2, [sp, #16]
 8004472:	7823      	ldrb	r3, [r4, #0]
 8004474:	2b2e      	cmp	r3, #46	@ 0x2e
 8004476:	d10a      	bne.n	800448e <_vfiprintf_r+0x156>
 8004478:	7863      	ldrb	r3, [r4, #1]
 800447a:	2b2a      	cmp	r3, #42	@ 0x2a
 800447c:	d132      	bne.n	80044e4 <_vfiprintf_r+0x1ac>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	1d1a      	adds	r2, r3, #4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	9203      	str	r2, [sp, #12]
 8004486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800448a:	3402      	adds	r4, #2
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004564 <_vfiprintf_r+0x22c>
 8004492:	7821      	ldrb	r1, [r4, #0]
 8004494:	2203      	movs	r2, #3
 8004496:	4650      	mov	r0, sl
 8004498:	f7fb feba 	bl	8000210 <memchr>
 800449c:	b138      	cbz	r0, 80044ae <_vfiprintf_r+0x176>
 800449e:	9b04      	ldr	r3, [sp, #16]
 80044a0:	eba0 000a 	sub.w	r0, r0, sl
 80044a4:	2240      	movs	r2, #64	@ 0x40
 80044a6:	4082      	lsls	r2, r0
 80044a8:	4313      	orrs	r3, r2
 80044aa:	3401      	adds	r4, #1
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b2:	4829      	ldr	r0, [pc, #164]	@ (8004558 <_vfiprintf_r+0x220>)
 80044b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044b8:	2206      	movs	r2, #6
 80044ba:	f7fb fea9 	bl	8000210 <memchr>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d03f      	beq.n	8004542 <_vfiprintf_r+0x20a>
 80044c2:	4b26      	ldr	r3, [pc, #152]	@ (800455c <_vfiprintf_r+0x224>)
 80044c4:	bb1b      	cbnz	r3, 800450e <_vfiprintf_r+0x1d6>
 80044c6:	9b03      	ldr	r3, [sp, #12]
 80044c8:	3307      	adds	r3, #7
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	3308      	adds	r3, #8
 80044d0:	9303      	str	r3, [sp, #12]
 80044d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d4:	443b      	add	r3, r7
 80044d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d8:	e76a      	b.n	80043b0 <_vfiprintf_r+0x78>
 80044da:	fb0c 3202 	mla	r2, ip, r2, r3
 80044de:	460c      	mov	r4, r1
 80044e0:	2001      	movs	r0, #1
 80044e2:	e7a8      	b.n	8004436 <_vfiprintf_r+0xfe>
 80044e4:	2300      	movs	r3, #0
 80044e6:	3401      	adds	r4, #1
 80044e8:	9305      	str	r3, [sp, #20]
 80044ea:	4619      	mov	r1, r3
 80044ec:	f04f 0c0a 	mov.w	ip, #10
 80044f0:	4620      	mov	r0, r4
 80044f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f6:	3a30      	subs	r2, #48	@ 0x30
 80044f8:	2a09      	cmp	r2, #9
 80044fa:	d903      	bls.n	8004504 <_vfiprintf_r+0x1cc>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0c6      	beq.n	800448e <_vfiprintf_r+0x156>
 8004500:	9105      	str	r1, [sp, #20]
 8004502:	e7c4      	b.n	800448e <_vfiprintf_r+0x156>
 8004504:	fb0c 2101 	mla	r1, ip, r1, r2
 8004508:	4604      	mov	r4, r0
 800450a:	2301      	movs	r3, #1
 800450c:	e7f0      	b.n	80044f0 <_vfiprintf_r+0x1b8>
 800450e:	ab03      	add	r3, sp, #12
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	462a      	mov	r2, r5
 8004514:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <_vfiprintf_r+0x228>)
 8004516:	a904      	add	r1, sp, #16
 8004518:	4630      	mov	r0, r6
 800451a:	f3af 8000 	nop.w
 800451e:	4607      	mov	r7, r0
 8004520:	1c78      	adds	r0, r7, #1
 8004522:	d1d6      	bne.n	80044d2 <_vfiprintf_r+0x19a>
 8004524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004526:	07d9      	lsls	r1, r3, #31
 8004528:	d405      	bmi.n	8004536 <_vfiprintf_r+0x1fe>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	059a      	lsls	r2, r3, #22
 800452e:	d402      	bmi.n	8004536 <_vfiprintf_r+0x1fe>
 8004530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004532:	f7ff fddd 	bl	80040f0 <__retarget_lock_release_recursive>
 8004536:	89ab      	ldrh	r3, [r5, #12]
 8004538:	065b      	lsls	r3, r3, #25
 800453a:	f53f af1f 	bmi.w	800437c <_vfiprintf_r+0x44>
 800453e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004540:	e71e      	b.n	8004380 <_vfiprintf_r+0x48>
 8004542:	ab03      	add	r3, sp, #12
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	462a      	mov	r2, r5
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <_vfiprintf_r+0x228>)
 800454a:	a904      	add	r1, sp, #16
 800454c:	4630      	mov	r0, r6
 800454e:	f000 f879 	bl	8004644 <_printf_i>
 8004552:	e7e4      	b.n	800451e <_vfiprintf_r+0x1e6>
 8004554:	08004ccc 	.word	0x08004ccc
 8004558:	08004cd6 	.word	0x08004cd6
 800455c:	00000000 	.word	0x00000000
 8004560:	08004313 	.word	0x08004313
 8004564:	08004cd2 	.word	0x08004cd2

08004568 <_printf_common>:
 8004568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	4616      	mov	r6, r2
 800456e:	4698      	mov	r8, r3
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004578:	4293      	cmp	r3, r2
 800457a:	bfb8      	it	lt
 800457c:	4613      	movlt	r3, r2
 800457e:	6033      	str	r3, [r6, #0]
 8004580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004584:	4607      	mov	r7, r0
 8004586:	460c      	mov	r4, r1
 8004588:	b10a      	cbz	r2, 800458e <_printf_common+0x26>
 800458a:	3301      	adds	r3, #1
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	bf42      	ittt	mi
 8004594:	6833      	ldrmi	r3, [r6, #0]
 8004596:	3302      	addmi	r3, #2
 8004598:	6033      	strmi	r3, [r6, #0]
 800459a:	6825      	ldr	r5, [r4, #0]
 800459c:	f015 0506 	ands.w	r5, r5, #6
 80045a0:	d106      	bne.n	80045b0 <_printf_common+0x48>
 80045a2:	f104 0a19 	add.w	sl, r4, #25
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	6832      	ldr	r2, [r6, #0]
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dc26      	bgt.n	80045fe <_printf_common+0x96>
 80045b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	3b00      	subs	r3, #0
 80045b8:	bf18      	it	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	0692      	lsls	r2, r2, #26
 80045be:	d42b      	bmi.n	8004618 <_printf_common+0xb0>
 80045c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045c4:	4641      	mov	r1, r8
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c8      	blx	r9
 80045ca:	3001      	adds	r0, #1
 80045cc:	d01e      	beq.n	800460c <_printf_common+0xa4>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf02      	ittt	eq
 80045da:	68e5      	ldreq	r5, [r4, #12]
 80045dc:	6833      	ldreq	r3, [r6, #0]
 80045de:	1aed      	subeq	r5, r5, r3
 80045e0:	68a3      	ldr	r3, [r4, #8]
 80045e2:	bf0c      	ite	eq
 80045e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e8:	2500      	movne	r5, #0
 80045ea:	4293      	cmp	r3, r2
 80045ec:	bfc4      	itt	gt
 80045ee:	1a9b      	subgt	r3, r3, r2
 80045f0:	18ed      	addgt	r5, r5, r3
 80045f2:	2600      	movs	r6, #0
 80045f4:	341a      	adds	r4, #26
 80045f6:	42b5      	cmp	r5, r6
 80045f8:	d11a      	bne.n	8004630 <_printf_common+0xc8>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e008      	b.n	8004610 <_printf_common+0xa8>
 80045fe:	2301      	movs	r3, #1
 8004600:	4652      	mov	r2, sl
 8004602:	4641      	mov	r1, r8
 8004604:	4638      	mov	r0, r7
 8004606:	47c8      	blx	r9
 8004608:	3001      	adds	r0, #1
 800460a:	d103      	bne.n	8004614 <_printf_common+0xac>
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004614:	3501      	adds	r5, #1
 8004616:	e7c6      	b.n	80045a6 <_printf_common+0x3e>
 8004618:	18e1      	adds	r1, r4, r3
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	2030      	movs	r0, #48	@ 0x30
 800461e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004622:	4422      	add	r2, r4
 8004624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800462c:	3302      	adds	r3, #2
 800462e:	e7c7      	b.n	80045c0 <_printf_common+0x58>
 8004630:	2301      	movs	r3, #1
 8004632:	4622      	mov	r2, r4
 8004634:	4641      	mov	r1, r8
 8004636:	4638      	mov	r0, r7
 8004638:	47c8      	blx	r9
 800463a:	3001      	adds	r0, #1
 800463c:	d0e6      	beq.n	800460c <_printf_common+0xa4>
 800463e:	3601      	adds	r6, #1
 8004640:	e7d9      	b.n	80045f6 <_printf_common+0x8e>
	...

08004644 <_printf_i>:
 8004644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	7e0f      	ldrb	r7, [r1, #24]
 800464a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800464c:	2f78      	cmp	r7, #120	@ 0x78
 800464e:	4691      	mov	r9, r2
 8004650:	4680      	mov	r8, r0
 8004652:	460c      	mov	r4, r1
 8004654:	469a      	mov	sl, r3
 8004656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800465a:	d807      	bhi.n	800466c <_printf_i+0x28>
 800465c:	2f62      	cmp	r7, #98	@ 0x62
 800465e:	d80a      	bhi.n	8004676 <_printf_i+0x32>
 8004660:	2f00      	cmp	r7, #0
 8004662:	f000 80d2 	beq.w	800480a <_printf_i+0x1c6>
 8004666:	2f58      	cmp	r7, #88	@ 0x58
 8004668:	f000 80b9 	beq.w	80047de <_printf_i+0x19a>
 800466c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004674:	e03a      	b.n	80046ec <_printf_i+0xa8>
 8004676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800467a:	2b15      	cmp	r3, #21
 800467c:	d8f6      	bhi.n	800466c <_printf_i+0x28>
 800467e:	a101      	add	r1, pc, #4	@ (adr r1, 8004684 <_printf_i+0x40>)
 8004680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004684:	080046dd 	.word	0x080046dd
 8004688:	080046f1 	.word	0x080046f1
 800468c:	0800466d 	.word	0x0800466d
 8004690:	0800466d 	.word	0x0800466d
 8004694:	0800466d 	.word	0x0800466d
 8004698:	0800466d 	.word	0x0800466d
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	0800466d 	.word	0x0800466d
 80046a4:	0800466d 	.word	0x0800466d
 80046a8:	0800466d 	.word	0x0800466d
 80046ac:	0800466d 	.word	0x0800466d
 80046b0:	080047f1 	.word	0x080047f1
 80046b4:	0800471b 	.word	0x0800471b
 80046b8:	080047ab 	.word	0x080047ab
 80046bc:	0800466d 	.word	0x0800466d
 80046c0:	0800466d 	.word	0x0800466d
 80046c4:	08004813 	.word	0x08004813
 80046c8:	0800466d 	.word	0x0800466d
 80046cc:	0800471b 	.word	0x0800471b
 80046d0:	0800466d 	.word	0x0800466d
 80046d4:	0800466d 	.word	0x0800466d
 80046d8:	080047b3 	.word	0x080047b3
 80046dc:	6833      	ldr	r3, [r6, #0]
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6032      	str	r2, [r6, #0]
 80046e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046ec:	2301      	movs	r3, #1
 80046ee:	e09d      	b.n	800482c <_printf_i+0x1e8>
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	1d19      	adds	r1, r3, #4
 80046f6:	6031      	str	r1, [r6, #0]
 80046f8:	0606      	lsls	r6, r0, #24
 80046fa:	d501      	bpl.n	8004700 <_printf_i+0xbc>
 80046fc:	681d      	ldr	r5, [r3, #0]
 80046fe:	e003      	b.n	8004708 <_printf_i+0xc4>
 8004700:	0645      	lsls	r5, r0, #25
 8004702:	d5fb      	bpl.n	80046fc <_printf_i+0xb8>
 8004704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004708:	2d00      	cmp	r5, #0
 800470a:	da03      	bge.n	8004714 <_printf_i+0xd0>
 800470c:	232d      	movs	r3, #45	@ 0x2d
 800470e:	426d      	negs	r5, r5
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004714:	4859      	ldr	r0, [pc, #356]	@ (800487c <_printf_i+0x238>)
 8004716:	230a      	movs	r3, #10
 8004718:	e011      	b.n	800473e <_printf_i+0xfa>
 800471a:	6821      	ldr	r1, [r4, #0]
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	0608      	lsls	r0, r1, #24
 8004720:	f853 5b04 	ldr.w	r5, [r3], #4
 8004724:	d402      	bmi.n	800472c <_printf_i+0xe8>
 8004726:	0649      	lsls	r1, r1, #25
 8004728:	bf48      	it	mi
 800472a:	b2ad      	uxthmi	r5, r5
 800472c:	2f6f      	cmp	r7, #111	@ 0x6f
 800472e:	4853      	ldr	r0, [pc, #332]	@ (800487c <_printf_i+0x238>)
 8004730:	6033      	str	r3, [r6, #0]
 8004732:	bf14      	ite	ne
 8004734:	230a      	movne	r3, #10
 8004736:	2308      	moveq	r3, #8
 8004738:	2100      	movs	r1, #0
 800473a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800473e:	6866      	ldr	r6, [r4, #4]
 8004740:	60a6      	str	r6, [r4, #8]
 8004742:	2e00      	cmp	r6, #0
 8004744:	bfa2      	ittt	ge
 8004746:	6821      	ldrge	r1, [r4, #0]
 8004748:	f021 0104 	bicge.w	r1, r1, #4
 800474c:	6021      	strge	r1, [r4, #0]
 800474e:	b90d      	cbnz	r5, 8004754 <_printf_i+0x110>
 8004750:	2e00      	cmp	r6, #0
 8004752:	d04b      	beq.n	80047ec <_printf_i+0x1a8>
 8004754:	4616      	mov	r6, r2
 8004756:	fbb5 f1f3 	udiv	r1, r5, r3
 800475a:	fb03 5711 	mls	r7, r3, r1, r5
 800475e:	5dc7      	ldrb	r7, [r0, r7]
 8004760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004764:	462f      	mov	r7, r5
 8004766:	42bb      	cmp	r3, r7
 8004768:	460d      	mov	r5, r1
 800476a:	d9f4      	bls.n	8004756 <_printf_i+0x112>
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10b      	bne.n	8004788 <_printf_i+0x144>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	07df      	lsls	r7, r3, #31
 8004774:	d508      	bpl.n	8004788 <_printf_i+0x144>
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	6861      	ldr	r1, [r4, #4]
 800477a:	4299      	cmp	r1, r3
 800477c:	bfde      	ittt	le
 800477e:	2330      	movle	r3, #48	@ 0x30
 8004780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004788:	1b92      	subs	r2, r2, r6
 800478a:	6122      	str	r2, [r4, #16]
 800478c:	f8cd a000 	str.w	sl, [sp]
 8004790:	464b      	mov	r3, r9
 8004792:	aa03      	add	r2, sp, #12
 8004794:	4621      	mov	r1, r4
 8004796:	4640      	mov	r0, r8
 8004798:	f7ff fee6 	bl	8004568 <_printf_common>
 800479c:	3001      	adds	r0, #1
 800479e:	d14a      	bne.n	8004836 <_printf_i+0x1f2>
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	b004      	add	sp, #16
 80047a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	f043 0320 	orr.w	r3, r3, #32
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	4833      	ldr	r0, [pc, #204]	@ (8004880 <_printf_i+0x23c>)
 80047b4:	2778      	movs	r7, #120	@ 0x78
 80047b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	6831      	ldr	r1, [r6, #0]
 80047be:	061f      	lsls	r7, r3, #24
 80047c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80047c4:	d402      	bmi.n	80047cc <_printf_i+0x188>
 80047c6:	065f      	lsls	r7, r3, #25
 80047c8:	bf48      	it	mi
 80047ca:	b2ad      	uxthmi	r5, r5
 80047cc:	6031      	str	r1, [r6, #0]
 80047ce:	07d9      	lsls	r1, r3, #31
 80047d0:	bf44      	itt	mi
 80047d2:	f043 0320 	orrmi.w	r3, r3, #32
 80047d6:	6023      	strmi	r3, [r4, #0]
 80047d8:	b11d      	cbz	r5, 80047e2 <_printf_i+0x19e>
 80047da:	2310      	movs	r3, #16
 80047dc:	e7ac      	b.n	8004738 <_printf_i+0xf4>
 80047de:	4827      	ldr	r0, [pc, #156]	@ (800487c <_printf_i+0x238>)
 80047e0:	e7e9      	b.n	80047b6 <_printf_i+0x172>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f023 0320 	bic.w	r3, r3, #32
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	e7f6      	b.n	80047da <_printf_i+0x196>
 80047ec:	4616      	mov	r6, r2
 80047ee:	e7bd      	b.n	800476c <_printf_i+0x128>
 80047f0:	6833      	ldr	r3, [r6, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	6961      	ldr	r1, [r4, #20]
 80047f6:	1d18      	adds	r0, r3, #4
 80047f8:	6030      	str	r0, [r6, #0]
 80047fa:	062e      	lsls	r6, r5, #24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	d501      	bpl.n	8004804 <_printf_i+0x1c0>
 8004800:	6019      	str	r1, [r3, #0]
 8004802:	e002      	b.n	800480a <_printf_i+0x1c6>
 8004804:	0668      	lsls	r0, r5, #25
 8004806:	d5fb      	bpl.n	8004800 <_printf_i+0x1bc>
 8004808:	8019      	strh	r1, [r3, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	4616      	mov	r6, r2
 8004810:	e7bc      	b.n	800478c <_printf_i+0x148>
 8004812:	6833      	ldr	r3, [r6, #0]
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	6032      	str	r2, [r6, #0]
 8004818:	681e      	ldr	r6, [r3, #0]
 800481a:	6862      	ldr	r2, [r4, #4]
 800481c:	2100      	movs	r1, #0
 800481e:	4630      	mov	r0, r6
 8004820:	f7fb fcf6 	bl	8000210 <memchr>
 8004824:	b108      	cbz	r0, 800482a <_printf_i+0x1e6>
 8004826:	1b80      	subs	r0, r0, r6
 8004828:	6060      	str	r0, [r4, #4]
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	6123      	str	r3, [r4, #16]
 800482e:	2300      	movs	r3, #0
 8004830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004834:	e7aa      	b.n	800478c <_printf_i+0x148>
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	4632      	mov	r2, r6
 800483a:	4649      	mov	r1, r9
 800483c:	4640      	mov	r0, r8
 800483e:	47d0      	blx	sl
 8004840:	3001      	adds	r0, #1
 8004842:	d0ad      	beq.n	80047a0 <_printf_i+0x15c>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079b      	lsls	r3, r3, #30
 8004848:	d413      	bmi.n	8004872 <_printf_i+0x22e>
 800484a:	68e0      	ldr	r0, [r4, #12]
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	4298      	cmp	r0, r3
 8004850:	bfb8      	it	lt
 8004852:	4618      	movlt	r0, r3
 8004854:	e7a6      	b.n	80047a4 <_printf_i+0x160>
 8004856:	2301      	movs	r3, #1
 8004858:	4632      	mov	r2, r6
 800485a:	4649      	mov	r1, r9
 800485c:	4640      	mov	r0, r8
 800485e:	47d0      	blx	sl
 8004860:	3001      	adds	r0, #1
 8004862:	d09d      	beq.n	80047a0 <_printf_i+0x15c>
 8004864:	3501      	adds	r5, #1
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	9903      	ldr	r1, [sp, #12]
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	42ab      	cmp	r3, r5
 800486e:	dcf2      	bgt.n	8004856 <_printf_i+0x212>
 8004870:	e7eb      	b.n	800484a <_printf_i+0x206>
 8004872:	2500      	movs	r5, #0
 8004874:	f104 0619 	add.w	r6, r4, #25
 8004878:	e7f5      	b.n	8004866 <_printf_i+0x222>
 800487a:	bf00      	nop
 800487c:	08004cdd 	.word	0x08004cdd
 8004880:	08004cee 	.word	0x08004cee

08004884 <__sflush_r>:
 8004884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	0716      	lsls	r6, r2, #28
 800488e:	4605      	mov	r5, r0
 8004890:	460c      	mov	r4, r1
 8004892:	d454      	bmi.n	800493e <__sflush_r+0xba>
 8004894:	684b      	ldr	r3, [r1, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	dc02      	bgt.n	80048a0 <__sflush_r+0x1c>
 800489a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	dd48      	ble.n	8004932 <__sflush_r+0xae>
 80048a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	d045      	beq.n	8004932 <__sflush_r+0xae>
 80048a6:	2300      	movs	r3, #0
 80048a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048ac:	682f      	ldr	r7, [r5, #0]
 80048ae:	6a21      	ldr	r1, [r4, #32]
 80048b0:	602b      	str	r3, [r5, #0]
 80048b2:	d030      	beq.n	8004916 <__sflush_r+0x92>
 80048b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	0759      	lsls	r1, r3, #29
 80048ba:	d505      	bpl.n	80048c8 <__sflush_r+0x44>
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048c2:	b10b      	cbz	r3, 80048c8 <__sflush_r+0x44>
 80048c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048cc:	6a21      	ldr	r1, [r4, #32]
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b0      	blx	r6
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	d106      	bne.n	80048e6 <__sflush_r+0x62>
 80048d8:	6829      	ldr	r1, [r5, #0]
 80048da:	291d      	cmp	r1, #29
 80048dc:	d82b      	bhi.n	8004936 <__sflush_r+0xb2>
 80048de:	4a2a      	ldr	r2, [pc, #168]	@ (8004988 <__sflush_r+0x104>)
 80048e0:	410a      	asrs	r2, r1
 80048e2:	07d6      	lsls	r6, r2, #31
 80048e4:	d427      	bmi.n	8004936 <__sflush_r+0xb2>
 80048e6:	2200      	movs	r2, #0
 80048e8:	6062      	str	r2, [r4, #4]
 80048ea:	04d9      	lsls	r1, r3, #19
 80048ec:	6922      	ldr	r2, [r4, #16]
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	d504      	bpl.n	80048fc <__sflush_r+0x78>
 80048f2:	1c42      	adds	r2, r0, #1
 80048f4:	d101      	bne.n	80048fa <__sflush_r+0x76>
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	b903      	cbnz	r3, 80048fc <__sflush_r+0x78>
 80048fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80048fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048fe:	602f      	str	r7, [r5, #0]
 8004900:	b1b9      	cbz	r1, 8004932 <__sflush_r+0xae>
 8004902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004906:	4299      	cmp	r1, r3
 8004908:	d002      	beq.n	8004910 <__sflush_r+0x8c>
 800490a:	4628      	mov	r0, r5
 800490c:	f7ff fbf2 	bl	80040f4 <_free_r>
 8004910:	2300      	movs	r3, #0
 8004912:	6363      	str	r3, [r4, #52]	@ 0x34
 8004914:	e00d      	b.n	8004932 <__sflush_r+0xae>
 8004916:	2301      	movs	r3, #1
 8004918:	4628      	mov	r0, r5
 800491a:	47b0      	blx	r6
 800491c:	4602      	mov	r2, r0
 800491e:	1c50      	adds	r0, r2, #1
 8004920:	d1c9      	bne.n	80048b6 <__sflush_r+0x32>
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0c6      	beq.n	80048b6 <__sflush_r+0x32>
 8004928:	2b1d      	cmp	r3, #29
 800492a:	d001      	beq.n	8004930 <__sflush_r+0xac>
 800492c:	2b16      	cmp	r3, #22
 800492e:	d11e      	bne.n	800496e <__sflush_r+0xea>
 8004930:	602f      	str	r7, [r5, #0]
 8004932:	2000      	movs	r0, #0
 8004934:	e022      	b.n	800497c <__sflush_r+0xf8>
 8004936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800493a:	b21b      	sxth	r3, r3
 800493c:	e01b      	b.n	8004976 <__sflush_r+0xf2>
 800493e:	690f      	ldr	r7, [r1, #16]
 8004940:	2f00      	cmp	r7, #0
 8004942:	d0f6      	beq.n	8004932 <__sflush_r+0xae>
 8004944:	0793      	lsls	r3, r2, #30
 8004946:	680e      	ldr	r6, [r1, #0]
 8004948:	bf08      	it	eq
 800494a:	694b      	ldreq	r3, [r1, #20]
 800494c:	600f      	str	r7, [r1, #0]
 800494e:	bf18      	it	ne
 8004950:	2300      	movne	r3, #0
 8004952:	eba6 0807 	sub.w	r8, r6, r7
 8004956:	608b      	str	r3, [r1, #8]
 8004958:	f1b8 0f00 	cmp.w	r8, #0
 800495c:	dde9      	ble.n	8004932 <__sflush_r+0xae>
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004962:	4643      	mov	r3, r8
 8004964:	463a      	mov	r2, r7
 8004966:	4628      	mov	r0, r5
 8004968:	47b0      	blx	r6
 800496a:	2800      	cmp	r0, #0
 800496c:	dc08      	bgt.n	8004980 <__sflush_r+0xfc>
 800496e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004980:	4407      	add	r7, r0
 8004982:	eba8 0800 	sub.w	r8, r8, r0
 8004986:	e7e7      	b.n	8004958 <__sflush_r+0xd4>
 8004988:	dfbffffe 	.word	0xdfbffffe

0800498c <_fflush_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	4605      	mov	r5, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b913      	cbnz	r3, 800499c <_fflush_r+0x10>
 8004996:	2500      	movs	r5, #0
 8004998:	4628      	mov	r0, r5
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	b118      	cbz	r0, 80049a6 <_fflush_r+0x1a>
 800499e:	6a03      	ldr	r3, [r0, #32]
 80049a0:	b90b      	cbnz	r3, 80049a6 <_fflush_r+0x1a>
 80049a2:	f7ff f9ad 	bl	8003d00 <__sinit>
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f3      	beq.n	8004996 <_fflush_r+0xa>
 80049ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d404      	bmi.n	80049be <_fflush_r+0x32>
 80049b4:	0599      	lsls	r1, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fflush_r+0x32>
 80049b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ba:	f7ff fb98 	bl	80040ee <__retarget_lock_acquire_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7ff ff5f 	bl	8004884 <__sflush_r>
 80049c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049c8:	07da      	lsls	r2, r3, #31
 80049ca:	4605      	mov	r5, r0
 80049cc:	d4e4      	bmi.n	8004998 <_fflush_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d4e1      	bmi.n	8004998 <_fflush_r+0xc>
 80049d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049d6:	f7ff fb8b 	bl	80040f0 <__retarget_lock_release_recursive>
 80049da:	e7dd      	b.n	8004998 <_fflush_r+0xc>

080049dc <__swhatbuf_r>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	460c      	mov	r4, r1
 80049e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e4:	2900      	cmp	r1, #0
 80049e6:	b096      	sub	sp, #88	@ 0x58
 80049e8:	4615      	mov	r5, r2
 80049ea:	461e      	mov	r6, r3
 80049ec:	da0d      	bge.n	8004a0a <__swhatbuf_r+0x2e>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	bf14      	ite	ne
 80049fa:	2340      	movne	r3, #64	@ 0x40
 80049fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a00:	2000      	movs	r0, #0
 8004a02:	6031      	str	r1, [r6, #0]
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	b016      	add	sp, #88	@ 0x58
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
 8004a0a:	466a      	mov	r2, sp
 8004a0c:	f000 f848 	bl	8004aa0 <_fstat_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	dbec      	blt.n	80049ee <__swhatbuf_r+0x12>
 8004a14:	9901      	ldr	r1, [sp, #4]
 8004a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a1e:	4259      	negs	r1, r3
 8004a20:	4159      	adcs	r1, r3
 8004a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a26:	e7eb      	b.n	8004a00 <__swhatbuf_r+0x24>

08004a28 <__smakebuf_r>:
 8004a28:	898b      	ldrh	r3, [r1, #12]
 8004a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a2c:	079d      	lsls	r5, r3, #30
 8004a2e:	4606      	mov	r6, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	d507      	bpl.n	8004a44 <__smakebuf_r+0x1c>
 8004a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	6163      	str	r3, [r4, #20]
 8004a40:	b003      	add	sp, #12
 8004a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a44:	ab01      	add	r3, sp, #4
 8004a46:	466a      	mov	r2, sp
 8004a48:	f7ff ffc8 	bl	80049dc <__swhatbuf_r>
 8004a4c:	9f00      	ldr	r7, [sp, #0]
 8004a4e:	4605      	mov	r5, r0
 8004a50:	4639      	mov	r1, r7
 8004a52:	4630      	mov	r0, r6
 8004a54:	f7ff fbba 	bl	80041cc <_malloc_r>
 8004a58:	b948      	cbnz	r0, 8004a6e <__smakebuf_r+0x46>
 8004a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5e:	059a      	lsls	r2, r3, #22
 8004a60:	d4ee      	bmi.n	8004a40 <__smakebuf_r+0x18>
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	f043 0302 	orr.w	r3, r3, #2
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	e7e2      	b.n	8004a34 <__smakebuf_r+0xc>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	6020      	str	r0, [r4, #0]
 8004a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a7e:	b15b      	cbz	r3, 8004a98 <__smakebuf_r+0x70>
 8004a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a84:	4630      	mov	r0, r6
 8004a86:	f000 f81d 	bl	8004ac4 <_isatty_r>
 8004a8a:	b128      	cbz	r0, 8004a98 <__smakebuf_r+0x70>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	431d      	orrs	r5, r3
 8004a9c:	81a5      	strh	r5, [r4, #12]
 8004a9e:	e7cf      	b.n	8004a40 <__smakebuf_r+0x18>

08004aa0 <_fstat_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	@ (8004ac0 <_fstat_r+0x20>)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	f7fc f8e5 	bl	8000c7c <_fstat>
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	d102      	bne.n	8004abc <_fstat_r+0x1c>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	b103      	cbz	r3, 8004abc <_fstat_r+0x1c>
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	bd38      	pop	{r3, r4, r5, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000304 	.word	0x20000304

08004ac4 <_isatty_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d06      	ldr	r5, [pc, #24]	@ (8004ae0 <_isatty_r+0x1c>)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	f7fc f8e4 	bl	8000c9c <_isatty>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_isatty_r+0x1a>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_isatty_r+0x1a>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000304 	.word	0x20000304

08004ae4 <_sbrk_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d06      	ldr	r5, [pc, #24]	@ (8004b00 <_sbrk_r+0x1c>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fc f8ec 	bl	8000ccc <_sbrk>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_sbrk_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_sbrk_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	20000304 	.word	0x20000304

08004b04 <_init>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr

08004b10 <_fini>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr
