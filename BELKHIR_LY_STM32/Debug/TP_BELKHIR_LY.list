
TP_BELKHIR_LY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006dc8  08006dc8  00007dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  000090b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800721c  0800721c  0000821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007224  08007224  000090b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00008224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800722c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200000b0  080072dc  000090b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080072dc  00009420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104fa  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea4  00000000  00000000  000195da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa6  00000000  00000000  0001d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f45  00000000  00000000  0001dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014558  00000000  00000000  00041c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa78  00000000  00000000  000561ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125c23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004428  00000000  00000000  00125c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006db0 	.word	0x08006db0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08006db0 	.word	0x08006db0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setK>:

int32_t coefficientK=1 ;
int32_t Angle ;

void setK(int32_t k)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    coefficientK = k ;
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <setK+0x1c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000

080005f0 <CAN_SendMessage>:
{
    return Angle ;
}


static void CAN_SendMessage(CAN_TxHeaderTypeDef pHeader, uint8_t *data , uint32_t pTxMailbox ) {
 80005f0:	b084      	sub	sp, #16
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	f107 0c08 	add.w	ip, r7, #8
 80005fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &pTxMailbox) != HAL_OK) {
 80005fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000602:	6a3a      	ldr	r2, [r7, #32]
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <CAN_SendMessage+0x2c>)
 800060a:	f001 fb10 	bl	8001c2e <HAL_CAN_AddTxMessage>
        //printf("Erreur d'envoi CAN pour l'ID: 0x%lX\r\n", pHeader.StdId);
    } else {
       // printf("Message CAN envoyé, ID: 0x%lX, Data: 0x%X 0x%X\r\n", pHeader.StdId, data[0], data[1]);
    }
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000616:	b004      	add	sp, #16
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200001c0 	.word	0x200001c0

08000620 <setMotorAngle>:
    CAN_SendMessage(pHeader , data ,pMailbox ) ;

}

void setMotorAngle( uint8_t angle , uint8_t sign)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef pHeader ;
    pHeader.IDE = CAN_ID_STD;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
	pHeader.RTR = CAN_RTR_DATA;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
    pHeader.StdId = AngleID;
 8000638:	2361      	movs	r3, #97	@ 0x61
 800063a:	60fb      	str	r3, [r7, #12]
    pHeader.DLC = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
    uint32_t pMailbox = 0 ;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t data[] = {angle , sign} ;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	723b      	strb	r3, [r7, #8]
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	727b      	strb	r3, [r7, #9]
    CAN_SendMessage(pHeader , data ,pMailbox ) ;
 800064c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064e:	9303      	str	r3, [sp, #12]
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	466a      	mov	r2, sp
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000660:	e882 0003 	stmia.w	r2, {r0, r1}
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800066a:	f7ff ffc1 	bl	80005f0 <CAN_SendMessage>
    if (sign==0x00)
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d103      	bne.n	800067c <setMotorAngle+0x5c>
    {
        Angle = angle ;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4a05      	ldr	r2, [pc, #20]	@ (800068c <setMotorAngle+0x6c>)
 8000678:	6013      	str	r3, [r2, #0]
    {
        Angle = -angle ;
    }


}
 800067a:	e003      	b.n	8000684 <setMotorAngle+0x64>
        Angle = -angle ;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	425b      	negs	r3, r3
 8000680:	4a02      	ldr	r2, [pc, #8]	@ (800068c <setMotorAngle+0x6c>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000cc 	.word	0x200000cc

08000690 <setPositionTo0>:

void setPositionTo0(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af04      	add	r7, sp, #16
    CAN_TxHeaderTypeDef pHeader ;
    pHeader.IDE = CAN_ID_STD;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	pHeader.RTR = CAN_RTR_DATA;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
    pHeader.StdId = setTo0;
 800069e:	2362      	movs	r3, #98	@ 0x62
 80006a0:	607b      	str	r3, [r7, #4]
    pHeader.DLC = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
    int32_t pMailbox = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    CAN_SendMessage(pHeader , NULL ,pMailbox ) ;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	9303      	str	r3, [sp, #12]
 80006ae:	2300      	movs	r3, #0
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	466a      	mov	r2, sp
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c4:	f7ff ff94 	bl	80005f0 <CAN_SendMessage>

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <moteurRun>:

void moteurRun(void)

{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	int Temp0 = 25 ;
 80006d6:	2319      	movs	r3, #25
 80006d8:	607b      	str	r3, [r7, #4]
	uint8_t angle = ((Temp0-BMP280_ReadTemperature()/100)*coefficientK) ;
 80006da:	f000 fbb1 	bl	8000e40 <BMP280_ReadTemperature>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <moteurRun+0x40>)
 80006e2:	fb82 1203 	smull	r1, r2, r2, r3
 80006e6:	1152      	asrs	r2, r2, #5
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1a9a      	subs	r2, r3, r2
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <moteurRun+0x44>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	fb12 f303 	smulbb	r3, r2, r3
 80006fc:	70fb      	strb	r3, [r7, #3]
    setMotorAngle( angle , 0) ;
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff8c 	bl	8000620 <setMotorAngle>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	51eb851f 	.word	0x51eb851f
 8000714:	20000000 	.word	0x20000000

08000718 <uart_write>:
uint8_t start[] = "\r\n Communication entre STM32 et Raspberry PI\r\n ";
static int uartRxReceived = 0; // Flag pour indiquer la réception d'un caractère

// Fonction pour écrire une chaîne via UART
static int uart_write(char *s, uint16_t size)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&UART_PI, (uint8_t *)s, size, HAL_MAX_DELAY);
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4803      	ldr	r0, [pc, #12]	@ (800073c <uart_write+0x24>)
 800072e:	f003 fd09 	bl	8004144 <HAL_UART_Transmit>
    return size;
 8000732:	887b      	ldrh	r3, [r7, #2]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000288 	.word	0x20000288

08000740 <PI_Init>:

// Initialisation de la communication
void PI_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&UART_PI, (uint8_t *)uartRxBuffer, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	490e      	ldr	r1, [pc, #56]	@ (8000780 <PI_Init+0x40>)
 8000748:	480e      	ldr	r0, [pc, #56]	@ (8000784 <PI_Init+0x44>)
 800074a:	f003 fd86 	bl	800425a <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&UART_PI, start, strlen((char *)start), HAL_MAX_DELAY);
 800074e:	480e      	ldr	r0, [pc, #56]	@ (8000788 <PI_Init+0x48>)
 8000750:	f7ff fd68 	bl	8000224 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	490a      	ldr	r1, [pc, #40]	@ (8000788 <PI_Init+0x48>)
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <PI_Init+0x44>)
 8000760:	f003 fcf0 	bl	8004144 <HAL_UART_Transmit>
    HAL_UART_Transmit(&UART_PI, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <PI_Init+0x4c>)
 8000766:	f7ff fd5d 	bl	8000224 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	4906      	ldr	r1, [pc, #24]	@ (800078c <PI_Init+0x4c>)
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <PI_Init+0x44>)
 8000776:	f003 fce5 	bl	8004144 <HAL_UART_Transmit>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000134 	.word	0x20000134
 8000784:	20000288 	.word	0x20000288
 8000788:	20000010 	.word	0x20000010
 800078c:	20000004 	.word	0x20000004

08000790 <PI_GetCommand>:

// Fonction pour traiter les commandes reçues via UART
static void PI_GetCommand(char *buffer)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b094      	sub	sp, #80	@ 0x50
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
    // Vérifiez la commande et construisez la réponse sans afficher la commande
    if (strcmp(buffer, "GET_T") == 0)
 8000798:	49b9      	ldr	r1, [pc, #740]	@ (8000a80 <PI_GetCommand+0x2f0>)
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fd38 	bl	8000210 <strcmp>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d159      	bne.n	800085a <PI_GetCommand+0xca>
    {
        int32_t tempNc = BMP280_ReadTemperature();
 80007a6:	f000 fb4b 	bl	8000e40 <BMP280_ReadTemperature>
 80007aa:	61b8      	str	r0, [r7, #24]
        int32_t temp = BMP280_ConvertTemperature(tempNc);
 80007ac:	69b8      	ldr	r0, [r7, #24]
 80007ae:	f000 fb65 	bl	8000e7c <BMP280_ConvertTemperature>
 80007b2:	6178      	str	r0, [r7, #20]
        int size = snprintf(printfBuffer, BUFFER_SIZE, "T=+%ld%ld.%ld%ld_C\r\n", (temp / 1000) % 10, (temp / 100) % 10, (temp / 10) % 10, temp % 10);
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4ab3      	ldr	r2, [pc, #716]	@ (8000a84 <PI_GetCommand+0x2f4>)
 80007b8:	fb82 1203 	smull	r1, r2, r2, r3
 80007bc:	1192      	asrs	r2, r2, #6
 80007be:	17db      	asrs	r3, r3, #31
 80007c0:	1ad2      	subs	r2, r2, r3
 80007c2:	4bb1      	ldr	r3, [pc, #708]	@ (8000a88 <PI_GetCommand+0x2f8>)
 80007c4:	fb83 1302 	smull	r1, r3, r3, r2
 80007c8:	1099      	asrs	r1, r3, #2
 80007ca:	17d3      	asrs	r3, r2, #31
 80007cc:	1acd      	subs	r5, r1, r3
 80007ce:	462b      	mov	r3, r5
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	442b      	add	r3, r5
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	1ad5      	subs	r5, r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	4aac      	ldr	r2, [pc, #688]	@ (8000a8c <PI_GetCommand+0x2fc>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	1152      	asrs	r2, r2, #5
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad1      	subs	r1, r2, r3
 80007e6:	4ba8      	ldr	r3, [pc, #672]	@ (8000a88 <PI_GetCommand+0x2f8>)
 80007e8:	fb83 2301 	smull	r2, r3, r3, r1
 80007ec:	109a      	asrs	r2, r3, #2
 80007ee:	17cb      	asrs	r3, r1, #31
 80007f0:	1ad2      	subs	r2, r2, r3
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	1aca      	subs	r2, r1, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	49a2      	ldr	r1, [pc, #648]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000800:	fb81 0103 	smull	r0, r1, r1, r3
 8000804:	1089      	asrs	r1, r1, #2
 8000806:	17db      	asrs	r3, r3, #31
 8000808:	1ac8      	subs	r0, r1, r3
 800080a:	4b9f      	ldr	r3, [pc, #636]	@ (8000a88 <PI_GetCommand+0x2f8>)
 800080c:	fb83 1300 	smull	r1, r3, r3, r0
 8000810:	1099      	asrs	r1, r3, #2
 8000812:	17c3      	asrs	r3, r0, #31
 8000814:	1ac9      	subs	r1, r1, r3
 8000816:	460b      	mov	r3, r1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	1ac1      	subs	r1, r0, r3
 8000820:	697c      	ldr	r4, [r7, #20]
 8000822:	4b99      	ldr	r3, [pc, #612]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000824:	fb83 0304 	smull	r0, r3, r3, r4
 8000828:	1098      	asrs	r0, r3, #2
 800082a:	17e3      	asrs	r3, r4, #31
 800082c:	1ac0      	subs	r0, r0, r3
 800082e:	4603      	mov	r3, r0
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4403      	add	r3, r0
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	1ae0      	subs	r0, r4, r3
 8000838:	9002      	str	r0, [sp, #8]
 800083a:	9101      	str	r1, [sp, #4]
 800083c:	9200      	str	r2, [sp, #0]
 800083e:	462b      	mov	r3, r5
 8000840:	4a93      	ldr	r2, [pc, #588]	@ (8000a90 <PI_GetCommand+0x300>)
 8000842:	2164      	movs	r1, #100	@ 0x64
 8000844:	4893      	ldr	r0, [pc, #588]	@ (8000a94 <PI_GetCommand+0x304>)
 8000846:	f004 fdb5 	bl	80053b4 <sniprintf>
 800084a:	6138      	str	r0, [r7, #16]
        uart_write(printfBuffer, size);
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	b29b      	uxth	r3, r3
 8000850:	4619      	mov	r1, r3
 8000852:	4890      	ldr	r0, [pc, #576]	@ (8000a94 <PI_GetCommand+0x304>)
 8000854:	f7ff ff60 	bl	8000718 <uart_write>
    else
    {
        int size = snprintf(printfBuffer, BUFFER_SIZE, "\r\nCommande inconnue\r\n");
        uart_write(printfBuffer, size);
    }
}
 8000858:	e10e      	b.n	8000a78 <PI_GetCommand+0x2e8>
    else if (strcmp(buffer, "GET_P") == 0)
 800085a:	498f      	ldr	r1, [pc, #572]	@ (8000a98 <PI_GetCommand+0x308>)
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fcd7 	bl	8000210 <strcmp>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d114      	bne.n	8000892 <PI_GetCommand+0x102>
        int32_t PresNc = BMP280_ReadPressure();
 8000868:	f000 fb4e 	bl	8000f08 <BMP280_ReadPressure>
 800086c:	6278      	str	r0, [r7, #36]	@ 0x24
        int32_t Pres = BMP280_ConvertPressure(PresNc);
 800086e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000870:	f000 fb68 	bl	8000f44 <BMP280_ConvertPressure>
 8000874:	6238      	str	r0, [r7, #32]
        int size = snprintf(printfBuffer, BUFFER_SIZE, "P=%ldPa\r\n", Pres);
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	4a88      	ldr	r2, [pc, #544]	@ (8000a9c <PI_GetCommand+0x30c>)
 800087a:	2164      	movs	r1, #100	@ 0x64
 800087c:	4885      	ldr	r0, [pc, #532]	@ (8000a94 <PI_GetCommand+0x304>)
 800087e:	f004 fd99 	bl	80053b4 <sniprintf>
 8000882:	61f8      	str	r0, [r7, #28]
        uart_write(printfBuffer, size);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	b29b      	uxth	r3, r3
 8000888:	4619      	mov	r1, r3
 800088a:	4882      	ldr	r0, [pc, #520]	@ (8000a94 <PI_GetCommand+0x304>)
 800088c:	f7ff ff44 	bl	8000718 <uart_write>
}
 8000890:	e0f2      	b.n	8000a78 <PI_GetCommand+0x2e8>
    else if (strncmp(buffer, "SET_K=", 6) == 0)
 8000892:	2206      	movs	r2, #6
 8000894:	4982      	ldr	r1, [pc, #520]	@ (8000aa0 <PI_GetCommand+0x310>)
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f004 fecc 	bl	8005634 <strncmp>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d11d      	bne.n	80008de <PI_GetCommand+0x14e>
        if (sscanf(buffer + 6, "%ld", &value) == 1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3306      	adds	r3, #6
 80008a6:	f107 020c 	add.w	r2, r7, #12
 80008aa:	497e      	ldr	r1, [pc, #504]	@ (8000aa4 <PI_GetCommand+0x314>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fdb5 	bl	800541c <siscanf>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	f040 80df 	bne.w	8000a78 <PI_GetCommand+0x2e8>
            setK(value);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe87 	bl	80005d0 <setK>
            int size = snprintf(printfBuffer, BUFFER_SIZE, "SET_K=OK =%ld\r\n", value);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4a78      	ldr	r2, [pc, #480]	@ (8000aa8 <PI_GetCommand+0x318>)
 80008c6:	2164      	movs	r1, #100	@ 0x64
 80008c8:	4872      	ldr	r0, [pc, #456]	@ (8000a94 <PI_GetCommand+0x304>)
 80008ca:	f004 fd73 	bl	80053b4 <sniprintf>
 80008ce:	62b8      	str	r0, [r7, #40]	@ 0x28
            uart_write(printfBuffer, size);
 80008d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	486f      	ldr	r0, [pc, #444]	@ (8000a94 <PI_GetCommand+0x304>)
 80008d8:	f7ff ff1e 	bl	8000718 <uart_write>
}
 80008dc:	e0cc      	b.n	8000a78 <PI_GetCommand+0x2e8>
    else if (strcmp(buffer, "GET_K") == 0)
 80008de:	4973      	ldr	r1, [pc, #460]	@ (8000aac <PI_GetCommand+0x31c>)
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fc95 	bl	8000210 <strcmp>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d163      	bne.n	80009b4 <PI_GetCommand+0x224>
        int16_t K = 1234; // getK() ;
 80008ec:	f240 43d2 	movw	r3, #1234	@ 0x4d2
 80008f0:	867b      	strh	r3, [r7, #50]	@ 0x32
        int size = snprintf(printfBuffer, BUFFER_SIZE, "K=%d%d.%d%d000\r\n", (K / 1000) % 10, (K / 100) % 10, (K / 10) % 10, K % 10);
 80008f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80008f6:	4a63      	ldr	r2, [pc, #396]	@ (8000a84 <PI_GetCommand+0x2f4>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1192      	asrs	r2, r2, #6
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b60      	ldr	r3, [pc, #384]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000906:	fb83 1302 	smull	r1, r3, r3, r2
 800090a:	1099      	asrs	r1, r3, #2
 800090c:	17d3      	asrs	r3, r2, #31
 800090e:	1ac9      	subs	r1, r1, r3
 8000910:	460b      	mov	r3, r1
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b21b      	sxth	r3, r3
 800091c:	461d      	mov	r5, r3
 800091e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000922:	4a5a      	ldr	r2, [pc, #360]	@ (8000a8c <PI_GetCommand+0x2fc>)
 8000924:	fb82 1203 	smull	r1, r2, r2, r3
 8000928:	1152      	asrs	r2, r2, #5
 800092a:	17db      	asrs	r3, r3, #31
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	b21a      	sxth	r2, r3
 8000930:	4b55      	ldr	r3, [pc, #340]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000932:	fb83 1302 	smull	r1, r3, r3, r2
 8000936:	1099      	asrs	r1, r3, #2
 8000938:	17d3      	asrs	r3, r2, #31
 800093a:	1ac9      	subs	r1, r1, r3
 800093c:	460b      	mov	r3, r1
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	b21b      	sxth	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800094e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000950:	fb82 1203 	smull	r1, r2, r2, r3
 8000954:	1092      	asrs	r2, r2, #2
 8000956:	17db      	asrs	r3, r3, #31
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	b21a      	sxth	r2, r3
 800095c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <PI_GetCommand+0x2f8>)
 800095e:	fb83 1302 	smull	r1, r3, r3, r2
 8000962:	1099      	asrs	r1, r3, #2
 8000964:	17d3      	asrs	r3, r2, #31
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	460b      	mov	r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	440b      	add	r3, r1
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	b21b      	sxth	r3, r3
 8000974:	461c      	mov	r4, r3
 8000976:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800097a:	4b43      	ldr	r3, [pc, #268]	@ (8000a88 <PI_GetCommand+0x2f8>)
 800097c:	fb83 1302 	smull	r1, r3, r3, r2
 8000980:	1099      	asrs	r1, r3, #2
 8000982:	17d3      	asrs	r3, r2, #31
 8000984:	1ac9      	subs	r1, r1, r3
 8000986:	460b      	mov	r3, r1
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	b21b      	sxth	r3, r3
 8000992:	9302      	str	r3, [sp, #8]
 8000994:	9401      	str	r4, [sp, #4]
 8000996:	9000      	str	r0, [sp, #0]
 8000998:	462b      	mov	r3, r5
 800099a:	4a45      	ldr	r2, [pc, #276]	@ (8000ab0 <PI_GetCommand+0x320>)
 800099c:	2164      	movs	r1, #100	@ 0x64
 800099e:	483d      	ldr	r0, [pc, #244]	@ (8000a94 <PI_GetCommand+0x304>)
 80009a0:	f004 fd08 	bl	80053b4 <sniprintf>
 80009a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        uart_write(printfBuffer, size);
 80009a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	4839      	ldr	r0, [pc, #228]	@ (8000a94 <PI_GetCommand+0x304>)
 80009ae:	f7ff feb3 	bl	8000718 <uart_write>
}
 80009b2:	e061      	b.n	8000a78 <PI_GetCommand+0x2e8>
    else if (strcmp(buffer, "GET_A") == 0)
 80009b4:	493f      	ldr	r1, [pc, #252]	@ (8000ab4 <PI_GetCommand+0x324>)
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fc2a 	bl	8000210 <strcmp>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d14e      	bne.n	8000a60 <PI_GetCommand+0x2d0>
        int16_t A = 90; // getAngle() ;
 80009c2:	235a      	movs	r3, #90	@ 0x5a
 80009c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        int size = snprintf(printfBuffer, BUFFER_SIZE, "A=%d%d%d.%d000\r\n", (A / 100) % 10, (A / 10) % 10, (A) % 10, (A * 10) % 10);
 80009c6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80009ca:	4a30      	ldr	r2, [pc, #192]	@ (8000a8c <PI_GetCommand+0x2fc>)
 80009cc:	fb82 1203 	smull	r1, r2, r2, r3
 80009d0:	1152      	asrs	r2, r2, #5
 80009d2:	17db      	asrs	r3, r3, #31
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <PI_GetCommand+0x2f8>)
 80009da:	fb83 1302 	smull	r1, r3, r3, r2
 80009de:	1099      	asrs	r1, r3, #2
 80009e0:	17d3      	asrs	r3, r2, #31
 80009e2:	1ac9      	subs	r1, r1, r3
 80009e4:	460b      	mov	r3, r1
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	440b      	add	r3, r1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	461c      	mov	r4, r3
 80009f2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80009f6:	4a24      	ldr	r2, [pc, #144]	@ (8000a88 <PI_GetCommand+0x2f8>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1092      	asrs	r2, r2, #2
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000a06:	fb83 1302 	smull	r1, r3, r3, r2
 8000a0a:	1099      	asrs	r1, r3, #2
 8000a0c:	17d3      	asrs	r3, r2, #31
 8000a0e:	1ac9      	subs	r1, r1, r3
 8000a10:	460b      	mov	r3, r1
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	440b      	add	r3, r1
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <PI_GetCommand+0x2f8>)
 8000a24:	fb83 1302 	smull	r1, r3, r3, r2
 8000a28:	1099      	asrs	r1, r3, #2
 8000a2a:	17d3      	asrs	r3, r2, #31
 8000a2c:	1ac9      	subs	r1, r1, r3
 8000a2e:	460b      	mov	r3, r1
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	440b      	add	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	9201      	str	r2, [sp, #4]
 8000a42:	9000      	str	r0, [sp, #0]
 8000a44:	4623      	mov	r3, r4
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <PI_GetCommand+0x328>)
 8000a48:	2164      	movs	r1, #100	@ 0x64
 8000a4a:	4812      	ldr	r0, [pc, #72]	@ (8000a94 <PI_GetCommand+0x304>)
 8000a4c:	f004 fcb2 	bl	80053b4 <sniprintf>
 8000a50:	6378      	str	r0, [r7, #52]	@ 0x34
        uart_write(printfBuffer, size);
 8000a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4619      	mov	r1, r3
 8000a58:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <PI_GetCommand+0x304>)
 8000a5a:	f7ff fe5d 	bl	8000718 <uart_write>
}
 8000a5e:	e00b      	b.n	8000a78 <PI_GetCommand+0x2e8>
        int size = snprintf(printfBuffer, BUFFER_SIZE, "\r\nCommande inconnue\r\n");
 8000a60:	4a16      	ldr	r2, [pc, #88]	@ (8000abc <PI_GetCommand+0x32c>)
 8000a62:	2164      	movs	r1, #100	@ 0x64
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <PI_GetCommand+0x304>)
 8000a66:	f004 fca5 	bl	80053b4 <sniprintf>
 8000a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        uart_write(printfBuffer, size);
 8000a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <PI_GetCommand+0x304>)
 8000a74:	f7ff fe50 	bl	8000718 <uart_write>
}
 8000a78:	bf00      	nop
 8000a7a:	3740      	adds	r7, #64	@ 0x40
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a80:	08006dc8 	.word	0x08006dc8
 8000a84:	10624dd3 	.word	0x10624dd3
 8000a88:	66666667 	.word	0x66666667
 8000a8c:	51eb851f 	.word	0x51eb851f
 8000a90:	08006dd0 	.word	0x08006dd0
 8000a94:	200000d0 	.word	0x200000d0
 8000a98:	08006de8 	.word	0x08006de8
 8000a9c:	08006df0 	.word	0x08006df0
 8000aa0:	08006dfc 	.word	0x08006dfc
 8000aa4:	08006e04 	.word	0x08006e04
 8000aa8:	08006e08 	.word	0x08006e08
 8000aac:	08006e18 	.word	0x08006e18
 8000ab0:	08006e20 	.word	0x08006e20
 8000ab4:	08006e34 	.word	0x08006e34
 8000ab8:	08006e3c 	.word	0x08006e3c
 8000abc:	08006e50 	.word	0x08006e50

08000ac0 <PI_RUN>:

// Fonction principale pour gérer les commandes envoyées via UART

int PI_RUN(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
    static char cmd_buffer[BUFFER_SIZE];
    static int pos = 0;
    char c;

    // Si un caractère est reçu via UART (vérifié par l'interruption)
    if (uartRxReceived)
 8000ac6:	4b26      	ldr	r3, [pc, #152]	@ (8000b60 <PI_RUN+0xa0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d042      	beq.n	8000b54 <PI_RUN+0x94>
    {
        c = uartRxBuffer[0]; // Lire le caractère reçu via UART
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <PI_RUN+0xa4>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
        uartRxReceived = 0;  // Réinitialiser le flag
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <PI_RUN+0xa0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]

        // Traitement des caractères reçus
        switch (c)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b0d      	cmp	r3, #13
 8000ade:	d002      	beq.n	8000ae6 <PI_RUN+0x26>
 8000ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ae2:	d014      	beq.n	8000b0e <PI_RUN+0x4e>
 8000ae4:	e021      	b.n	8000b2a <PI_RUN+0x6a>
        {
        case '\r':                     // Touche RETURN
            uart_write("\n", 2);       // Sauter une ligne après Entrée
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <PI_RUN+0xa8>)
 8000aea:	f7ff fe15 	bl	8000718 <uart_write>
            cmd_buffer[pos] = '\0';    // Terminer la chaîne
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <PI_RUN+0xac>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <PI_RUN+0xb0>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	54d1      	strb	r1, [r2, r3]
            PI_GetCommand(cmd_buffer); // Exécuter la commande
 8000af8:	481d      	ldr	r0, [pc, #116]	@ (8000b70 <PI_RUN+0xb0>)
 8000afa:	f7ff fe49 	bl	8000790 <PI_GetCommand>
            pos = 0;                   // Réinitialiser la position du buffer
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <PI_RUN+0xac>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
            uart_write("STM32@pig3>", 12);
 8000b04:	210c      	movs	r1, #12
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <PI_RUN+0xb4>)
 8000b08:	f7ff fe06 	bl	8000718 <uart_write>
            break;
 8000b0c:	e022      	b.n	8000b54 <PI_RUN+0x94>

        case 127: // Touche Backspace
            if (pos > 0)
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <PI_RUN+0xac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dd1b      	ble.n	8000b4e <PI_RUN+0x8e>
            {
                pos--;                  // Supprimer le dernier caractère
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <PI_RUN+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <PI_RUN+0xac>)
 8000b1e:	6013      	str	r3, [r2, #0]
                uart_write("\b \b", 3); // Effacer le caractère sur le terminal
 8000b20:	2103      	movs	r1, #3
 8000b22:	4815      	ldr	r0, [pc, #84]	@ (8000b78 <PI_RUN+0xb8>)
 8000b24:	f7ff fdf8 	bl	8000718 <uart_write>
            }
            break;
 8000b28:	e011      	b.n	8000b4e <PI_RUN+0x8e>

        default: // Autres caractères
            if (pos < BUFFER_SIZE - 1)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <PI_RUN+0xac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b62      	cmp	r3, #98	@ 0x62
 8000b30:	dc0f      	bgt.n	8000b52 <PI_RUN+0x92>
            {                          // Vérifier si le buffer a de l'espace
                uart_write(&c, 1);     // Afficher le caractère
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2101      	movs	r1, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fdee 	bl	8000718 <uart_write>
                cmd_buffer[pos++] = c; // Stocker le caractère
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <PI_RUN+0xac>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	490a      	ldr	r1, [pc, #40]	@ (8000b6c <PI_RUN+0xac>)
 8000b44:	600a      	str	r2, [r1, #0]
 8000b46:	79f9      	ldrb	r1, [r7, #7]
 8000b48:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <PI_RUN+0xb0>)
 8000b4a:	54d1      	strb	r1, [r2, r3]
            }
            break;
 8000b4c:	e001      	b.n	8000b52 <PI_RUN+0x92>
            break;
 8000b4e:	bf00      	nop
 8000b50:	e000      	b.n	8000b54 <PI_RUN+0x94>
            break;
 8000b52:	bf00      	nop
        }
    }

    return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000138 	.word	0x20000138
 8000b64:	20000134 	.word	0x20000134
 8000b68:	08006e68 	.word	0x08006e68
 8000b6c:	2000013c 	.word	0x2000013c
 8000b70:	20000140 	.word	0x20000140
 8000b74:	08006e6c 	.word	0x08006e6c
 8000b78:	08006e78 	.word	0x08006e78

08000b7c <HAL_UART_RxCpltCallback>:

// Callback pour la réception d'un caractère via UART (géré par interruption)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART_PI.Instance)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x2c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d107      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x24>
    {
        uartRxReceived = 1;                                        // Indiquer que des données ont été reçues
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_UART_RxCpltCallback+0x30>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&UART_PI, (uint8_t *)uartRxBuffer, 1); // Redemander la réception du prochain caractère
 8000b96:	2201      	movs	r2, #1
 8000b98:	4905      	ldr	r1, [pc, #20]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x34>)
 8000b9a:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x2c>)
 8000b9c:	f003 fb5d 	bl	800425a <HAL_UART_Receive_IT>
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000288 	.word	0x20000288
 8000bac:	20000138 	.word	0x20000138
 8000bb0:	20000134 	.word	0x20000134

08000bb4 <BMP280_RegisterWrite>:
signed short dig_P8 = 0;
signed short dig_P9 = 0;

uint32_t t_fine;

static int BMP280_RegisterWrite(uint8_t reg, uint8_t data) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	733b      	strb	r3, [r7, #12]
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	737b      	strb	r3, [r7, #13]
    if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY)) {
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <BMP280_RegisterWrite+0x44>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f107 020c 	add.w	r2, r7, #12
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <BMP280_RegisterWrite+0x48>)
 8000be0:	f001 fd72 	bl	80026c8 <HAL_I2C_Master_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <BMP280_RegisterWrite+0x3a>
        return 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <BMP280_RegisterWrite+0x3c>
    }
    return 1;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000040 	.word	0x20000040
 8000bfc:	200001e8 	.word	0x200001e8

08000c00 <BMP280_RegisterRead>:

static int BMP280_RegisterRead(uint8_t reg, uint8_t *data, uint16_t length) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	80bb      	strh	r3, [r7, #4]
    if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, &reg, 1, HAL_MAX_DELAY)) {
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <BMP280_RegisterRead+0x5c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	480f      	ldr	r0, [pc, #60]	@ (8000c60 <BMP280_RegisterRead+0x60>)
 8000c22:	f001 fd51 	bl	80026c8 <HAL_I2C_Master_Transmit>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <BMP280_RegisterRead+0x30>
        return 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e010      	b.n	8000c52 <BMP280_RegisterRead+0x52>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, length, HAL_MAX_DELAY)) {
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <BMP280_RegisterRead+0x5c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <BMP280_RegisterRead+0x60>)
 8000c42:	f001 fe3f 	bl	80028c4 <HAL_I2C_Master_Receive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <BMP280_RegisterRead+0x50>
        return 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <BMP280_RegisterRead+0x52>
    }
    return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000040 	.word	0x20000040
 8000c60:	200001e8 	.word	0x200001e8

08000c64 <BMP280_Init>:

void BMP280_Init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
    uint8_t data[1];
    uint8_t ConfigValue = 0x57;
 8000c6a:	2357      	movs	r3, #87	@ 0x57
 8000c6c:	71fb      	strb	r3, [r7, #7]
    if (1 == BMP280_RegisterWrite(BMP280_REG_CONFIG, ConfigValue)) {
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <BMP280_Init+0x58>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff9c 	bl	8000bb4 <BMP280_RegisterWrite>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d103      	bne.n	8000c8a <BMP280_Init+0x26>
        printf("Erreur pendant l'écriture de la configuration \r\n");
 8000c82:	480f      	ldr	r0, [pc, #60]	@ (8000cc0 <BMP280_Init+0x5c>)
 8000c84:	f004 fb8e 	bl	80053a4 <puts>
        return;
 8000c88:	e014      	b.n	8000cb4 <BMP280_Init+0x50>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, sizeof(data), HAL_MAX_DELAY)) {
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <BMP280_Init+0x60>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	1d3a      	adds	r2, r7, #4
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <BMP280_Init+0x64>)
 8000c9c:	f001 fe12 	bl	80028c4 <HAL_I2C_Master_Receive>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <BMP280_Init+0x4e>
        return;
    }
    printf("La valeur configurée est : 0x%X \r\n", data[0]);
 8000ca6:	793b      	ldrb	r3, [r7, #4]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <BMP280_Init+0x68>)
 8000cac:	f004 fb12 	bl	80052d4 <iprintf>
 8000cb0:	e000      	b.n	8000cb4 <BMP280_Init+0x50>
        return;
 8000cb2:	bf00      	nop
}
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000041 	.word	0x20000041
 8000cc0:	08006e7c 	.word	0x08006e7c
 8000cc4:	20000040 	.word	0x20000040
 8000cc8:	200001e8 	.word	0x200001e8
 8000ccc:	08006eb0 	.word	0x08006eb0

08000cd0 <BMP280_ReadCalibrationData>:
    }
    printf("La valeur id = 0x%X\r\n", idValue);
}

void BMP280_ReadCalibrationData()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
    uint8_t calibData[BMP280_CALIB_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_CALIB_DATA, calibData, BMP280_CALIB_DATA_LEN)) {
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000e00 <BMP280_ReadCalibrationData+0x130>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	1d39      	adds	r1, r7, #4
 8000cdc:	2218      	movs	r2, #24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff8e 	bl	8000c00 <BMP280_RegisterRead>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d103      	bne.n	8000cf2 <BMP280_ReadCalibrationData+0x22>
        printf("La lecture de calibration a échoué \r\n");
 8000cea:	4846      	ldr	r0, [pc, #280]	@ (8000e04 <BMP280_ReadCalibrationData+0x134>)
 8000cec:	f004 fb5a 	bl	80053a4 <puts>
 8000cf0:	e082      	b.n	8000df8 <BMP280_ReadCalibrationData+0x128>
        return;
    }

    printf("Lecture des données de calibration OK \r\n");
 8000cf2:	4845      	ldr	r0, [pc, #276]	@ (8000e08 <BMP280_ReadCalibrationData+0x138>)
 8000cf4:	f004 fb56 	bl	80053a4 <puts>
    for (int i = 0; i < BMP280_CALIB_DATA_LEN; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	e00d      	b.n	8000d1a <BMP280_ReadCalibrationData+0x4a>
        printf("Le contenu du registre 0x%X est  %d \r\n", 0x88 + i, calibData[i]);
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8000d04:	1d3a      	adds	r2, r7, #4
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	483f      	ldr	r0, [pc, #252]	@ (8000e0c <BMP280_ReadCalibrationData+0x13c>)
 8000d10:	f004 fae0 	bl	80052d4 <iprintf>
    for (int i = 0; i < BMP280_CALIB_DATA_LEN; i++) {
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	2b17      	cmp	r3, #23
 8000d1e:	ddee      	ble.n	8000cfe <BMP280_ReadCalibrationData+0x2e>
    }

    dig_T1 = (calibData[0] | (calibData[1] << 8));
 8000d20:	793b      	ldrb	r3, [r7, #4]
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <BMP280_ReadCalibrationData+0x140>)
 8000d30:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData[2] | (calibData[3] << 8));
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <BMP280_ReadCalibrationData+0x144>)
 8000d42:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData[4] | (calibData[5] << 8));
 8000d44:	7a3b      	ldrb	r3, [r7, #8]
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	7a7b      	ldrb	r3, [r7, #9]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <BMP280_ReadCalibrationData+0x148>)
 8000d54:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData[6] | (calibData[7] << 8));
 8000d56:	7abb      	ldrb	r3, [r7, #10]
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <BMP280_ReadCalibrationData+0x14c>)
 8000d66:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData[8] | (calibData[9] << 8));
 8000d68:	7b3b      	ldrb	r3, [r7, #12]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	7b7b      	ldrb	r3, [r7, #13]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <BMP280_ReadCalibrationData+0x150>)
 8000d78:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData[10] | (calibData[11] << 8));
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <BMP280_ReadCalibrationData+0x154>)
 8000d8a:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData[12] | (calibData[13] << 8));
 8000d8c:	7c3b      	ldrb	r3, [r7, #16]
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	7c7b      	ldrb	r3, [r7, #17]
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21a      	sxth	r2, r3
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <BMP280_ReadCalibrationData+0x158>)
 8000d9c:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData[14] | (calibData[15] << 8));
 8000d9e:	7cbb      	ldrb	r3, [r7, #18]
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	7cfb      	ldrb	r3, [r7, #19]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21a      	sxth	r2, r3
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <BMP280_ReadCalibrationData+0x15c>)
 8000dae:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData[16] | (calibData[17] << 8));
 8000db0:	7d3b      	ldrb	r3, [r7, #20]
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	7d7b      	ldrb	r3, [r7, #21]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <BMP280_ReadCalibrationData+0x160>)
 8000dc0:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData[18] | (calibData[19] << 8));
 8000dc2:	7dbb      	ldrb	r3, [r7, #22]
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <BMP280_ReadCalibrationData+0x164>)
 8000dd2:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData[20] | (calibData[21] << 8));
 8000dd4:	7e3b      	ldrb	r3, [r7, #24]
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7e7b      	ldrb	r3, [r7, #25]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <BMP280_ReadCalibrationData+0x168>)
 8000de4:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData[22] | (calibData[23] << 8));
 8000de6:	7ebb      	ldrb	r3, [r7, #26]
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7efb      	ldrb	r3, [r7, #27]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <BMP280_ReadCalibrationData+0x16c>)
 8000df6:	801a      	strh	r2, [r3, #0]
}
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000042 	.word	0x20000042
 8000e04:	08006f40 	.word	0x08006f40
 8000e08:	08006f68 	.word	0x08006f68
 8000e0c:	08006f94 	.word	0x08006f94
 8000e10:	200001a4 	.word	0x200001a4
 8000e14:	200001a6 	.word	0x200001a6
 8000e18:	200001a8 	.word	0x200001a8
 8000e1c:	200001aa 	.word	0x200001aa
 8000e20:	200001ac 	.word	0x200001ac
 8000e24:	200001ae 	.word	0x200001ae
 8000e28:	200001b0 	.word	0x200001b0
 8000e2c:	200001b2 	.word	0x200001b2
 8000e30:	200001b4 	.word	0x200001b4
 8000e34:	200001b6 	.word	0x200001b6
 8000e38:	200001b8 	.word	0x200001b8
 8000e3c:	200001ba 	.word	0x200001ba

08000e40 <BMP280_ReadTemperature>:

int32_t BMP280_ReadTemperature(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    uint8_t tempData[BMP280_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_TEMP, tempData, BMP280_DATA_LEN)) {
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <BMP280_ReadTemperature+0x38>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	1d39      	adds	r1, r7, #4
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fed6 	bl	8000c00 <BMP280_RegisterRead>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <BMP280_ReadTemperature+0x1e>
        return 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e008      	b.n	8000e70 <BMP280_ReadTemperature+0x30>
    }
    return (int32_t)((tempData[0] << 12) | (tempData[1] << 4) | (tempData[2]>> 4));
 8000e5e:	793b      	ldrb	r3, [r7, #4]
 8000e60:	031a      	lsls	r2, r3, #12
 8000e62:	797b      	ldrb	r3, [r7, #5]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	4313      	orrs	r3, r2
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	0912      	lsrs	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	4313      	orrs	r3, r2
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000043 	.word	0x20000043

08000e7c <BMP280_ConvertTemperature>:

int32_t BMP280_ConvertTemperature(int32_t rawTemp) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;

    var1 = (((rawTemp >> 3) - ((int32_t)dig_T1 << 1)) * (int32_t)dig_T2) >> 11;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	10da      	asrs	r2, r3, #3
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <BMP280_ConvertTemperature+0x7c>)
 8000e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4a1a      	ldr	r2, [pc, #104]	@ (8000efc <BMP280_ConvertTemperature+0x80>)
 8000e94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	12db      	asrs	r3, r3, #11
 8000e9e:	617b      	str	r3, [r7, #20]
    var2 = (((((rawTemp >> 4) - (int32_t)dig_T1) * ((rawTemp >> 4) - (int32_t)dig_T1)) >> 12) * (int32_t)dig_T3) >> 14;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	111b      	asrs	r3, r3, #4
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <BMP280_ConvertTemperature+0x7c>)
 8000ea6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	1112      	asrs	r2, r2, #4
 8000eb0:	4911      	ldr	r1, [pc, #68]	@ (8000ef8 <BMP280_ConvertTemperature+0x7c>)
 8000eb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000eb6:	1a52      	subs	r2, r2, r1
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	131b      	asrs	r3, r3, #12
 8000ebe:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <BMP280_ConvertTemperature+0x84>)
 8000ec0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	139b      	asrs	r3, r3, #14
 8000eca:	613b      	str	r3, [r7, #16]

    t_fine = var1 + var2;
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <BMP280_ConvertTemperature+0x88>)
 8000ed6:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <BMP280_ConvertTemperature+0x88>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3380      	adds	r3, #128	@ 0x80
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	60fb      	str	r3, [r7, #12]
    return T;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200001a4 	.word	0x200001a4
 8000efc:	200001a6 	.word	0x200001a6
 8000f00:	200001a8 	.word	0x200001a8
 8000f04:	200001bc 	.word	0x200001bc

08000f08 <BMP280_ReadPressure>:

int32_t BMP280_ReadPressure(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
    uint8_t pressureData[BMP280_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_PRESSURE, pressureData, BMP280_DATA_LEN)) {
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <BMP280_ReadPressure+0x38>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	1d39      	adds	r1, r7, #4
 8000f14:	2203      	movs	r2, #3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe72 	bl	8000c00 <BMP280_RegisterRead>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <BMP280_ReadPressure+0x1e>
        return 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e008      	b.n	8000f38 <BMP280_ReadPressure+0x30>
    }
    return (int32_t)((pressureData[0] << 16) | (pressureData[1] << 4) |(pressureData[2] >> 4));
 8000f26:	793b      	ldrb	r3, [r7, #4]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	79ba      	ldrb	r2, [r7, #6]
 8000f32:	0912      	lsrs	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	4313      	orrs	r3, r2
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000044 	.word	0x20000044

08000f44 <BMP280_ConvertPressure>:

int32_t BMP280_ConvertPressure(int32_t rawPressure) {
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, P;

    var1 = (t_fine >> 1) - 64000;
 8000f4c:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <BMP280_ConvertPressure+0x130>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8000f56:	613b      	str	r3, [r7, #16]
    var2 = ((var1 >> 2) * (var1 >> 2) >> 11) * dig_P6;
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	109b      	asrs	r3, r3, #2
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	1092      	asrs	r2, r2, #2
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	12db      	asrs	r3, r3, #11
 8000f66:	4a44      	ldr	r2, [pc, #272]	@ (8001078 <BMP280_ConvertPressure+0x134>)
 8000f68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	60fb      	str	r3, [r7, #12]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8000f72:	4b42      	ldr	r3, [pc, #264]	@ (800107c <BMP280_ConvertPressure+0x138>)
 8000f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	109a      	asrs	r2, r3, #2
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <BMP280_ConvertPressure+0x13c>)
 8000f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	4413      	add	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
    var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8000f98:	4b3a      	ldr	r3, [pc, #232]	@ (8001084 <BMP280_ConvertPressure+0x140>)
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	109b      	asrs	r3, r3, #2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	1092      	asrs	r2, r2, #2
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	135b      	asrs	r3, r3, #13
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	10da      	asrs	r2, r3, #3
 8000fb4:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <BMP280_ConvertPressure+0x144>)
 8000fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	fb01 f303 	mul.w	r3, r1, r3
 8000fc2:	105b      	asrs	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	149b      	asrs	r3, r3, #18
 8000fc8:	613b      	str	r3, [r7, #16]
    var1 = ((32768 + var1) * dig_P1) >> 25;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800108c <BMP280_ConvertPressure+0x148>)
 8000fd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	165b      	asrs	r3, r3, #25
 8000fdc:	613b      	str	r3, [r7, #16]

    if (var1 == 0) {
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <BMP280_ConvertPressure+0xa4>
        return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e03e      	b.n	8001066 <BMP280_ConvertPressure+0x122>
    }

    P = ((1048576 - rawPressure) - (var2 >> 12)) * 3125;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	131b      	asrs	r3, r3, #12
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    if (P < 0x80000000) {
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db06      	blt.n	8001012 <BMP280_ConvertPressure+0xce>
        P = (P << 1) / var1;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005a      	lsls	r2, r3, #1
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	fb92 f3f3 	sdiv	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e005      	b.n	800101e <BMP280_ConvertPressure+0xda>
    } else {
        P = (P / var1) * 2;
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	fb92 f3f3 	sdiv	r3, r2, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	617b      	str	r3, [r7, #20]
    }

    var1 = (dig_P9 * ((P >> 3) * (P >> 3) >> 13)) >> 12;
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <BMP280_ConvertPressure+0x14c>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	4619      	mov	r1, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	10db      	asrs	r3, r3, #3
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	10d2      	asrs	r2, r2, #3
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	135b      	asrs	r3, r3, #13
 8001034:	fb01 f303 	mul.w	r3, r1, r3
 8001038:	131b      	asrs	r3, r3, #12
 800103a:	613b      	str	r3, [r7, #16]
    var2 = ((P >> 2) * dig_P8) >> 13;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	109b      	asrs	r3, r3, #2
 8001040:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <BMP280_ConvertPressure+0x150>)
 8001042:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	135b      	asrs	r3, r3, #13
 800104c:	60fb      	str	r3, [r7, #12]
    P = (int32_t)(P + ((var1 + var2 + dig_P7) >> 4));
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <BMP280_ConvertPressure+0x154>)
 8001056:	f9b2 2000 	ldrsh.w	r2, [r2]
 800105a:	4413      	add	r3, r2
 800105c:	111b      	asrs	r3, r3, #4
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4413      	add	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
    return P;
 8001064:	697b      	ldr	r3, [r7, #20]
}
 8001066:	4618      	mov	r0, r3
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200001bc 	.word	0x200001bc
 8001078:	200001b4 	.word	0x200001b4
 800107c:	200001b2 	.word	0x200001b2
 8001080:	200001b0 	.word	0x200001b0
 8001084:	200001ae 	.word	0x200001ae
 8001088:	200001ac 	.word	0x200001ac
 800108c:	200001aa 	.word	0x200001aa
 8001090:	200001ba 	.word	0x200001ba
 8001094:	200001b8 	.word	0x200001b8
 8001098:	200001b6 	.word	0x200001b6

0800109c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <MX_CAN1_Init+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010a8:	2205      	movs	r2, #5
 80010aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010ba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_CAN1_Init+0x64>)
 80010ee:	f000 fc5f 	bl	80019b0 <HAL_CAN_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010f8:	f000 f9b4 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001c0 	.word	0x200001c0
 8001104:	40006400 	.word	0x40006400

08001108 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	@ (800118c <HAL_CAN_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12c      	bne.n	8001184 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_CAN_MspInit+0x88>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_CAN_MspInit+0x88>)
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_CAN_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_CAN_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <HAL_CAN_MspInit+0x88>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_CAN_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001162:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001174:	2309      	movs	r3, #9
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_CAN_MspInit+0x8c>)
 8001180:	f000 ffca 	bl	8002118 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	@ 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40006400 	.word	0x40006400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <MX_GPIO_Init+0x84>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <MX_GPIO_Init+0x84>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_GPIO_Init+0x84>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_GPIO_Init+0x84>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <MX_GPIO_Init+0x84>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_GPIO_Init+0x84>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_GPIO_Init+0x84>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <MX_GPIO_Init+0x84>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_GPIO_Init+0x84>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_GPIO_Init+0x84>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <MX_GPIO_Init+0x84>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_GPIO_Init+0x84>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001226:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <MX_I2C1_Init+0x54>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_I2C1_Init+0x50>)
 800122c:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <MX_I2C1_Init+0x58>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_I2C1_Init+0x50>)
 800123e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001242:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	@ (8001270 <MX_I2C1_Init+0x50>)
 800125e:	f001 f8ef 	bl	8002440 <HAL_I2C_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 f8fc 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200001e8 	.word	0x200001e8
 8001274:	40005400 	.word	0x40005400
 8001278:	000186a0 	.word	0x000186a0

0800127c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_I2C_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12b      	bne.n	80012f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a17      	ldr	r2, [pc, #92]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ba:	23c0      	movs	r3, #192	@ 0xc0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	2312      	movs	r3, #18
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <HAL_I2C_MspInit+0x8c>)
 80012d6:	f000 ff1f 	bl	8002118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_I2C_MspInit+0x88>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	@ 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40005400 	.word	0x40005400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart3, (uint8_t*)&chr,1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);
 8001314:	1d39      	adds	r1, r7, #4
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	2201      	movs	r2, #1
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <__io_putchar+0x20>)
 800131e:	f002 ff11 	bl	8004144 <HAL_UART_Transmit>
	return chr;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000240 	.word	0x20000240

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 faca 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f822 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f7ff ff2c 	bl	8001198 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001340:	f000 f9b8 	bl	80016b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001344:	f7ff ff6c 	bl	8001220 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001348:	f7ff fea8 	bl	800109c <MX_CAN1_Init>
  MX_USART3_UART_Init();
 800134c:	f000 f9dc 	bl	8001708 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("=============TP BUS & RESEAUX ===========\r\n") ;
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <main+0x48>)
 8001352:	f004 f827 	bl	80053a4 <puts>
	//BMP280_Init() ;
	//BMP280_ReadID() ;
	BMP280_Init();
 8001356:	f7ff fc85 	bl	8000c64 <BMP280_Init>
	BMP280_ReadCalibrationData();  // Lecture des paramètres de calibration
 800135a:	f7ff fcb9 	bl	8000cd0 <BMP280_ReadCalibrationData>
	PI_Init();
 800135e:	f7ff f9ef 	bl	8000740 <PI_Init>
	HAL_CAN_Start(&hcan1);
 8001362:	4806      	ldr	r0, [pc, #24]	@ (800137c <main+0x4c>)
 8001364:	f000 fc1f 	bl	8001ba6 <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	setPositionTo0() ;
 8001368:	f7ff f992 	bl	8000690 <setPositionTo0>
	while (1)
	{
		PI_RUN();
 800136c:	f7ff fba8 	bl	8000ac0 <PI_RUN>
		moteurRun() ;
 8001370:	f7ff f9ae 	bl	80006d0 <moteurRun>
		PI_RUN();
 8001374:	bf00      	nop
 8001376:	e7f9      	b.n	800136c <main+0x3c>
 8001378:	08006fbc 	.word	0x08006fbc
 800137c:	200001c0 	.word	0x200001c0

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	@ 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2234      	movs	r2, #52	@ 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f948 	bl	8005624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <SystemClock_Config+0xdc>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a2b      	ldr	r2, [pc, #172]	@ (800145c <SystemClock_Config+0xdc>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <SystemClock_Config+0xdc>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <SystemClock_Config+0xe0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	@ (8001460 <SystemClock_Config+0xe0>)
 80013ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <SystemClock_Config+0xe0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	2302      	movs	r3, #2
 80013e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013f0:	2304      	movs	r3, #4
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013f4:	23b4      	movs	r3, #180	@ 0xb4
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fbad 	bl	8003b68 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001414:	f000 f826 	bl	8001464 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001418:	f002 f80c 	bl	8003434 <HAL_PWREx_EnableOverDrive>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001422:	f000 f81f 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2302      	movs	r3, #2
 800142c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001432:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001436:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2105      	movs	r1, #5
 8001444:	4618      	mov	r0, r3
 8001446:	f002 f845 	bl	80034d4 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001450:	f000 f808 	bl	8001464 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	@ 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <Error_Handler+0x8>

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <HAL_MspInit+0x4c>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_MspInit+0x4c>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ae:	2007      	movs	r0, #7
 80014b0:	f000 fd5e 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 fa2b 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <USART2_IRQHandler+0x10>)
 8001526:	f002 febd 	bl	80042a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000240 	.word	0x20000240

08001534 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <USART3_IRQHandler+0x10>)
 800153a:	f002 feb3 	bl	80042a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000288 	.word	0x20000288

08001548 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00a      	b.n	8001570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800155a:	f3af 8000 	nop.w
 800155e:	4601      	mov	r1, r0
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf0      	blt.n	800155a <_read+0x12>
  }

  return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e009      	b.n	80015a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff feb5 	bl	800130c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf1      	blt.n	8001594 <_write+0x12>
  }
  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_close>:

int _close(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e2:	605a      	str	r2, [r3, #4]
  return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_isatty>:

int _isatty(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	@ (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f004 f846 	bl	80056e4 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20020000 	.word	0x20020000
 8001684:	00000400 	.word	0x00000400
 8001688:	2000023c 	.word	0x2000023c
 800168c:	20000420 	.word	0x20000420

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f002 fcda 	bl	80040a4 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f7ff feb5 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000240 	.word	0x20000240
 8001704:	40004400 	.word	0x40004400

08001708 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <MX_USART3_UART_Init+0x50>)
 8001710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_USART3_UART_Init+0x4c>)
 8001740:	f002 fcb0 	bl	80040a4 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800174a:	f7ff fe8b 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000288 	.word	0x20000288
 8001758:	40004800 	.word	0x40004800

0800175c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a3a      	ldr	r2, [pc, #232]	@ (8001864 <HAL_UART_MspInit+0x108>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d134      	bne.n	80017e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a31      	ldr	r2, [pc, #196]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b6:	230c      	movs	r3, #12
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c6:	2307      	movs	r3, #7
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4826      	ldr	r0, [pc, #152]	@ (800186c <HAL_UART_MspInit+0x110>)
 80017d2:	f000 fca1 	bl	8002118 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2026      	movs	r0, #38	@ 0x26
 80017dc:	f000 fbd3 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e0:	2026      	movs	r0, #38	@ 0x26
 80017e2:	f000 fbec 	bl	8001fbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017e6:	e039      	b.n	800185c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a20      	ldr	r2, [pc, #128]	@ (8001870 <HAL_UART_MspInit+0x114>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d134      	bne.n	800185c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_UART_MspInit+0x10c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800182a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183c:	2307      	movs	r3, #7
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	480b      	ldr	r0, [pc, #44]	@ (8001874 <HAL_UART_MspInit+0x118>)
 8001848:	f000 fc66 	bl	8002118 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2027      	movs	r0, #39	@ 0x27
 8001852:	f000 fb98 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001856:	2027      	movs	r0, #39	@ 0x27
 8001858:	f000 fbb1 	bl	8001fbe <HAL_NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	@ 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40004400 	.word	0x40004400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40004800 	.word	0x40004800
 8001874:	40020800 	.word	0x40020800

08001878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800187c:	f7ff ff08 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001882:	490d      	ldr	r1, [pc, #52]	@ (80018b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001898:	4c0a      	ldr	r4, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f003 ff23 	bl	80056f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018aa:	f7ff fd41 	bl	8001330 <main>
  bx  lr    
 80018ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80018bc:	0800722c 	.word	0x0800722c
  ldr r2, =_sbss
 80018c0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80018c4:	20000420 	.word	0x20000420

080018c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <HAL_Init+0x40>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <HAL_Init+0x40>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_Init+0x40>)
 80018ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 fb3b 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f808 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fdb6 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fb53 	bl	8001fda <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f000 fb1b 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	@ (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000048 	.word	0x20000048
 8001968:	20000050 	.word	0x20000050
 800196c:	2000004c 	.word	0x2000004c

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000050 	.word	0x20000050
 8001994:	200002d0 	.word	0x200002d0

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200002d0 	.word	0x200002d0

080019b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0ed      	b.n	8001b9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fb9a 	bl	8001108 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e4:	f7ff ffd8 	bl	8001998 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ea:	e012      	b.n	8001a12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ec:	f7ff ffd4 	bl	8001998 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b0a      	cmp	r3, #10
 80019f8:	d90b      	bls.n	8001a12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2205      	movs	r2, #5
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0c5      	b.n	8001b9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0e5      	beq.n	80019ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0202 	bic.w	r2, r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a30:	f7ff ffb2 	bl	8001998 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a36:	e012      	b.n	8001a5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a38:	f7ff ffae 	bl	8001998 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b0a      	cmp	r3, #10
 8001a44:	d90b      	bls.n	8001a5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2205      	movs	r2, #5
 8001a56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e09f      	b.n	8001b9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e5      	bne.n	8001a38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e1b      	ldrb	r3, [r3, #24]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7e5b      	ldrb	r3, [r3, #25]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e9b      	ldrb	r3, [r3, #26]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0220 	bic.w	r2, r2, #32
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7edb      	ldrb	r3, [r3, #27]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0210 	bic.w	r2, r2, #16
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0210 	orr.w	r2, r2, #16
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7f1b      	ldrb	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0208 	orr.w	r2, r2, #8
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e007      	b.n	8001b3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0208 	bic.w	r2, r2, #8
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7f5b      	ldrb	r3, [r3, #29]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0204 	orr.w	r2, r2, #4
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e007      	b.n	8001b68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0204 	bic.w	r2, r2, #4
 8001b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	ea42 0103 	orr.w	r1, r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d12e      	bne.n	8001c18 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff fee1 	bl	8001998 <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bd8:	e012      	b.n	8001c00 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bda:	f7ff fedd 	bl	8001998 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b0a      	cmp	r3, #10
 8001be6:	d90b      	bls.n	8001c00 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e012      	b.n	8001c26 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e5      	bne.n	8001bda <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e006      	b.n	8001c26 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b089      	sub	sp, #36	@ 0x24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c42:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d003      	beq.n	8001c5a <HAL_CAN_AddTxMessage+0x2c>
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	f040 80ad 	bne.w	8001db4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8095 	beq.w	8001da4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	0e1b      	lsrs	r3, r3, #24
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c84:	2201      	movs	r2, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	6809      	ldr	r1, [r1, #0]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3318      	adds	r3, #24
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	440b      	add	r3, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e00f      	b.n	8001cd2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cbc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cc6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3318      	adds	r3, #24
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	7d1b      	ldrb	r3, [r3, #20]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d111      	bne.n	8001d12 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	6811      	ldr	r1, [r2, #0]
 8001d02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3304      	adds	r3, #4
 8001d10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3307      	adds	r3, #7
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	061a      	lsls	r2, r3, #24
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3306      	adds	r3, #6
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3305      	adds	r3, #5
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	3204      	adds	r2, #4
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	4610      	mov	r0, r2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	6811      	ldr	r1, [r2, #0]
 8001d3a:	ea43 0200 	orr.w	r2, r3, r0
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3303      	adds	r3, #3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	061a      	lsls	r2, r3, #24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3302      	adds	r3, #2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4313      	orrs	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6811      	ldr	r1, [r2, #0]
 8001d70:	ea43 0200 	orr.w	r2, r3, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3318      	adds	r3, #24
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	6811      	ldr	r1, [r2, #0]
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e00e      	b.n	8001dc2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e006      	b.n	8001dc2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	@ (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff3e 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff31 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa2 	bl	8001f2c <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fcca 	bl	8001998 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d008      	beq.n	8002024 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e052      	b.n	80020ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0216 	bic.w	r2, r2, #22
 8002032:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002042:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_DMA_Abort+0x62>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0208 	bic.w	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002074:	e013      	b.n	800209e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002076:	f7ff fc8f 	bl	8001998 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b05      	cmp	r3, #5
 8002082:	d90c      	bls.n	800209e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2203      	movs	r2, #3
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e015      	b.n	80020ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e4      	bne.n	8002076 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	223f      	movs	r2, #63	@ 0x3f
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2280      	movs	r2, #128	@ 0x80
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00c      	b.n	800210a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2205      	movs	r2, #5
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e165      	b.n	8002400 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 8154 	bne.w	80023fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d005      	beq.n	800216a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	2b02      	cmp	r3, #2
 8002168:	d130      	bne.n	80021cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d017      	beq.n	8002208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ae 	beq.w	80023fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_GPIO_Init+0x300>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002418 <HAL_GPIO_Init+0x300>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002418 <HAL_GPIO_Init+0x300>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a58      	ldr	r2, [pc, #352]	@ (800241c <HAL_GPIO_Init+0x304>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002420 <HAL_GPIO_Init+0x308>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002424 <HAL_GPIO_Init+0x30c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x216>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002428 <HAL_GPIO_Init+0x310>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x212>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4c      	ldr	r2, [pc, #304]	@ (800242c <HAL_GPIO_Init+0x314>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x20e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4b      	ldr	r2, [pc, #300]	@ (8002430 <HAL_GPIO_Init+0x318>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x20a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4a      	ldr	r2, [pc, #296]	@ (8002434 <HAL_GPIO_Init+0x31c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x206>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_GPIO_Init+0x320>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x202>
 8002316:	2306      	movs	r3, #6
 8002318:	e00c      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800231a:	2307      	movs	r3, #7
 800231c:	e00a      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800231e:	2305      	movs	r3, #5
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 8002322:	2304      	movs	r3, #4
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 8002332:	2300      	movs	r3, #0
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002344:	4935      	ldr	r1, [pc, #212]	@ (800241c <HAL_GPIO_Init+0x304>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002376:	4a31      	ldr	r2, [pc, #196]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237c:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <HAL_GPIO_Init+0x324>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a0:	4a26      	ldr	r2, [pc, #152]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a6:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ca:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	f67f ae96 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40021400 	.word	0x40021400
 8002438:	40021800 	.word	0x40021800
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e12b      	b.n	80026aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe ff08 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	@ 0x24
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a4:	f001 f908 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 80024a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a81      	ldr	r2, [pc, #516]	@ (80026b4 <HAL_I2C_Init+0x274>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d807      	bhi.n	80024c4 <HAL_I2C_Init+0x84>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a80      	ldr	r2, [pc, #512]	@ (80026b8 <HAL_I2C_Init+0x278>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e006      	b.n	80024d2 <HAL_I2C_Init+0x92>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a7d      	ldr	r2, [pc, #500]	@ (80026bc <HAL_I2C_Init+0x27c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e7      	b.n	80026aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a78      	ldr	r2, [pc, #480]	@ (80026c0 <HAL_I2C_Init+0x280>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0c9b      	lsrs	r3, r3, #18
 80024e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a6a      	ldr	r2, [pc, #424]	@ (80026b4 <HAL_I2C_Init+0x274>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d802      	bhi.n	8002514 <HAL_I2C_Init+0xd4>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3301      	adds	r3, #1
 8002512:	e009      	b.n	8002528 <HAL_I2C_Init+0xe8>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	4a69      	ldr	r2, [pc, #420]	@ (80026c4 <HAL_I2C_Init+0x284>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	3301      	adds	r3, #1
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800253a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	495c      	ldr	r1, [pc, #368]	@ (80026b4 <HAL_I2C_Init+0x274>)
 8002544:	428b      	cmp	r3, r1
 8002546:	d819      	bhi.n	800257c <HAL_I2C_Init+0x13c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e59      	subs	r1, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fbb1 f3f3 	udiv	r3, r1, r3
 8002556:	1c59      	adds	r1, r3, #1
 8002558:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800255c:	400b      	ands	r3, r1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_I2C_Init+0x138>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e59      	subs	r1, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002576:	e051      	b.n	800261c <HAL_I2C_Init+0x1dc>
 8002578:	2304      	movs	r3, #4
 800257a:	e04f      	b.n	800261c <HAL_I2C_Init+0x1dc>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_I2C_Init+0x168>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e012      	b.n	80025ce <HAL_I2C_Init+0x18e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	0099      	lsls	r1, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x196>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e022      	b.n	800261c <HAL_I2C_Init+0x1dc>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10e      	bne.n	80025fc <HAL_I2C_Init+0x1bc>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e58      	subs	r0, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	440b      	add	r3, r1
 80025ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025fa:	e00f      	b.n	800261c <HAL_I2C_Init+0x1dc>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	0099      	lsls	r1, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6809      	ldr	r1, [r1, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800264a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6911      	ldr	r1, [r2, #16]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	000186a0 	.word	0x000186a0
 80026b8:	001e847f 	.word	0x001e847f
 80026bc:	003d08ff 	.word	0x003d08ff
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	460b      	mov	r3, r1
 80026d6:	817b      	strh	r3, [r7, #10]
 80026d8:	4613      	mov	r3, r2
 80026da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff f95c 	bl	8001998 <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	f040 80e0 	bne.w	80028b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2319      	movs	r3, #25
 80026f6:	2201      	movs	r2, #1
 80026f8:	4970      	ldr	r1, [pc, #448]	@ (80028bc <HAL_I2C_Master_Transmit+0x1f4>)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fc64 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
 8002708:	e0d3      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_I2C_Master_Transmit+0x50>
 8002714:	2302      	movs	r3, #2
 8002716:	e0cc      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d007      	beq.n	800273e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2221      	movs	r2, #33	@ 0x21
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2210      	movs	r2, #16
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	893a      	ldrh	r2, [r7, #8]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a50      	ldr	r2, [pc, #320]	@ (80028c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800277e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 face 	bl	8002d28 <I2C_MasterRequestWrite>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e08d      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027ac:	e066      	b.n	800287c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fd22 	bl	80031fc <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11b      	bne.n	8002850 <HAL_I2C_Master_Transmit+0x188>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d017      	beq.n	8002850 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	6a39      	ldr	r1, [r7, #32]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fd19 	bl	800328c <I2C_WaitOnBTFFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	2b04      	cmp	r3, #4
 8002866:	d107      	bne.n	8002878 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002876:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e01a      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	d194      	bne.n	80027ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	00100002 	.word	0x00100002
 80028c0:	ffff0000 	.word	0xffff0000

080028c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
 80028d4:	4613      	mov	r3, r2
 80028d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff f85e 	bl	8001998 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	f040 8217 	bne.w	8002d1a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2319      	movs	r3, #25
 80028f2:	2201      	movs	r2, #1
 80028f4:	497c      	ldr	r1, [pc, #496]	@ (8002ae8 <HAL_I2C_Master_Receive+0x224>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fb66 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	e20a      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_I2C_Master_Receive+0x50>
 8002910:	2302      	movs	r3, #2
 8002912:	e203      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d007      	beq.n	800293a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002948:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2222      	movs	r2, #34	@ 0x22
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2210      	movs	r2, #16
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	893a      	ldrh	r2, [r7, #8]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a5c      	ldr	r2, [pc, #368]	@ (8002aec <HAL_I2C_Master_Receive+0x228>)
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800297c:	8979      	ldrh	r1, [r7, #10]
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fa52 	bl	8002e2c <I2C_MasterRequestRead>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1c4      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d113      	bne.n	80029c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e198      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d11b      	bne.n	8002a02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e178      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11b      	bne.n	8002a42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	e158      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a68:	e144      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	f200 80f1 	bhi.w	8002c56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d123      	bne.n	8002ac4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fc4b 	bl	800331c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e145      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ac2:	e117      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d14e      	bne.n	8002b6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4906      	ldr	r1, [pc, #24]	@ (8002af0 <HAL_I2C_Master_Receive+0x22c>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa76 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e11a      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
 8002ae6:	bf00      	nop
 8002ae8:	00100002 	.word	0x00100002
 8002aec:	ffff0000 	.word	0xffff0000
 8002af0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b68:	e0c4      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	2200      	movs	r2, #0
 8002b72:	496c      	ldr	r1, [pc, #432]	@ (8002d24 <HAL_I2C_Master_Receive+0x460>)
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fa27 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cb      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4955      	ldr	r1, [pc, #340]	@ (8002d24 <HAL_I2C_Master_Receive+0x460>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f9f9 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e09d      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c54:	e04e      	b.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fb5e 	bl	800331c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e058      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d124      	bne.n	8002cf4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f aeb6 	bne.w	8002a6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3728      	adds	r7, #40	@ 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00010004 	.word	0x00010004

08002d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d006      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d003      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d107      	bne.n	8002d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f91d 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e035      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	e01b      	b.n	8002e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0306 	and.w	r3, r3, #6
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 030f 	orn	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <I2C_MasterRequestWrite+0xfc>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f966 	bl	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e010      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4907      	ldr	r1, [pc, #28]	@ (8002e28 <I2C_MasterRequestWrite+0x100>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f956 	bl	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010008 	.word	0x00010008
 8002e28:	00010002 	.word	0x00010002

08002e2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d006      	beq.n	8002e66 <I2C_MasterRequestRead+0x3a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestRead+0x3a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00b      	b.n	8002e90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	2b11      	cmp	r3, #17
 8002e7e:	d107      	bne.n	8002e90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f893 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e079      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e05f      	b.n	8002fa0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	11db      	asrs	r3, r3, #7
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f063 030f 	orn	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4930      	ldr	r1, [pc, #192]	@ (8002fc0 <I2C_MasterRequestRead+0x194>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f8dc 	bl	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e054      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4929      	ldr	r1, [pc, #164]	@ (8002fc4 <I2C_MasterRequestRead+0x198>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8cc 	bl	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e044      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f831 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7a:	d103      	bne.n	8002f84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e017      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	11db      	asrs	r3, r3, #7
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0306 	and.w	r3, r3, #6
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f063 030e 	orn	r3, r3, #14
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4907      	ldr	r1, [pc, #28]	@ (8002fc4 <I2C_MasterRequestRead+0x198>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f888 	bl	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010008 	.word	0x00010008
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	e048      	b.n	800306c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d044      	beq.n	800306c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe fcd9 	bl	8001998 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d139      	bne.n	800306c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10d      	bne.n	800301e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	e00c      	b.n	8003038 <I2C_WaitOnFlagUntilTimeout+0x70>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	429a      	cmp	r2, r3
 800303c:	d116      	bne.n	800306c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e023      	b.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10d      	bne.n	8003092 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	e00c      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	43da      	mvns	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d093      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ca:	e071      	b.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030da:	d123      	bne.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e067      	b.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d041      	beq.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fe fc34 	bl	8001998 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d136      	bne.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10c      	bne.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e00b      	b.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	43da      	mvns	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4013      	ands	r3, r2
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e021      	b.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10c      	bne.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e00b      	b.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f af6d 	bne.w	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003208:	e034      	b.n	8003274 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f8e3 	bl	80033d6 <I2C_IsAcknowledgeFailed>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e034      	b.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d028      	beq.n	8003274 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7fe fbb9 	bl	8001998 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11d      	bne.n	8003274 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003242:	2b80      	cmp	r3, #128	@ 0x80
 8003244:	d016      	beq.n	8003274 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e007      	b.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327e:	2b80      	cmp	r3, #128	@ 0x80
 8003280:	d1c3      	bne.n	800320a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003298:	e034      	b.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f89b 	bl	80033d6 <I2C_IsAcknowledgeFailed>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e034      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d028      	beq.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fe fb71 	bl	8001998 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11d      	bne.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d016      	beq.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d1c3      	bne.n	800329a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003328:	e049      	b.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b10      	cmp	r3, #16
 8003336:	d119      	bne.n	800336c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0210 	mvn.w	r2, #16
 8003340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e030      	b.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fb14 	bl	8001998 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11d      	bne.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b40      	cmp	r3, #64	@ 0x40
 800338e:	d016      	beq.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e007      	b.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d1ae      	bne.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ec:	d11b      	bne.n	8003426 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	f043 0204 	orr.w	r2, r3, #4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	4a1f      	ldr	r2, [pc, #124]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	@ 0x40
 800344e:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003460:	f7fe fa9a 	bl	8001998 <HAL_GetTick>
 8003464:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003466:	e009      	b.n	800347c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003468:	f7fe fa96 	bl	8001998 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003476:	d901      	bls.n	800347c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e01f      	b.n	80034bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800347c:	4b13      	ldr	r3, [pc, #76]	@ (80034cc <HAL_PWREx_EnableOverDrive+0x98>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003488:	d1ee      	bne.n	8003468 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800348a:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003490:	f7fe fa82 	bl	8001998 <HAL_GetTick>
 8003494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003496:	e009      	b.n	80034ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003498:	f7fe fa7e 	bl	8001998 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034a6:	d901      	bls.n	80034ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e007      	b.n	80034bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <HAL_PWREx_EnableOverDrive+0x98>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034b8:	d1ee      	bne.n	8003498 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	420e0040 	.word	0x420e0040
 80034cc:	40007000 	.word	0x40007000
 80034d0:	420e0044 	.word	0x420e0044

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cc      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b68      	ldr	r3, [pc, #416]	@ (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90c      	bls.n	8003510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b65      	ldr	r3, [pc, #404]	@ (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b63      	ldr	r3, [pc, #396]	@ (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0b8      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003528:	4b59      	ldr	r3, [pc, #356]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a58      	ldr	r2, [pc, #352]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003540:	4b53      	ldr	r3, [pc, #332]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a52      	ldr	r2, [pc, #328]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800354a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b50      	ldr	r3, [pc, #320]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	494d      	ldr	r1, [pc, #308]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d044      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b47      	ldr	r3, [pc, #284]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d003      	beq.n	8003592 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	2b03      	cmp	r3, #3
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	4b3f      	ldr	r3, [pc, #252]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e067      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b2:	4b37      	ldr	r3, [pc, #220]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4934      	ldr	r1, [pc, #208]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c4:	f7fe f9e8 	bl	8001998 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fe f9e4 	bl	8001998 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e04f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 020c 	and.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1eb      	bne.n	80035cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f4:	4b25      	ldr	r3, [pc, #148]	@ (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20c      	bcs.n	800361c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b22      	ldr	r3, [pc, #136]	@ (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	@ (800368c <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e032      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4916      	ldr	r1, [pc, #88]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	490e      	ldr	r1, [pc, #56]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800365a:	f000 f855 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 800365e:	4602      	mov	r2, r0
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	490a      	ldr	r1, [pc, #40]	@ (8003694 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	5ccb      	ldrb	r3, [r1, r3]
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a09      	ldr	r2, [pc, #36]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe f948 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00
 8003690:	40023800 	.word	0x40023800
 8003694:	080070b4 	.word	0x080070b4
 8003698:	20000048 	.word	0x20000048
 800369c:	2000004c 	.word	0x2000004c

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000048 	.word	0x20000048

080036b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036bc:	f7ff fff0 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0a9b      	lsrs	r3, r3, #10
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	@ (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	080070c4 	.word	0x080070c4

080036e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e4:	f7ff ffdc 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0b5b      	lsrs	r3, r3, #13
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	080070c4 	.word	0x080070c4

08003708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800370c:	b0ae      	sub	sp, #184	@ 0xb8
 800370e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372e:	4bcb      	ldr	r3, [pc, #812]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b0c      	cmp	r3, #12
 8003738:	f200 8206 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x440>
 800373c:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <HAL_RCC_GetSysClockFreq+0x3c>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003779 	.word	0x08003779
 8003748:	08003b49 	.word	0x08003b49
 800374c:	08003b49 	.word	0x08003b49
 8003750:	08003b49 	.word	0x08003b49
 8003754:	08003781 	.word	0x08003781
 8003758:	08003b49 	.word	0x08003b49
 800375c:	08003b49 	.word	0x08003b49
 8003760:	08003b49 	.word	0x08003b49
 8003764:	08003789 	.word	0x08003789
 8003768:	08003b49 	.word	0x08003b49
 800376c:	08003b49 	.word	0x08003b49
 8003770:	08003b49 	.word	0x08003b49
 8003774:	08003979 	.word	0x08003979
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4bb9      	ldr	r3, [pc, #740]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x358>)
 800377a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800377e:	e1e7      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003780:	4bb8      	ldr	r3, [pc, #736]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003786:	e1e3      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003788:	4bb4      	ldr	r3, [pc, #720]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003794:	4bb1      	ldr	r3, [pc, #708]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d071      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a0:	4bae      	ldr	r3, [pc, #696]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80037b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037c6:	4622      	mov	r2, r4
 80037c8:	462b      	mov	r3, r5
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d8:	0150      	lsls	r0, r2, #5
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4621      	mov	r1, r4
 80037e0:	1a51      	subs	r1, r2, r1
 80037e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80037f8:	4649      	mov	r1, r9
 80037fa:	018b      	lsls	r3, r1, #6
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003802:	4641      	mov	r1, r8
 8003804:	018a      	lsls	r2, r1, #6
 8003806:	4641      	mov	r1, r8
 8003808:	1a51      	subs	r1, r2, r1
 800380a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800380c:	4649      	mov	r1, r9
 800380e:	eb63 0301 	sbc.w	r3, r3, r1
 8003812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003820:	4649      	mov	r1, r9
 8003822:	00cb      	lsls	r3, r1, #3
 8003824:	4641      	mov	r1, r8
 8003826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382a:	4641      	mov	r1, r8
 800382c:	00ca      	lsls	r2, r1, #3
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	4603      	mov	r3, r0
 8003834:	4622      	mov	r2, r4
 8003836:	189b      	adds	r3, r3, r2
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30
 800383a:	462b      	mov	r3, r5
 800383c:	460a      	mov	r2, r1
 800383e:	eb42 0303 	adc.w	r3, r2, r3
 8003842:	637b      	str	r3, [r7, #52]	@ 0x34
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003850:	4629      	mov	r1, r5
 8003852:	024b      	lsls	r3, r1, #9
 8003854:	4621      	mov	r1, r4
 8003856:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800385a:	4621      	mov	r1, r4
 800385c:	024a      	lsls	r2, r1, #9
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800386c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003870:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003874:	f7fc fd34 	bl	80002e0 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003882:	e067      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003884:	4b75      	ldr	r3, [pc, #468]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	2200      	movs	r2, #0
 800388c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003890:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003894:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800389e:	2300      	movs	r3, #0
 80038a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	f04f 0000 	mov.w	r0, #0
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	0159      	lsls	r1, r3, #5
 80038b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b8:	0150      	lsls	r0, r2, #5
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4621      	mov	r1, r4
 80038c0:	1a51      	subs	r1, r2, r1
 80038c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038c4:	4629      	mov	r1, r5
 80038c6:	eb63 0301 	sbc.w	r3, r3, r1
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80038d8:	4649      	mov	r1, r9
 80038da:	018b      	lsls	r3, r1, #6
 80038dc:	4641      	mov	r1, r8
 80038de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e2:	4641      	mov	r1, r8
 80038e4:	018a      	lsls	r2, r1, #6
 80038e6:	4641      	mov	r1, r8
 80038e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ec:	4649      	mov	r1, r9
 80038ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003906:	4692      	mov	sl, r2
 8003908:	469b      	mov	fp, r3
 800390a:	4623      	mov	r3, r4
 800390c:	eb1a 0303 	adds.w	r3, sl, r3
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	462b      	mov	r3, r5
 8003914:	eb4b 0303 	adc.w	r3, fp, r3
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003926:	4629      	mov	r1, r5
 8003928:	028b      	lsls	r3, r1, #10
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003930:	4621      	mov	r1, r4
 8003932:	028a      	lsls	r2, r1, #10
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800393c:	2200      	movs	r2, #0
 800393e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003940:	677a      	str	r2, [r7, #116]	@ 0x74
 8003942:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003946:	f7fc fccb 	bl	80002e0 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4613      	mov	r3, r2
 8003950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003954:	4b41      	ldr	r3, [pc, #260]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800396a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003976:	e0eb      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003978:	4b38      	ldr	r3, [pc, #224]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003984:	4b35      	ldr	r3, [pc, #212]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d06b      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003990:	4b32      	ldr	r3, [pc, #200]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	2200      	movs	r2, #0
 8003998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800399a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800399c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800399e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a4:	2300      	movs	r3, #0
 80039a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80039a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039ac:	4622      	mov	r2, r4
 80039ae:	462b      	mov	r3, r5
 80039b0:	f04f 0000 	mov.w	r0, #0
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	0159      	lsls	r1, r3, #5
 80039ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039be:	0150      	lsls	r0, r2, #5
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4621      	mov	r1, r4
 80039c6:	1a51      	subs	r1, r2, r1
 80039c8:	61b9      	str	r1, [r7, #24]
 80039ca:	4629      	mov	r1, r5
 80039cc:	eb63 0301 	sbc.w	r3, r3, r1
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039de:	4659      	mov	r1, fp
 80039e0:	018b      	lsls	r3, r1, #6
 80039e2:	4651      	mov	r1, sl
 80039e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039e8:	4651      	mov	r1, sl
 80039ea:	018a      	lsls	r2, r1, #6
 80039ec:	4651      	mov	r1, sl
 80039ee:	ebb2 0801 	subs.w	r8, r2, r1
 80039f2:	4659      	mov	r1, fp
 80039f4:	eb63 0901 	sbc.w	r9, r3, r1
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0c:	4690      	mov	r8, r2
 8003a0e:	4699      	mov	r9, r3
 8003a10:	4623      	mov	r3, r4
 8003a12:	eb18 0303 	adds.w	r3, r8, r3
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	462b      	mov	r3, r5
 8003a1a:	eb49 0303 	adc.w	r3, r9, r3
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	024b      	lsls	r3, r1, #9
 8003a30:	4621      	mov	r1, r4
 8003a32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a36:	4621      	mov	r1, r4
 8003a38:	024a      	lsls	r2, r1, #9
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a42:	2200      	movs	r2, #0
 8003a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a4c:	f7fc fc48 	bl	80002e0 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a5a:	e065      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x420>
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a68:	4b3d      	ldr	r3, [pc, #244]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	4611      	mov	r1, r2
 8003a74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a78:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	1a51      	subs	r1, r2, r1
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ab4:	4659      	mov	r1, fp
 8003ab6:	018b      	lsls	r3, r1, #6
 8003ab8:	4651      	mov	r1, sl
 8003aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003abe:	4651      	mov	r1, sl
 8003ac0:	018a      	lsls	r2, r1, #6
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	1a54      	subs	r4, r2, r1
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	eb63 0501 	sbc.w	r5, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	00eb      	lsls	r3, r5, #3
 8003ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ada:	00e2      	lsls	r2, r4, #3
 8003adc:	4614      	mov	r4, r2
 8003ade:	461d      	mov	r5, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	18e3      	adds	r3, r4, r3
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	eb45 0303 	adc.w	r3, r5, r3
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afa:	4629      	mov	r1, r5
 8003afc:	028b      	lsls	r3, r1, #10
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b04:	4621      	mov	r1, r4
 8003b06:	028a      	lsls	r2, r1, #10
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b10:	2200      	movs	r2, #0
 8003b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b1a:	f7fc fbe1 	bl	80002e0 <__aeabi_uldivmod>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4613      	mov	r3, r2
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b28:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0f1b      	lsrs	r3, r3, #28
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b46:	e003      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	37b8      	adds	r7, #184	@ 0xb8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400

08003b68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e28d      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8083 	beq.w	8003c8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b88:	4b94      	ldr	r3, [pc, #592]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d019      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b94:	4b91      	ldr	r3, [pc, #580]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bac:	d00c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4b8b      	ldr	r3, [pc, #556]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d112      	bne.n	8003be0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b84      	ldr	r3, [pc, #528]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <HAL_RCC_OscConfig+0x124>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d157      	bne.n	8003c8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e25a      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x90>
 8003bea:	4b7c      	ldr	r3, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7b      	ldr	r2, [pc, #492]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xcc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xb4>
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b73      	ldr	r3, [pc, #460]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a72      	ldr	r2, [pc, #456]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xcc>
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6e      	ldr	r2, [pc, #440]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b6c      	ldr	r3, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd feac 	bl	8001998 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fd fea8 	bl	8001998 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e21f      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b61      	ldr	r3, [pc, #388]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xdc>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd fe98 	bl	8001998 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fd fe94 	bl	8001998 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	@ 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e20b      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b57      	ldr	r3, [pc, #348]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x104>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d06f      	beq.n	8003d7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c9a:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d017      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
        || \
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d105      	bne.n	8003cbe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x186>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1d3      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4937      	ldr	r1, [pc, #220]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e03a      	b.n	8003d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b34      	ldr	r3, [pc, #208]	@ (8003de0 <HAL_RCC_OscConfig+0x278>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fe41 	bl	8001998 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fe3d 	bl	8001998 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1b4      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4925      	ldr	r1, [pc, #148]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_RCC_OscConfig+0x278>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fe20 	bl	8001998 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fe1c 	bl	8001998 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e193      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d036      	beq.n	8003df4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd fe00 	bl	8001998 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fdfc 	bl	8001998 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e173      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_OscConfig+0x274>)
 8003db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x234>
 8003dba:	e01b      	b.n	8003df4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fde9 	bl	8001998 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fd fde5 	bl	8001998 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d907      	bls.n	8003de8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e15c      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	42470000 	.word	0x42470000
 8003de4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4b8a      	ldr	r3, [pc, #552]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ea      	bne.n	8003dca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8097 	beq.w	8003f30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e06:	4b83      	ldr	r3, [pc, #524]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	4b7f      	ldr	r3, [pc, #508]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e22:	4b7c      	ldr	r3, [pc, #496]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b79      	ldr	r3, [pc, #484]	@ (8004018 <HAL_RCC_OscConfig+0x4b0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d118      	bne.n	8003e70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3e:	4b76      	ldr	r3, [pc, #472]	@ (8004018 <HAL_RCC_OscConfig+0x4b0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a75      	ldr	r2, [pc, #468]	@ (8004018 <HAL_RCC_OscConfig+0x4b0>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd fda5 	bl	8001998 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fd fda1 	bl	8001998 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e118      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b6c      	ldr	r3, [pc, #432]	@ (8004018 <HAL_RCC_OscConfig+0x4b0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x31e>
 8003e78:	4b66      	ldr	r3, [pc, #408]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	4a65      	ldr	r2, [pc, #404]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e84:	e01c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x358>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x340>
 8003e8e:	4b61      	ldr	r3, [pc, #388]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	4a60      	ldr	r2, [pc, #384]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x358>
 8003ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eac:	4a59      	ldr	r2, [pc, #356]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb4:	4b57      	ldr	r3, [pc, #348]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	4a56      	ldr	r2, [pc, #344]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003eba:	f023 0304 	bic.w	r3, r3, #4
 8003ebe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fd66 	bl	8001998 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fd62 	bl	8001998 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0d7      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ee      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x368>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fd50 	bl	8001998 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd fd4c 	bl	8001998 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0c1      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f12:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1ee      	bne.n	8003efc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f24:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	4a3a      	ldr	r2, [pc, #232]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80ad 	beq.w	8004094 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3a:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d060      	beq.n	8004008 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d145      	bne.n	8003fda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b33      	ldr	r3, [pc, #204]	@ (800401c <HAL_RCC_OscConfig+0x4b4>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fd20 	bl	8001998 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd fd1c 	bl	8001998 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e093      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	4b29      	ldr	r3, [pc, #164]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	3b01      	subs	r3, #1
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	491b      	ldr	r1, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <HAL_RCC_OscConfig+0x4b4>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd fcf1 	bl	8001998 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fd fced 	bl	8001998 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e064      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x452>
 8003fd8:	e05c      	b.n	8004094 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <HAL_RCC_OscConfig+0x4b4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fcda 	bl	8001998 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd fcd6 	bl	8001998 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04d      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_OscConfig+0x4ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x480>
 8004006:	e045      	b.n	8004094 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d107      	bne.n	8004020 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e040      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
 8004014:	40023800 	.word	0x40023800
 8004018:	40007000 	.word	0x40007000
 800401c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004020:	4b1f      	ldr	r3, [pc, #124]	@ (80040a0 <HAL_RCC_OscConfig+0x538>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d030      	beq.n	8004090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d129      	bne.n	8004090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d122      	bne.n	8004090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004050:	4013      	ands	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004058:	4293      	cmp	r3, r2
 800405a:	d119      	bne.n	8004090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	3b01      	subs	r3, #1
 800406a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d10f      	bne.n	8004090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e042      	b.n	800413c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd fb46 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	@ 0x24
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fdbd 	bl	8004c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800410c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800411c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	@ 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b20      	cmp	r3, #32
 8004162:	d175      	bne.n	8004250 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_UART_Transmit+0x2c>
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e06e      	b.n	8004252 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2221      	movs	r2, #33	@ 0x21
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004182:	f7fd fc09 	bl	8001998 <HAL_GetTick>
 8004186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419c:	d108      	bne.n	80041b0 <HAL_UART_Transmit+0x6c>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e003      	b.n	80041b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041b8:	e02e      	b.n	8004218 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fb1f 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e03a      	b.n	8004252 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	3302      	adds	r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	e007      	b.n	800420a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	3301      	adds	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1cb      	bne.n	80041ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	2140      	movs	r1, #64	@ 0x40
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 faeb 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e006      	b.n	8004252 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d112      	bne.n	800429a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Receive_IT+0x26>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e00b      	b.n	800429c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	461a      	mov	r2, r3
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb12 	bl	80048ba <UART_Start_Receive_IT>
 8004296:	4603      	mov	r3, r0
 8004298:	e000      	b.n	800429c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b0ba      	sub	sp, #232	@ 0xe8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_UART_IRQHandler+0x66>
 80042f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fbf2 	bl	8004aec <UART_Receive_IT>
      return;
 8004308:	e25b      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800430a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80de 	beq.w	80044d0 <HAL_UART_IRQHandler+0x22c>
 8004314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004324:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80d1 	beq.w	80044d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_UART_IRQHandler+0xae>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_UART_IRQHandler+0xd2>
 800435e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	f043 0202 	orr.w	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xf6>
 8004382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_UART_IRQHandler+0x126>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f043 0208 	orr.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 81f2 	beq.w	80047b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_UART_IRQHandler+0x14e>
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb7d 	bl	8004aec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <HAL_UART_IRQHandler+0x17a>
 8004416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d04f      	beq.n	80044be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa85 	bl	800492e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	d141      	bne.n	80044b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800444c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800445e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800446a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1d9      	bne.n	8004432 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	4a7e      	ldr	r2, [pc, #504]	@ (8004684 <HAL_UART_IRQHandler+0x3e0>)
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fe1d 	bl	80020d2 <HAL_DMA_Abort_IT>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00e      	b.n	80044cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f994 	bl	80047dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e00a      	b.n	80044cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f990 	bl	80047dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	e006      	b.n	80044cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f98c 	bl	80047dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044ca:	e175      	b.n	80047b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	bf00      	nop
    return;
 80044ce:	e173      	b.n	80047b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f040 814f 	bne.w	8004778 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8148 	beq.w	8004778 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8141 	beq.w	8004778 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b40      	cmp	r3, #64	@ 0x40
 8004518:	f040 80b6 	bne.w	8004688 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8145 	beq.w	80047bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800453a:	429a      	cmp	r2, r3
 800453c:	f080 813e 	bcs.w	80047bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004546:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004552:	f000 8088 	beq.w	8004666 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800456c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004582:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800458e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800459a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1d9      	bne.n	8004556 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3314      	adds	r3, #20
 80045c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e1      	bne.n	80045a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004602:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004604:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004608:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e3      	bne.n	80045de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004636:	f023 0310 	bic.w	r3, r3, #16
 800463a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004648:	65ba      	str	r2, [r7, #88]	@ 0x58
 800464a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800464e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e3      	bne.n	8004624 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd fcc6 	bl	8001ff2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004674:	b29b      	uxth	r3, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	b29b      	uxth	r3, r3
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f8b7 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004682:	e09b      	b.n	80047bc <HAL_UART_IRQHandler+0x518>
 8004684:	080049f5 	.word	0x080049f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 808e 	beq.w	80047c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8089 	beq.w	80047c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80046d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e3      	bne.n	80046ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	623b      	str	r3, [r7, #32]
   return(result);
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800470a:	633a      	str	r2, [r7, #48]	@ 0x30
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	60fb      	str	r3, [r7, #12]
   return(result);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0310 	bic.w	r3, r3, #16
 8004742:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004750:	61fa      	str	r2, [r7, #28]
 8004752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	617b      	str	r3, [r7, #20]
   return(result);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e3      	bne.n	800472c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800476a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f83d 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004776:	e023      	b.n	80047c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_UART_IRQHandler+0x4f4>
 8004784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f943 	bl	8004a1c <UART_Transmit_IT>
    return;
 8004796:	e014      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00e      	beq.n	80047c2 <HAL_UART_IRQHandler+0x51e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f983 	bl	8004abc <UART_EndTransmit_IT>
    return;
 80047b6:	e004      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80047b8:	bf00      	nop
 80047ba:	e002      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047c0:	bf00      	nop
  }
}
 80047c2:	37e8      	adds	r7, #232	@ 0xe8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004818:	e03b      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d037      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004822:	f7fd f8b9 	bl	8001998 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	429a      	cmp	r2, r3
 8004830:	d302      	bcc.n	8004838 <UART_WaitOnFlagUntilTimeout+0x30>
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e03a      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d023      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x8a>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b80      	cmp	r3, #128	@ 0x80
 800484e:	d020      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b40      	cmp	r3, #64	@ 0x40
 8004854:	d01d      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d116      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f857 	bl	800492e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2208      	movs	r2, #8
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e00f      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	bf0c      	ite	eq
 80048a2:	2301      	moveq	r3, #1
 80048a4:	2300      	movne	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d0b4      	beq.n	800481a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	4613      	mov	r3, r2
 80048c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	88fa      	ldrh	r2, [r7, #6]
 80048d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	88fa      	ldrh	r2, [r7, #6]
 80048d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2222      	movs	r2, #34	@ 0x22
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0220 	orr.w	r2, r2, #32
 800491e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800492e:	b480      	push	{r7}
 8004930:	b095      	sub	sp, #84	@ 0x54
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800494c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004956:	643a      	str	r2, [r7, #64]	@ 0x40
 8004958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800495c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	61fb      	str	r3, [r7, #28]
   return(result);
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3314      	adds	r3, #20
 8004988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800498a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d119      	bne.n	80049da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f023 0310 	bic.w	r3, r3, #16
 80049bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049c6:	61ba      	str	r2, [r7, #24]
 80049c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6979      	ldr	r1, [r7, #20]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	613b      	str	r3, [r7, #16]
   return(result);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e5      	bne.n	80049a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049e8:	bf00      	nop
 80049ea:	3754      	adds	r7, #84	@ 0x54
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff fee4 	bl	80047dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b21      	cmp	r3, #33	@ 0x21
 8004a2e:	d13e      	bne.n	8004aae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a38:	d114      	bne.n	8004a64 <UART_Transmit_IT+0x48>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d110      	bne.n	8004a64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e008      	b.n	8004a76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6211      	str	r1, [r2, #32]
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff fe73 	bl	80047c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08c      	sub	sp, #48	@ 0x30
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b22      	cmp	r3, #34	@ 0x22
 8004afe:	f040 80ae 	bne.w	8004c5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0a:	d117      	bne.n	8004b3c <UART_Receive_IT+0x50>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d113      	bne.n	8004b3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b3a:	e026      	b.n	8004b8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d007      	beq.n	8004b60 <UART_Receive_IT+0x74>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <UART_Receive_IT+0x82>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e008      	b.n	8004b80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4619      	mov	r1, r3
 8004b98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d15d      	bne.n	8004c5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0220 	bic.w	r2, r2, #32
 8004bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d135      	bne.n	8004c50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f023 0310 	bic.w	r3, r3, #16
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0a:	623a      	str	r2, [r7, #32]
 8004c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	69f9      	ldr	r1, [r7, #28]
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e5      	bne.n	8004bea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d10a      	bne.n	8004c42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fdd1 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
 8004c4e:	e002      	b.n	8004c56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fb ff93 	bl	8000b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e002      	b.n	8004c60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3730      	adds	r7, #48	@ 0x30
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c6c:	b0c0      	sub	sp, #256	@ 0x100
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	ea40 0301 	orr.w	r3, r0, r1
 8004c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cc0:	f021 010c 	bic.w	r1, r1, #12
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	6999      	ldr	r1, [r3, #24]
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	ea40 0301 	orr.w	r3, r0, r1
 8004cee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8004f34 <UART_SetConfig+0x2cc>)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d005      	beq.n	8004d08 <UART_SetConfig+0xa0>
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b8d      	ldr	r3, [pc, #564]	@ (8004f38 <UART_SetConfig+0x2d0>)
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d104      	bne.n	8004d12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fcea 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d10:	e003      	b.n	8004d1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d12:	f7fe fcd1 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8004d16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d24:	f040 810c 	bne.w	8004f40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	1891      	adds	r1, r2, r2
 8004d40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d42:	415b      	adcs	r3, r3
 8004d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	eb12 0801 	adds.w	r8, r2, r1
 8004d50:	4629      	mov	r1, r5
 8004d52:	eb43 0901 	adc.w	r9, r3, r1
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d6a:	4690      	mov	r8, r2
 8004d6c:	4699      	mov	r9, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	eb18 0303 	adds.w	r3, r8, r3
 8004d74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d78:	462b      	mov	r3, r5
 8004d7a:	eb49 0303 	adc.w	r3, r9, r3
 8004d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d96:	460b      	mov	r3, r1
 8004d98:	18db      	adds	r3, r3, r3
 8004d9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	eb42 0303 	adc.w	r3, r2, r3
 8004da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004da4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004dac:	f7fb fa98 	bl	80002e0 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4b61      	ldr	r3, [pc, #388]	@ (8004f3c <UART_SetConfig+0x2d4>)
 8004db6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	011c      	lsls	r4, r3, #4
 8004dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	1891      	adds	r1, r2, r2
 8004dd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004dd8:	415b      	adcs	r3, r3
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004de0:	4641      	mov	r1, r8
 8004de2:	eb12 0a01 	adds.w	sl, r2, r1
 8004de6:	4649      	mov	r1, r9
 8004de8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e00:	4692      	mov	sl, r2
 8004e02:	469b      	mov	fp, r3
 8004e04:	4643      	mov	r3, r8
 8004e06:	eb1a 0303 	adds.w	r3, sl, r3
 8004e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	eb4b 0303 	adc.w	r3, fp, r3
 8004e14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	18db      	adds	r3, r3, r3
 8004e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e32:	4613      	mov	r3, r2
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e42:	f7fb fa4d 	bl	80002e0 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f3c <UART_SetConfig+0x2d4>)
 8004e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2264      	movs	r2, #100	@ 0x64
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	1acb      	subs	r3, r1, r3
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e62:	4b36      	ldr	r3, [pc, #216]	@ (8004f3c <UART_SetConfig+0x2d4>)
 8004e64:	fba3 2302 	umull	r2, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e70:	441c      	add	r4, r3
 8004e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e84:	4642      	mov	r2, r8
 8004e86:	464b      	mov	r3, r9
 8004e88:	1891      	adds	r1, r2, r2
 8004e8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e8c:	415b      	adcs	r3, r3
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e94:	4641      	mov	r1, r8
 8004e96:	1851      	adds	r1, r2, r1
 8004e98:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	414b      	adcs	r3, r1
 8004e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004eac:	4659      	mov	r1, fp
 8004eae:	00cb      	lsls	r3, r1, #3
 8004eb0:	4651      	mov	r1, sl
 8004eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	00ca      	lsls	r2, r1, #3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ec8:	464b      	mov	r3, r9
 8004eca:	460a      	mov	r2, r1
 8004ecc:	eb42 0303 	adc.w	r3, r2, r3
 8004ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ee0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ee8:	460b      	mov	r3, r1
 8004eea:	18db      	adds	r3, r3, r3
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eee:	4613      	mov	r3, r2
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004efa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004efe:	f7fb f9ef 	bl	80002e0 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <UART_SetConfig+0x2d4>)
 8004f08:	fba3 1302 	umull	r1, r3, r3, r2
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	2164      	movs	r1, #100	@ 0x64
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	3332      	adds	r3, #50	@ 0x32
 8004f1a:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <UART_SetConfig+0x2d4>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	f003 0207 	and.w	r2, r3, #7
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4422      	add	r2, r4
 8004f2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f30:	e106      	b.n	8005140 <UART_SetConfig+0x4d8>
 8004f32:	bf00      	nop
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40011400 	.word	0x40011400
 8004f3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f52:	4642      	mov	r2, r8
 8004f54:	464b      	mov	r3, r9
 8004f56:	1891      	adds	r1, r2, r2
 8004f58:	6239      	str	r1, [r7, #32]
 8004f5a:	415b      	adcs	r3, r3
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f62:	4641      	mov	r1, r8
 8004f64:	1854      	adds	r4, r2, r1
 8004f66:	4649      	mov	r1, r9
 8004f68:	eb43 0501 	adc.w	r5, r3, r1
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	00eb      	lsls	r3, r5, #3
 8004f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7a:	00e2      	lsls	r2, r4, #3
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	18e3      	adds	r3, r4, r3
 8004f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f88:	464b      	mov	r3, r9
 8004f8a:	eb45 0303 	adc.w	r3, r5, r3
 8004f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fae:	4629      	mov	r1, r5
 8004fb0:	008b      	lsls	r3, r1, #2
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb8:	4621      	mov	r1, r4
 8004fba:	008a      	lsls	r2, r1, #2
 8004fbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fc0:	f7fb f98e 	bl	80002e0 <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4b60      	ldr	r3, [pc, #384]	@ (800514c <UART_SetConfig+0x4e4>)
 8004fca:	fba3 2302 	umull	r2, r3, r3, r2
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	011c      	lsls	r4, r3, #4
 8004fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	61b9      	str	r1, [r7, #24]
 8004fec:	415b      	adcs	r3, r3
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	1851      	adds	r1, r2, r1
 8004ff8:	6139      	str	r1, [r7, #16]
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800500c:	4659      	mov	r1, fp
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4651      	mov	r1, sl
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4651      	mov	r1, sl
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4642      	mov	r2, r8
 8005022:	189b      	adds	r3, r3, r2
 8005024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005028:	464b      	mov	r3, r9
 800502a:	460a      	mov	r2, r1
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800503e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800504c:	4649      	mov	r1, r9
 800504e:	008b      	lsls	r3, r1, #2
 8005050:	4641      	mov	r1, r8
 8005052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005056:	4641      	mov	r1, r8
 8005058:	008a      	lsls	r2, r1, #2
 800505a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800505e:	f7fb f93f 	bl	80002e0 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4611      	mov	r1, r2
 8005068:	4b38      	ldr	r3, [pc, #224]	@ (800514c <UART_SetConfig+0x4e4>)
 800506a:	fba3 2301 	umull	r2, r3, r3, r1
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2264      	movs	r2, #100	@ 0x64
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	1acb      	subs	r3, r1, r3
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	3332      	adds	r3, #50	@ 0x32
 800507c:	4a33      	ldr	r2, [pc, #204]	@ (800514c <UART_SetConfig+0x4e4>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005088:	441c      	add	r4, r3
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	673b      	str	r3, [r7, #112]	@ 0x70
 8005092:	677a      	str	r2, [r7, #116]	@ 0x74
 8005094:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	1891      	adds	r1, r2, r2
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	415b      	adcs	r3, r3
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050a8:	4641      	mov	r1, r8
 80050aa:	1851      	adds	r1, r2, r1
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	4649      	mov	r1, r9
 80050b0:	414b      	adcs	r3, r1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050c0:	4659      	mov	r1, fp
 80050c2:	00cb      	lsls	r3, r1, #3
 80050c4:	4651      	mov	r1, sl
 80050c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ca:	4651      	mov	r1, sl
 80050cc:	00ca      	lsls	r2, r1, #3
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	4642      	mov	r2, r8
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050da:	464b      	mov	r3, r9
 80050dc:	460a      	mov	r2, r1
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050fc:	4649      	mov	r1, r9
 80050fe:	008b      	lsls	r3, r1, #2
 8005100:	4641      	mov	r1, r8
 8005102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005106:	4641      	mov	r1, r8
 8005108:	008a      	lsls	r2, r1, #2
 800510a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800510e:	f7fb f8e7 	bl	80002e0 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <UART_SetConfig+0x4e4>)
 8005118:	fba3 1302 	umull	r1, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2164      	movs	r1, #100	@ 0x64
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	3332      	adds	r3, #50	@ 0x32
 800512a:	4a08      	ldr	r2, [pc, #32]	@ (800514c <UART_SetConfig+0x4e4>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f003 020f 	and.w	r2, r3, #15
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4422      	add	r2, r4
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005146:	46bd      	mov	sp, r7
 8005148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800514c:	51eb851f 	.word	0x51eb851f

08005150 <std>:
 8005150:	2300      	movs	r3, #0
 8005152:	b510      	push	{r4, lr}
 8005154:	4604      	mov	r4, r0
 8005156:	e9c0 3300 	strd	r3, r3, [r0]
 800515a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800515e:	6083      	str	r3, [r0, #8]
 8005160:	8181      	strh	r1, [r0, #12]
 8005162:	6643      	str	r3, [r0, #100]	@ 0x64
 8005164:	81c2      	strh	r2, [r0, #14]
 8005166:	6183      	str	r3, [r0, #24]
 8005168:	4619      	mov	r1, r3
 800516a:	2208      	movs	r2, #8
 800516c:	305c      	adds	r0, #92	@ 0x5c
 800516e:	f000 fa59 	bl	8005624 <memset>
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <std+0x58>)
 8005174:	6263      	str	r3, [r4, #36]	@ 0x24
 8005176:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <std+0x5c>)
 8005178:	62a3      	str	r3, [r4, #40]	@ 0x28
 800517a:	4b0d      	ldr	r3, [pc, #52]	@ (80051b0 <std+0x60>)
 800517c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <std+0x64>)
 8005180:	6323      	str	r3, [r4, #48]	@ 0x30
 8005182:	4b0d      	ldr	r3, [pc, #52]	@ (80051b8 <std+0x68>)
 8005184:	6224      	str	r4, [r4, #32]
 8005186:	429c      	cmp	r4, r3
 8005188:	d006      	beq.n	8005198 <std+0x48>
 800518a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800518e:	4294      	cmp	r4, r2
 8005190:	d002      	beq.n	8005198 <std+0x48>
 8005192:	33d0      	adds	r3, #208	@ 0xd0
 8005194:	429c      	cmp	r4, r3
 8005196:	d105      	bne.n	80051a4 <std+0x54>
 8005198:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800519c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a0:	f000 baca 	b.w	8005738 <__retarget_lock_init_recursive>
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	bf00      	nop
 80051a8:	08005471 	.word	0x08005471
 80051ac:	08005497 	.word	0x08005497
 80051b0:	080054cf 	.word	0x080054cf
 80051b4:	080054f3 	.word	0x080054f3
 80051b8:	200002d4 	.word	0x200002d4

080051bc <stdio_exit_handler>:
 80051bc:	4a02      	ldr	r2, [pc, #8]	@ (80051c8 <stdio_exit_handler+0xc>)
 80051be:	4903      	ldr	r1, [pc, #12]	@ (80051cc <stdio_exit_handler+0x10>)
 80051c0:	4803      	ldr	r0, [pc, #12]	@ (80051d0 <stdio_exit_handler+0x14>)
 80051c2:	f000 b869 	b.w	8005298 <_fwalk_sglue>
 80051c6:	bf00      	nop
 80051c8:	20000054 	.word	0x20000054
 80051cc:	080068bd 	.word	0x080068bd
 80051d0:	20000064 	.word	0x20000064

080051d4 <cleanup_stdio>:
 80051d4:	6841      	ldr	r1, [r0, #4]
 80051d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005208 <cleanup_stdio+0x34>)
 80051d8:	4299      	cmp	r1, r3
 80051da:	b510      	push	{r4, lr}
 80051dc:	4604      	mov	r4, r0
 80051de:	d001      	beq.n	80051e4 <cleanup_stdio+0x10>
 80051e0:	f001 fb6c 	bl	80068bc <_fflush_r>
 80051e4:	68a1      	ldr	r1, [r4, #8]
 80051e6:	4b09      	ldr	r3, [pc, #36]	@ (800520c <cleanup_stdio+0x38>)
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d002      	beq.n	80051f2 <cleanup_stdio+0x1e>
 80051ec:	4620      	mov	r0, r4
 80051ee:	f001 fb65 	bl	80068bc <_fflush_r>
 80051f2:	68e1      	ldr	r1, [r4, #12]
 80051f4:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <cleanup_stdio+0x3c>)
 80051f6:	4299      	cmp	r1, r3
 80051f8:	d004      	beq.n	8005204 <cleanup_stdio+0x30>
 80051fa:	4620      	mov	r0, r4
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	f001 bb5c 	b.w	80068bc <_fflush_r>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	200002d4 	.word	0x200002d4
 800520c:	2000033c 	.word	0x2000033c
 8005210:	200003a4 	.word	0x200003a4

08005214 <global_stdio_init.part.0>:
 8005214:	b510      	push	{r4, lr}
 8005216:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <global_stdio_init.part.0+0x30>)
 8005218:	4c0b      	ldr	r4, [pc, #44]	@ (8005248 <global_stdio_init.part.0+0x34>)
 800521a:	4a0c      	ldr	r2, [pc, #48]	@ (800524c <global_stdio_init.part.0+0x38>)
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	4620      	mov	r0, r4
 8005220:	2200      	movs	r2, #0
 8005222:	2104      	movs	r1, #4
 8005224:	f7ff ff94 	bl	8005150 <std>
 8005228:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800522c:	2201      	movs	r2, #1
 800522e:	2109      	movs	r1, #9
 8005230:	f7ff ff8e 	bl	8005150 <std>
 8005234:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005238:	2202      	movs	r2, #2
 800523a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800523e:	2112      	movs	r1, #18
 8005240:	f7ff bf86 	b.w	8005150 <std>
 8005244:	2000040c 	.word	0x2000040c
 8005248:	200002d4 	.word	0x200002d4
 800524c:	080051bd 	.word	0x080051bd

08005250 <__sfp_lock_acquire>:
 8005250:	4801      	ldr	r0, [pc, #4]	@ (8005258 <__sfp_lock_acquire+0x8>)
 8005252:	f000 ba72 	b.w	800573a <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	20000415 	.word	0x20000415

0800525c <__sfp_lock_release>:
 800525c:	4801      	ldr	r0, [pc, #4]	@ (8005264 <__sfp_lock_release+0x8>)
 800525e:	f000 ba6d 	b.w	800573c <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	20000415 	.word	0x20000415

08005268 <__sinit>:
 8005268:	b510      	push	{r4, lr}
 800526a:	4604      	mov	r4, r0
 800526c:	f7ff fff0 	bl	8005250 <__sfp_lock_acquire>
 8005270:	6a23      	ldr	r3, [r4, #32]
 8005272:	b11b      	cbz	r3, 800527c <__sinit+0x14>
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f7ff bff0 	b.w	800525c <__sfp_lock_release>
 800527c:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <__sinit+0x28>)
 800527e:	6223      	str	r3, [r4, #32]
 8005280:	4b04      	ldr	r3, [pc, #16]	@ (8005294 <__sinit+0x2c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f5      	bne.n	8005274 <__sinit+0xc>
 8005288:	f7ff ffc4 	bl	8005214 <global_stdio_init.part.0>
 800528c:	e7f2      	b.n	8005274 <__sinit+0xc>
 800528e:	bf00      	nop
 8005290:	080051d5 	.word	0x080051d5
 8005294:	2000040c 	.word	0x2000040c

08005298 <_fwalk_sglue>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	4607      	mov	r7, r0
 800529e:	4688      	mov	r8, r1
 80052a0:	4614      	mov	r4, r2
 80052a2:	2600      	movs	r6, #0
 80052a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a8:	f1b9 0901 	subs.w	r9, r9, #1
 80052ac:	d505      	bpl.n	80052ba <_fwalk_sglue+0x22>
 80052ae:	6824      	ldr	r4, [r4, #0]
 80052b0:	2c00      	cmp	r4, #0
 80052b2:	d1f7      	bne.n	80052a4 <_fwalk_sglue+0xc>
 80052b4:	4630      	mov	r0, r6
 80052b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d907      	bls.n	80052d0 <_fwalk_sglue+0x38>
 80052c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052c4:	3301      	adds	r3, #1
 80052c6:	d003      	beq.n	80052d0 <_fwalk_sglue+0x38>
 80052c8:	4629      	mov	r1, r5
 80052ca:	4638      	mov	r0, r7
 80052cc:	47c0      	blx	r8
 80052ce:	4306      	orrs	r6, r0
 80052d0:	3568      	adds	r5, #104	@ 0x68
 80052d2:	e7e9      	b.n	80052a8 <_fwalk_sglue+0x10>

080052d4 <iprintf>:
 80052d4:	b40f      	push	{r0, r1, r2, r3}
 80052d6:	b507      	push	{r0, r1, r2, lr}
 80052d8:	4906      	ldr	r1, [pc, #24]	@ (80052f4 <iprintf+0x20>)
 80052da:	ab04      	add	r3, sp, #16
 80052dc:	6808      	ldr	r0, [r1, #0]
 80052de:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e2:	6881      	ldr	r1, [r0, #8]
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	f000 fe71 	bl	8005fcc <_vfiprintf_r>
 80052ea:	b003      	add	sp, #12
 80052ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80052f0:	b004      	add	sp, #16
 80052f2:	4770      	bx	lr
 80052f4:	20000060 	.word	0x20000060

080052f8 <_puts_r>:
 80052f8:	6a03      	ldr	r3, [r0, #32]
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	6884      	ldr	r4, [r0, #8]
 80052fe:	4605      	mov	r5, r0
 8005300:	460e      	mov	r6, r1
 8005302:	b90b      	cbnz	r3, 8005308 <_puts_r+0x10>
 8005304:	f7ff ffb0 	bl	8005268 <__sinit>
 8005308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800530a:	07db      	lsls	r3, r3, #31
 800530c:	d405      	bmi.n	800531a <_puts_r+0x22>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	0598      	lsls	r0, r3, #22
 8005312:	d402      	bmi.n	800531a <_puts_r+0x22>
 8005314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005316:	f000 fa10 	bl	800573a <__retarget_lock_acquire_recursive>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	0719      	lsls	r1, r3, #28
 800531e:	d502      	bpl.n	8005326 <_puts_r+0x2e>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d135      	bne.n	8005392 <_puts_r+0x9a>
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f925 	bl	8005578 <__swsetup_r>
 800532e:	b380      	cbz	r0, 8005392 <_puts_r+0x9a>
 8005330:	f04f 35ff 	mov.w	r5, #4294967295
 8005334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005336:	07da      	lsls	r2, r3, #31
 8005338:	d405      	bmi.n	8005346 <_puts_r+0x4e>
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	059b      	lsls	r3, r3, #22
 800533e:	d402      	bmi.n	8005346 <_puts_r+0x4e>
 8005340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005342:	f000 f9fb 	bl	800573c <__retarget_lock_release_recursive>
 8005346:	4628      	mov	r0, r5
 8005348:	bd70      	pop	{r4, r5, r6, pc}
 800534a:	2b00      	cmp	r3, #0
 800534c:	da04      	bge.n	8005358 <_puts_r+0x60>
 800534e:	69a2      	ldr	r2, [r4, #24]
 8005350:	429a      	cmp	r2, r3
 8005352:	dc17      	bgt.n	8005384 <_puts_r+0x8c>
 8005354:	290a      	cmp	r1, #10
 8005356:	d015      	beq.n	8005384 <_puts_r+0x8c>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	7019      	strb	r1, [r3, #0]
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005366:	3b01      	subs	r3, #1
 8005368:	60a3      	str	r3, [r4, #8]
 800536a:	2900      	cmp	r1, #0
 800536c:	d1ed      	bne.n	800534a <_puts_r+0x52>
 800536e:	2b00      	cmp	r3, #0
 8005370:	da11      	bge.n	8005396 <_puts_r+0x9e>
 8005372:	4622      	mov	r2, r4
 8005374:	210a      	movs	r1, #10
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f8bf 	bl	80054fa <__swbuf_r>
 800537c:	3001      	adds	r0, #1
 800537e:	d0d7      	beq.n	8005330 <_puts_r+0x38>
 8005380:	250a      	movs	r5, #10
 8005382:	e7d7      	b.n	8005334 <_puts_r+0x3c>
 8005384:	4622      	mov	r2, r4
 8005386:	4628      	mov	r0, r5
 8005388:	f000 f8b7 	bl	80054fa <__swbuf_r>
 800538c:	3001      	adds	r0, #1
 800538e:	d1e7      	bne.n	8005360 <_puts_r+0x68>
 8005390:	e7ce      	b.n	8005330 <_puts_r+0x38>
 8005392:	3e01      	subs	r6, #1
 8005394:	e7e4      	b.n	8005360 <_puts_r+0x68>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	6022      	str	r2, [r4, #0]
 800539c:	220a      	movs	r2, #10
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e7ee      	b.n	8005380 <_puts_r+0x88>
	...

080053a4 <puts>:
 80053a4:	4b02      	ldr	r3, [pc, #8]	@ (80053b0 <puts+0xc>)
 80053a6:	4601      	mov	r1, r0
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	f7ff bfa5 	b.w	80052f8 <_puts_r>
 80053ae:	bf00      	nop
 80053b0:	20000060 	.word	0x20000060

080053b4 <sniprintf>:
 80053b4:	b40c      	push	{r2, r3}
 80053b6:	b530      	push	{r4, r5, lr}
 80053b8:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <sniprintf+0x64>)
 80053ba:	1e0c      	subs	r4, r1, #0
 80053bc:	681d      	ldr	r5, [r3, #0]
 80053be:	b09d      	sub	sp, #116	@ 0x74
 80053c0:	da08      	bge.n	80053d4 <sniprintf+0x20>
 80053c2:	238b      	movs	r3, #139	@ 0x8b
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	b01d      	add	sp, #116	@ 0x74
 80053cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053d0:	b002      	add	sp, #8
 80053d2:	4770      	bx	lr
 80053d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80053d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80053dc:	bf14      	ite	ne
 80053de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80053e2:	4623      	moveq	r3, r4
 80053e4:	9304      	str	r3, [sp, #16]
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053ec:	9002      	str	r0, [sp, #8]
 80053ee:	9006      	str	r0, [sp, #24]
 80053f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80053f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80053f6:	ab21      	add	r3, sp, #132	@ 0x84
 80053f8:	a902      	add	r1, sp, #8
 80053fa:	4628      	mov	r0, r5
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	f000 faf3 	bl	80059e8 <_svfiprintf_r>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	bfbc      	itt	lt
 8005406:	238b      	movlt	r3, #139	@ 0x8b
 8005408:	602b      	strlt	r3, [r5, #0]
 800540a:	2c00      	cmp	r4, #0
 800540c:	d0dd      	beq.n	80053ca <sniprintf+0x16>
 800540e:	9b02      	ldr	r3, [sp, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e7d9      	b.n	80053ca <sniprintf+0x16>
 8005416:	bf00      	nop
 8005418:	20000060 	.word	0x20000060

0800541c <siscanf>:
 800541c:	b40e      	push	{r1, r2, r3}
 800541e:	b530      	push	{r4, r5, lr}
 8005420:	b09c      	sub	sp, #112	@ 0x70
 8005422:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005424:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005428:	f854 5b04 	ldr.w	r5, [r4], #4
 800542c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005430:	9002      	str	r0, [sp, #8]
 8005432:	9006      	str	r0, [sp, #24]
 8005434:	f7fa fef6 	bl	8000224 <strlen>
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <siscanf+0x4c>)
 800543a:	9003      	str	r0, [sp, #12]
 800543c:	9007      	str	r0, [sp, #28]
 800543e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005440:	480a      	ldr	r0, [pc, #40]	@ (800546c <siscanf+0x50>)
 8005442:	9401      	str	r4, [sp, #4]
 8005444:	2300      	movs	r3, #0
 8005446:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005448:	9314      	str	r3, [sp, #80]	@ 0x50
 800544a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800544e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005452:	462a      	mov	r2, r5
 8005454:	4623      	mov	r3, r4
 8005456:	a902      	add	r1, sp, #8
 8005458:	6800      	ldr	r0, [r0, #0]
 800545a:	f000 fc19 	bl	8005c90 <__ssvfiscanf_r>
 800545e:	b01c      	add	sp, #112	@ 0x70
 8005460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005464:	b003      	add	sp, #12
 8005466:	4770      	bx	lr
 8005468:	08005493 	.word	0x08005493
 800546c:	20000060 	.word	0x20000060

08005470 <__sread>:
 8005470:	b510      	push	{r4, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	f000 f910 	bl	800569c <_read_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	bfab      	itete	ge
 8005480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005482:	89a3      	ldrhlt	r3, [r4, #12]
 8005484:	181b      	addge	r3, r3, r0
 8005486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800548a:	bfac      	ite	ge
 800548c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800548e:	81a3      	strhlt	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__seofread>:
 8005492:	2000      	movs	r0, #0
 8005494:	4770      	bx	lr

08005496 <__swrite>:
 8005496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549a:	461f      	mov	r7, r3
 800549c:	898b      	ldrh	r3, [r1, #12]
 800549e:	05db      	lsls	r3, r3, #23
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	4616      	mov	r6, r2
 80054a6:	d505      	bpl.n	80054b4 <__swrite+0x1e>
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	2302      	movs	r3, #2
 80054ae:	2200      	movs	r2, #0
 80054b0:	f000 f8e2 	bl	8005678 <_lseek_r>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	4632      	mov	r2, r6
 80054c2:	463b      	mov	r3, r7
 80054c4:	4628      	mov	r0, r5
 80054c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	f000 b8f9 	b.w	80056c0 <_write_r>

080054ce <__sseek>:
 80054ce:	b510      	push	{r4, lr}
 80054d0:	460c      	mov	r4, r1
 80054d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d6:	f000 f8cf 	bl	8005678 <_lseek_r>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	bf15      	itete	ne
 80054e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ea:	81a3      	strheq	r3, [r4, #12]
 80054ec:	bf18      	it	ne
 80054ee:	81a3      	strhne	r3, [r4, #12]
 80054f0:	bd10      	pop	{r4, pc}

080054f2 <__sclose>:
 80054f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f6:	f000 b8af 	b.w	8005658 <_close_r>

080054fa <__swbuf_r>:
 80054fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fc:	460e      	mov	r6, r1
 80054fe:	4614      	mov	r4, r2
 8005500:	4605      	mov	r5, r0
 8005502:	b118      	cbz	r0, 800550c <__swbuf_r+0x12>
 8005504:	6a03      	ldr	r3, [r0, #32]
 8005506:	b90b      	cbnz	r3, 800550c <__swbuf_r+0x12>
 8005508:	f7ff feae 	bl	8005268 <__sinit>
 800550c:	69a3      	ldr	r3, [r4, #24]
 800550e:	60a3      	str	r3, [r4, #8]
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	071a      	lsls	r2, r3, #28
 8005514:	d501      	bpl.n	800551a <__swbuf_r+0x20>
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	b943      	cbnz	r3, 800552c <__swbuf_r+0x32>
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 f82b 	bl	8005578 <__swsetup_r>
 8005522:	b118      	cbz	r0, 800552c <__swbuf_r+0x32>
 8005524:	f04f 37ff 	mov.w	r7, #4294967295
 8005528:	4638      	mov	r0, r7
 800552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	6922      	ldr	r2, [r4, #16]
 8005530:	1a98      	subs	r0, r3, r2
 8005532:	6963      	ldr	r3, [r4, #20]
 8005534:	b2f6      	uxtb	r6, r6
 8005536:	4283      	cmp	r3, r0
 8005538:	4637      	mov	r7, r6
 800553a:	dc05      	bgt.n	8005548 <__swbuf_r+0x4e>
 800553c:	4621      	mov	r1, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f001 f9bc 	bl	80068bc <_fflush_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	d1ed      	bne.n	8005524 <__swbuf_r+0x2a>
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	3b01      	subs	r3, #1
 800554c:	60a3      	str	r3, [r4, #8]
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	701e      	strb	r6, [r3, #0]
 8005556:	6962      	ldr	r2, [r4, #20]
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	429a      	cmp	r2, r3
 800555c:	d004      	beq.n	8005568 <__swbuf_r+0x6e>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	07db      	lsls	r3, r3, #31
 8005562:	d5e1      	bpl.n	8005528 <__swbuf_r+0x2e>
 8005564:	2e0a      	cmp	r6, #10
 8005566:	d1df      	bne.n	8005528 <__swbuf_r+0x2e>
 8005568:	4621      	mov	r1, r4
 800556a:	4628      	mov	r0, r5
 800556c:	f001 f9a6 	bl	80068bc <_fflush_r>
 8005570:	2800      	cmp	r0, #0
 8005572:	d0d9      	beq.n	8005528 <__swbuf_r+0x2e>
 8005574:	e7d6      	b.n	8005524 <__swbuf_r+0x2a>
	...

08005578 <__swsetup_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4b29      	ldr	r3, [pc, #164]	@ (8005620 <__swsetup_r+0xa8>)
 800557c:	4605      	mov	r5, r0
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	460c      	mov	r4, r1
 8005582:	b118      	cbz	r0, 800558c <__swsetup_r+0x14>
 8005584:	6a03      	ldr	r3, [r0, #32]
 8005586:	b90b      	cbnz	r3, 800558c <__swsetup_r+0x14>
 8005588:	f7ff fe6e 	bl	8005268 <__sinit>
 800558c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005590:	0719      	lsls	r1, r3, #28
 8005592:	d422      	bmi.n	80055da <__swsetup_r+0x62>
 8005594:	06da      	lsls	r2, r3, #27
 8005596:	d407      	bmi.n	80055a8 <__swsetup_r+0x30>
 8005598:	2209      	movs	r2, #9
 800559a:	602a      	str	r2, [r5, #0]
 800559c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	f04f 30ff 	mov.w	r0, #4294967295
 80055a6:	e033      	b.n	8005610 <__swsetup_r+0x98>
 80055a8:	0758      	lsls	r0, r3, #29
 80055aa:	d512      	bpl.n	80055d2 <__swsetup_r+0x5a>
 80055ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ae:	b141      	cbz	r1, 80055c2 <__swsetup_r+0x4a>
 80055b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055b4:	4299      	cmp	r1, r3
 80055b6:	d002      	beq.n	80055be <__swsetup_r+0x46>
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 f8c1 	bl	8005740 <_free_r>
 80055be:	2300      	movs	r3, #0
 80055c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	2300      	movs	r3, #0
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f043 0308 	orr.w	r3, r3, #8
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	b94b      	cbnz	r3, 80055f2 <__swsetup_r+0x7a>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e8:	d003      	beq.n	80055f2 <__swsetup_r+0x7a>
 80055ea:	4621      	mov	r1, r4
 80055ec:	4628      	mov	r0, r5
 80055ee:	f001 f9b3 	bl	8006958 <__smakebuf_r>
 80055f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f6:	f013 0201 	ands.w	r2, r3, #1
 80055fa:	d00a      	beq.n	8005612 <__swsetup_r+0x9a>
 80055fc:	2200      	movs	r2, #0
 80055fe:	60a2      	str	r2, [r4, #8]
 8005600:	6962      	ldr	r2, [r4, #20]
 8005602:	4252      	negs	r2, r2
 8005604:	61a2      	str	r2, [r4, #24]
 8005606:	6922      	ldr	r2, [r4, #16]
 8005608:	b942      	cbnz	r2, 800561c <__swsetup_r+0xa4>
 800560a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800560e:	d1c5      	bne.n	800559c <__swsetup_r+0x24>
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	0799      	lsls	r1, r3, #30
 8005614:	bf58      	it	pl
 8005616:	6962      	ldrpl	r2, [r4, #20]
 8005618:	60a2      	str	r2, [r4, #8]
 800561a:	e7f4      	b.n	8005606 <__swsetup_r+0x8e>
 800561c:	2000      	movs	r0, #0
 800561e:	e7f7      	b.n	8005610 <__swsetup_r+0x98>
 8005620:	20000060 	.word	0x20000060

08005624 <memset>:
 8005624:	4402      	add	r2, r0
 8005626:	4603      	mov	r3, r0
 8005628:	4293      	cmp	r3, r2
 800562a:	d100      	bne.n	800562e <memset+0xa>
 800562c:	4770      	bx	lr
 800562e:	f803 1b01 	strb.w	r1, [r3], #1
 8005632:	e7f9      	b.n	8005628 <memset+0x4>

08005634 <strncmp>:
 8005634:	b510      	push	{r4, lr}
 8005636:	b16a      	cbz	r2, 8005654 <strncmp+0x20>
 8005638:	3901      	subs	r1, #1
 800563a:	1884      	adds	r4, r0, r2
 800563c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005640:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005644:	429a      	cmp	r2, r3
 8005646:	d103      	bne.n	8005650 <strncmp+0x1c>
 8005648:	42a0      	cmp	r0, r4
 800564a:	d001      	beq.n	8005650 <strncmp+0x1c>
 800564c:	2a00      	cmp	r2, #0
 800564e:	d1f5      	bne.n	800563c <strncmp+0x8>
 8005650:	1ad0      	subs	r0, r2, r3
 8005652:	bd10      	pop	{r4, pc}
 8005654:	4610      	mov	r0, r2
 8005656:	e7fc      	b.n	8005652 <strncmp+0x1e>

08005658 <_close_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	@ (8005674 <_close_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb ffa9 	bl	80015ba <_close>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_close_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_close_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	20000410 	.word	0x20000410

08005678 <_lseek_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	@ (8005698 <_lseek_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb ffbe 	bl	8001608 <_lseek>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_lseek_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_lseek_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	20000410 	.word	0x20000410

0800569c <_read_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d07      	ldr	r5, [pc, #28]	@ (80056bc <_read_r+0x20>)
 80056a0:	4604      	mov	r4, r0
 80056a2:	4608      	mov	r0, r1
 80056a4:	4611      	mov	r1, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	602a      	str	r2, [r5, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7fb ff4c 	bl	8001548 <_read>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_read_r+0x1e>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_read_r+0x1e>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000410 	.word	0x20000410

080056c0 <_write_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d07      	ldr	r5, [pc, #28]	@ (80056e0 <_write_r+0x20>)
 80056c4:	4604      	mov	r4, r0
 80056c6:	4608      	mov	r0, r1
 80056c8:	4611      	mov	r1, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	602a      	str	r2, [r5, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f7fb ff57 	bl	8001582 <_write>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_write_r+0x1e>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_write_r+0x1e>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20000410 	.word	0x20000410

080056e4 <__errno>:
 80056e4:	4b01      	ldr	r3, [pc, #4]	@ (80056ec <__errno+0x8>)
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000060 	.word	0x20000060

080056f0 <__libc_init_array>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005728 <__libc_init_array+0x38>)
 80056f4:	4c0d      	ldr	r4, [pc, #52]	@ (800572c <__libc_init_array+0x3c>)
 80056f6:	1b64      	subs	r4, r4, r5
 80056f8:	10a4      	asrs	r4, r4, #2
 80056fa:	2600      	movs	r6, #0
 80056fc:	42a6      	cmp	r6, r4
 80056fe:	d109      	bne.n	8005714 <__libc_init_array+0x24>
 8005700:	4d0b      	ldr	r5, [pc, #44]	@ (8005730 <__libc_init_array+0x40>)
 8005702:	4c0c      	ldr	r4, [pc, #48]	@ (8005734 <__libc_init_array+0x44>)
 8005704:	f001 fb54 	bl	8006db0 <_init>
 8005708:	1b64      	subs	r4, r4, r5
 800570a:	10a4      	asrs	r4, r4, #2
 800570c:	2600      	movs	r6, #0
 800570e:	42a6      	cmp	r6, r4
 8005710:	d105      	bne.n	800571e <__libc_init_array+0x2e>
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	f855 3b04 	ldr.w	r3, [r5], #4
 8005718:	4798      	blx	r3
 800571a:	3601      	adds	r6, #1
 800571c:	e7ee      	b.n	80056fc <__libc_init_array+0xc>
 800571e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005722:	4798      	blx	r3
 8005724:	3601      	adds	r6, #1
 8005726:	e7f2      	b.n	800570e <__libc_init_array+0x1e>
 8005728:	08007224 	.word	0x08007224
 800572c:	08007224 	.word	0x08007224
 8005730:	08007224 	.word	0x08007224
 8005734:	08007228 	.word	0x08007228

08005738 <__retarget_lock_init_recursive>:
 8005738:	4770      	bx	lr

0800573a <__retarget_lock_acquire_recursive>:
 800573a:	4770      	bx	lr

0800573c <__retarget_lock_release_recursive>:
 800573c:	4770      	bx	lr
	...

08005740 <_free_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4605      	mov	r5, r0
 8005744:	2900      	cmp	r1, #0
 8005746:	d041      	beq.n	80057cc <_free_r+0x8c>
 8005748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574c:	1f0c      	subs	r4, r1, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	bfb8      	it	lt
 8005752:	18e4      	addlt	r4, r4, r3
 8005754:	f000 f8e0 	bl	8005918 <__malloc_lock>
 8005758:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <_free_r+0x90>)
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	b933      	cbnz	r3, 800576c <_free_r+0x2c>
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	4628      	mov	r0, r5
 8005764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005768:	f000 b8dc 	b.w	8005924 <__malloc_unlock>
 800576c:	42a3      	cmp	r3, r4
 800576e:	d908      	bls.n	8005782 <_free_r+0x42>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	1821      	adds	r1, r4, r0
 8005774:	428b      	cmp	r3, r1
 8005776:	bf01      	itttt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	1809      	addeq	r1, r1, r0
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	e7ed      	b.n	800575e <_free_r+0x1e>
 8005782:	461a      	mov	r2, r3
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b10b      	cbz	r3, 800578c <_free_r+0x4c>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d9fa      	bls.n	8005782 <_free_r+0x42>
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	1850      	adds	r0, r2, r1
 8005790:	42a0      	cmp	r0, r4
 8005792:	d10b      	bne.n	80057ac <_free_r+0x6c>
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	4401      	add	r1, r0
 8005798:	1850      	adds	r0, r2, r1
 800579a:	4283      	cmp	r3, r0
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	d1e0      	bne.n	8005762 <_free_r+0x22>
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6053      	str	r3, [r2, #4]
 80057a6:	4408      	add	r0, r1
 80057a8:	6010      	str	r0, [r2, #0]
 80057aa:	e7da      	b.n	8005762 <_free_r+0x22>
 80057ac:	d902      	bls.n	80057b4 <_free_r+0x74>
 80057ae:	230c      	movs	r3, #12
 80057b0:	602b      	str	r3, [r5, #0]
 80057b2:	e7d6      	b.n	8005762 <_free_r+0x22>
 80057b4:	6820      	ldr	r0, [r4, #0]
 80057b6:	1821      	adds	r1, r4, r0
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf04      	itt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	bf04      	itt	eq
 80057c4:	1809      	addeq	r1, r1, r0
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	6054      	str	r4, [r2, #4]
 80057ca:	e7ca      	b.n	8005762 <_free_r+0x22>
 80057cc:	bd38      	pop	{r3, r4, r5, pc}
 80057ce:	bf00      	nop
 80057d0:	2000041c 	.word	0x2000041c

080057d4 <sbrk_aligned>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005814 <sbrk_aligned+0x40>)
 80057d8:	460c      	mov	r4, r1
 80057da:	6831      	ldr	r1, [r6, #0]
 80057dc:	4605      	mov	r5, r0
 80057de:	b911      	cbnz	r1, 80057e6 <sbrk_aligned+0x12>
 80057e0:	f001 f9a6 	bl	8006b30 <_sbrk_r>
 80057e4:	6030      	str	r0, [r6, #0]
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f001 f9a1 	bl	8006b30 <_sbrk_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d103      	bne.n	80057fa <sbrk_aligned+0x26>
 80057f2:	f04f 34ff 	mov.w	r4, #4294967295
 80057f6:	4620      	mov	r0, r4
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
 80057fa:	1cc4      	adds	r4, r0, #3
 80057fc:	f024 0403 	bic.w	r4, r4, #3
 8005800:	42a0      	cmp	r0, r4
 8005802:	d0f8      	beq.n	80057f6 <sbrk_aligned+0x22>
 8005804:	1a21      	subs	r1, r4, r0
 8005806:	4628      	mov	r0, r5
 8005808:	f001 f992 	bl	8006b30 <_sbrk_r>
 800580c:	3001      	adds	r0, #1
 800580e:	d1f2      	bne.n	80057f6 <sbrk_aligned+0x22>
 8005810:	e7ef      	b.n	80057f2 <sbrk_aligned+0x1e>
 8005812:	bf00      	nop
 8005814:	20000418 	.word	0x20000418

08005818 <_malloc_r>:
 8005818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800581c:	1ccd      	adds	r5, r1, #3
 800581e:	f025 0503 	bic.w	r5, r5, #3
 8005822:	3508      	adds	r5, #8
 8005824:	2d0c      	cmp	r5, #12
 8005826:	bf38      	it	cc
 8005828:	250c      	movcc	r5, #12
 800582a:	2d00      	cmp	r5, #0
 800582c:	4606      	mov	r6, r0
 800582e:	db01      	blt.n	8005834 <_malloc_r+0x1c>
 8005830:	42a9      	cmp	r1, r5
 8005832:	d904      	bls.n	800583e <_malloc_r+0x26>
 8005834:	230c      	movs	r3, #12
 8005836:	6033      	str	r3, [r6, #0]
 8005838:	2000      	movs	r0, #0
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005914 <_malloc_r+0xfc>
 8005842:	f000 f869 	bl	8005918 <__malloc_lock>
 8005846:	f8d8 3000 	ldr.w	r3, [r8]
 800584a:	461c      	mov	r4, r3
 800584c:	bb44      	cbnz	r4, 80058a0 <_malloc_r+0x88>
 800584e:	4629      	mov	r1, r5
 8005850:	4630      	mov	r0, r6
 8005852:	f7ff ffbf 	bl	80057d4 <sbrk_aligned>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	4604      	mov	r4, r0
 800585a:	d158      	bne.n	800590e <_malloc_r+0xf6>
 800585c:	f8d8 4000 	ldr.w	r4, [r8]
 8005860:	4627      	mov	r7, r4
 8005862:	2f00      	cmp	r7, #0
 8005864:	d143      	bne.n	80058ee <_malloc_r+0xd6>
 8005866:	2c00      	cmp	r4, #0
 8005868:	d04b      	beq.n	8005902 <_malloc_r+0xea>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4639      	mov	r1, r7
 800586e:	4630      	mov	r0, r6
 8005870:	eb04 0903 	add.w	r9, r4, r3
 8005874:	f001 f95c 	bl	8006b30 <_sbrk_r>
 8005878:	4581      	cmp	r9, r0
 800587a:	d142      	bne.n	8005902 <_malloc_r+0xea>
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	1a6d      	subs	r5, r5, r1
 8005880:	4629      	mov	r1, r5
 8005882:	4630      	mov	r0, r6
 8005884:	f7ff ffa6 	bl	80057d4 <sbrk_aligned>
 8005888:	3001      	adds	r0, #1
 800588a:	d03a      	beq.n	8005902 <_malloc_r+0xea>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	442b      	add	r3, r5
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	f8d8 3000 	ldr.w	r3, [r8]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	bb62      	cbnz	r2, 80058f4 <_malloc_r+0xdc>
 800589a:	f8c8 7000 	str.w	r7, [r8]
 800589e:	e00f      	b.n	80058c0 <_malloc_r+0xa8>
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	1b52      	subs	r2, r2, r5
 80058a4:	d420      	bmi.n	80058e8 <_malloc_r+0xd0>
 80058a6:	2a0b      	cmp	r2, #11
 80058a8:	d917      	bls.n	80058da <_malloc_r+0xc2>
 80058aa:	1961      	adds	r1, r4, r5
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	6025      	str	r5, [r4, #0]
 80058b0:	bf18      	it	ne
 80058b2:	6059      	strne	r1, [r3, #4]
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	bf08      	it	eq
 80058b8:	f8c8 1000 	streq.w	r1, [r8]
 80058bc:	5162      	str	r2, [r4, r5]
 80058be:	604b      	str	r3, [r1, #4]
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 f82f 	bl	8005924 <__malloc_unlock>
 80058c6:	f104 000b 	add.w	r0, r4, #11
 80058ca:	1d23      	adds	r3, r4, #4
 80058cc:	f020 0007 	bic.w	r0, r0, #7
 80058d0:	1ac2      	subs	r2, r0, r3
 80058d2:	bf1c      	itt	ne
 80058d4:	1a1b      	subne	r3, r3, r0
 80058d6:	50a3      	strne	r3, [r4, r2]
 80058d8:	e7af      	b.n	800583a <_malloc_r+0x22>
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	bf0c      	ite	eq
 80058e0:	f8c8 2000 	streq.w	r2, [r8]
 80058e4:	605a      	strne	r2, [r3, #4]
 80058e6:	e7eb      	b.n	80058c0 <_malloc_r+0xa8>
 80058e8:	4623      	mov	r3, r4
 80058ea:	6864      	ldr	r4, [r4, #4]
 80058ec:	e7ae      	b.n	800584c <_malloc_r+0x34>
 80058ee:	463c      	mov	r4, r7
 80058f0:	687f      	ldr	r7, [r7, #4]
 80058f2:	e7b6      	b.n	8005862 <_malloc_r+0x4a>
 80058f4:	461a      	mov	r2, r3
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	42a3      	cmp	r3, r4
 80058fa:	d1fb      	bne.n	80058f4 <_malloc_r+0xdc>
 80058fc:	2300      	movs	r3, #0
 80058fe:	6053      	str	r3, [r2, #4]
 8005900:	e7de      	b.n	80058c0 <_malloc_r+0xa8>
 8005902:	230c      	movs	r3, #12
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	4630      	mov	r0, r6
 8005908:	f000 f80c 	bl	8005924 <__malloc_unlock>
 800590c:	e794      	b.n	8005838 <_malloc_r+0x20>
 800590e:	6005      	str	r5, [r0, #0]
 8005910:	e7d6      	b.n	80058c0 <_malloc_r+0xa8>
 8005912:	bf00      	nop
 8005914:	2000041c 	.word	0x2000041c

08005918 <__malloc_lock>:
 8005918:	4801      	ldr	r0, [pc, #4]	@ (8005920 <__malloc_lock+0x8>)
 800591a:	f7ff bf0e 	b.w	800573a <__retarget_lock_acquire_recursive>
 800591e:	bf00      	nop
 8005920:	20000414 	.word	0x20000414

08005924 <__malloc_unlock>:
 8005924:	4801      	ldr	r0, [pc, #4]	@ (800592c <__malloc_unlock+0x8>)
 8005926:	f7ff bf09 	b.w	800573c <__retarget_lock_release_recursive>
 800592a:	bf00      	nop
 800592c:	20000414 	.word	0x20000414

08005930 <__ssputs_r>:
 8005930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	688e      	ldr	r6, [r1, #8]
 8005936:	461f      	mov	r7, r3
 8005938:	42be      	cmp	r6, r7
 800593a:	680b      	ldr	r3, [r1, #0]
 800593c:	4682      	mov	sl, r0
 800593e:	460c      	mov	r4, r1
 8005940:	4690      	mov	r8, r2
 8005942:	d82d      	bhi.n	80059a0 <__ssputs_r+0x70>
 8005944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005948:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800594c:	d026      	beq.n	800599c <__ssputs_r+0x6c>
 800594e:	6965      	ldr	r5, [r4, #20]
 8005950:	6909      	ldr	r1, [r1, #16]
 8005952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005956:	eba3 0901 	sub.w	r9, r3, r1
 800595a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800595e:	1c7b      	adds	r3, r7, #1
 8005960:	444b      	add	r3, r9
 8005962:	106d      	asrs	r5, r5, #1
 8005964:	429d      	cmp	r5, r3
 8005966:	bf38      	it	cc
 8005968:	461d      	movcc	r5, r3
 800596a:	0553      	lsls	r3, r2, #21
 800596c:	d527      	bpl.n	80059be <__ssputs_r+0x8e>
 800596e:	4629      	mov	r1, r5
 8005970:	f7ff ff52 	bl	8005818 <_malloc_r>
 8005974:	4606      	mov	r6, r0
 8005976:	b360      	cbz	r0, 80059d2 <__ssputs_r+0xa2>
 8005978:	6921      	ldr	r1, [r4, #16]
 800597a:	464a      	mov	r2, r9
 800597c:	f001 f8e8 	bl	8006b50 <memcpy>
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598a:	81a3      	strh	r3, [r4, #12]
 800598c:	6126      	str	r6, [r4, #16]
 800598e:	6165      	str	r5, [r4, #20]
 8005990:	444e      	add	r6, r9
 8005992:	eba5 0509 	sub.w	r5, r5, r9
 8005996:	6026      	str	r6, [r4, #0]
 8005998:	60a5      	str	r5, [r4, #8]
 800599a:	463e      	mov	r6, r7
 800599c:	42be      	cmp	r6, r7
 800599e:	d900      	bls.n	80059a2 <__ssputs_r+0x72>
 80059a0:	463e      	mov	r6, r7
 80059a2:	6820      	ldr	r0, [r4, #0]
 80059a4:	4632      	mov	r2, r6
 80059a6:	4641      	mov	r1, r8
 80059a8:	f001 f885 	bl	8006ab6 <memmove>
 80059ac:	68a3      	ldr	r3, [r4, #8]
 80059ae:	1b9b      	subs	r3, r3, r6
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	4433      	add	r3, r6
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	2000      	movs	r0, #0
 80059ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059be:	462a      	mov	r2, r5
 80059c0:	f001 f8d4 	bl	8006b6c <_realloc_r>
 80059c4:	4606      	mov	r6, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d1e0      	bne.n	800598c <__ssputs_r+0x5c>
 80059ca:	6921      	ldr	r1, [r4, #16]
 80059cc:	4650      	mov	r0, sl
 80059ce:	f7ff feb7 	bl	8005740 <_free_r>
 80059d2:	230c      	movs	r3, #12
 80059d4:	f8ca 3000 	str.w	r3, [sl]
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	e7e9      	b.n	80059ba <__ssputs_r+0x8a>
	...

080059e8 <_svfiprintf_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	4698      	mov	r8, r3
 80059ee:	898b      	ldrh	r3, [r1, #12]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	b09d      	sub	sp, #116	@ 0x74
 80059f4:	4607      	mov	r7, r0
 80059f6:	460d      	mov	r5, r1
 80059f8:	4614      	mov	r4, r2
 80059fa:	d510      	bpl.n	8005a1e <_svfiprintf_r+0x36>
 80059fc:	690b      	ldr	r3, [r1, #16]
 80059fe:	b973      	cbnz	r3, 8005a1e <_svfiprintf_r+0x36>
 8005a00:	2140      	movs	r1, #64	@ 0x40
 8005a02:	f7ff ff09 	bl	8005818 <_malloc_r>
 8005a06:	6028      	str	r0, [r5, #0]
 8005a08:	6128      	str	r0, [r5, #16]
 8005a0a:	b930      	cbnz	r0, 8005a1a <_svfiprintf_r+0x32>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	b01d      	add	sp, #116	@ 0x74
 8005a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1a:	2340      	movs	r3, #64	@ 0x40
 8005a1c:	616b      	str	r3, [r5, #20]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a22:	2320      	movs	r3, #32
 8005a24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a2c:	2330      	movs	r3, #48	@ 0x30
 8005a2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bcc <_svfiprintf_r+0x1e4>
 8005a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a36:	f04f 0901 	mov.w	r9, #1
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	469a      	mov	sl, r3
 8005a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a42:	b10a      	cbz	r2, 8005a48 <_svfiprintf_r+0x60>
 8005a44:	2a25      	cmp	r2, #37	@ 0x25
 8005a46:	d1f9      	bne.n	8005a3c <_svfiprintf_r+0x54>
 8005a48:	ebba 0b04 	subs.w	fp, sl, r4
 8005a4c:	d00b      	beq.n	8005a66 <_svfiprintf_r+0x7e>
 8005a4e:	465b      	mov	r3, fp
 8005a50:	4622      	mov	r2, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ff6b 	bl	8005930 <__ssputs_r>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f000 80a7 	beq.w	8005bae <_svfiprintf_r+0x1c6>
 8005a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a62:	445a      	add	r2, fp
 8005a64:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a66:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 809f 	beq.w	8005bae <_svfiprintf_r+0x1c6>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a7a:	f10a 0a01 	add.w	sl, sl, #1
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a86:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a88:	4654      	mov	r4, sl
 8005a8a:	2205      	movs	r2, #5
 8005a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a90:	484e      	ldr	r0, [pc, #312]	@ (8005bcc <_svfiprintf_r+0x1e4>)
 8005a92:	f7fa fbd5 	bl	8000240 <memchr>
 8005a96:	9a04      	ldr	r2, [sp, #16]
 8005a98:	b9d8      	cbnz	r0, 8005ad2 <_svfiprintf_r+0xea>
 8005a9a:	06d0      	lsls	r0, r2, #27
 8005a9c:	bf44      	itt	mi
 8005a9e:	2320      	movmi	r3, #32
 8005aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa4:	0711      	lsls	r1, r2, #28
 8005aa6:	bf44      	itt	mi
 8005aa8:	232b      	movmi	r3, #43	@ 0x2b
 8005aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aae:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab4:	d015      	beq.n	8005ae2 <_svfiprintf_r+0xfa>
 8005ab6:	9a07      	ldr	r2, [sp, #28]
 8005ab8:	4654      	mov	r4, sl
 8005aba:	2000      	movs	r0, #0
 8005abc:	f04f 0c0a 	mov.w	ip, #10
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac6:	3b30      	subs	r3, #48	@ 0x30
 8005ac8:	2b09      	cmp	r3, #9
 8005aca:	d94b      	bls.n	8005b64 <_svfiprintf_r+0x17c>
 8005acc:	b1b0      	cbz	r0, 8005afc <_svfiprintf_r+0x114>
 8005ace:	9207      	str	r2, [sp, #28]
 8005ad0:	e014      	b.n	8005afc <_svfiprintf_r+0x114>
 8005ad2:	eba0 0308 	sub.w	r3, r0, r8
 8005ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	46a2      	mov	sl, r4
 8005ae0:	e7d2      	b.n	8005a88 <_svfiprintf_r+0xa0>
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	9103      	str	r1, [sp, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfbb      	ittet	lt
 8005aee:	425b      	neglt	r3, r3
 8005af0:	f042 0202 	orrlt.w	r2, r2, #2
 8005af4:	9307      	strge	r3, [sp, #28]
 8005af6:	9307      	strlt	r3, [sp, #28]
 8005af8:	bfb8      	it	lt
 8005afa:	9204      	strlt	r2, [sp, #16]
 8005afc:	7823      	ldrb	r3, [r4, #0]
 8005afe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b00:	d10a      	bne.n	8005b18 <_svfiprintf_r+0x130>
 8005b02:	7863      	ldrb	r3, [r4, #1]
 8005b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b06:	d132      	bne.n	8005b6e <_svfiprintf_r+0x186>
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	9203      	str	r2, [sp, #12]
 8005b10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b14:	3402      	adds	r4, #2
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bdc <_svfiprintf_r+0x1f4>
 8005b1c:	7821      	ldrb	r1, [r4, #0]
 8005b1e:	2203      	movs	r2, #3
 8005b20:	4650      	mov	r0, sl
 8005b22:	f7fa fb8d 	bl	8000240 <memchr>
 8005b26:	b138      	cbz	r0, 8005b38 <_svfiprintf_r+0x150>
 8005b28:	9b04      	ldr	r3, [sp, #16]
 8005b2a:	eba0 000a 	sub.w	r0, r0, sl
 8005b2e:	2240      	movs	r2, #64	@ 0x40
 8005b30:	4082      	lsls	r2, r0
 8005b32:	4313      	orrs	r3, r2
 8005b34:	3401      	adds	r4, #1
 8005b36:	9304      	str	r3, [sp, #16]
 8005b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3c:	4824      	ldr	r0, [pc, #144]	@ (8005bd0 <_svfiprintf_r+0x1e8>)
 8005b3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b42:	2206      	movs	r2, #6
 8005b44:	f7fa fb7c 	bl	8000240 <memchr>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d036      	beq.n	8005bba <_svfiprintf_r+0x1d2>
 8005b4c:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <_svfiprintf_r+0x1ec>)
 8005b4e:	bb1b      	cbnz	r3, 8005b98 <_svfiprintf_r+0x1b0>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	3307      	adds	r3, #7
 8005b54:	f023 0307 	bic.w	r3, r3, #7
 8005b58:	3308      	adds	r3, #8
 8005b5a:	9303      	str	r3, [sp, #12]
 8005b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b5e:	4433      	add	r3, r6
 8005b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b62:	e76a      	b.n	8005a3a <_svfiprintf_r+0x52>
 8005b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b68:	460c      	mov	r4, r1
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	e7a8      	b.n	8005ac0 <_svfiprintf_r+0xd8>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	3401      	adds	r4, #1
 8005b72:	9305      	str	r3, [sp, #20]
 8005b74:	4619      	mov	r1, r3
 8005b76:	f04f 0c0a 	mov.w	ip, #10
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b80:	3a30      	subs	r2, #48	@ 0x30
 8005b82:	2a09      	cmp	r2, #9
 8005b84:	d903      	bls.n	8005b8e <_svfiprintf_r+0x1a6>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0c6      	beq.n	8005b18 <_svfiprintf_r+0x130>
 8005b8a:	9105      	str	r1, [sp, #20]
 8005b8c:	e7c4      	b.n	8005b18 <_svfiprintf_r+0x130>
 8005b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b92:	4604      	mov	r4, r0
 8005b94:	2301      	movs	r3, #1
 8005b96:	e7f0      	b.n	8005b7a <_svfiprintf_r+0x192>
 8005b98:	ab03      	add	r3, sp, #12
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd8 <_svfiprintf_r+0x1f0>)
 8005ba0:	a904      	add	r1, sp, #16
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	1c42      	adds	r2, r0, #1
 8005baa:	4606      	mov	r6, r0
 8005bac:	d1d6      	bne.n	8005b5c <_svfiprintf_r+0x174>
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	065b      	lsls	r3, r3, #25
 8005bb2:	f53f af2d 	bmi.w	8005a10 <_svfiprintf_r+0x28>
 8005bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bb8:	e72c      	b.n	8005a14 <_svfiprintf_r+0x2c>
 8005bba:	ab03      	add	r3, sp, #12
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	462a      	mov	r2, r5
 8005bc0:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <_svfiprintf_r+0x1f0>)
 8005bc2:	a904      	add	r1, sp, #16
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f000 fb87 	bl	80062d8 <_printf_i>
 8005bca:	e7ed      	b.n	8005ba8 <_svfiprintf_r+0x1c0>
 8005bcc:	080070cc 	.word	0x080070cc
 8005bd0:	080070d6 	.word	0x080070d6
 8005bd4:	00000000 	.word	0x00000000
 8005bd8:	08005931 	.word	0x08005931
 8005bdc:	080070d2 	.word	0x080070d2

08005be0 <_sungetc_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	1c4b      	adds	r3, r1, #1
 8005be4:	4614      	mov	r4, r2
 8005be6:	d103      	bne.n	8005bf0 <_sungetc_r+0x10>
 8005be8:	f04f 35ff 	mov.w	r5, #4294967295
 8005bec:	4628      	mov	r0, r5
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	8993      	ldrh	r3, [r2, #12]
 8005bf2:	f023 0320 	bic.w	r3, r3, #32
 8005bf6:	8193      	strh	r3, [r2, #12]
 8005bf8:	6853      	ldr	r3, [r2, #4]
 8005bfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bfc:	b2cd      	uxtb	r5, r1
 8005bfe:	b18a      	cbz	r2, 8005c24 <_sungetc_r+0x44>
 8005c00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005c02:	429a      	cmp	r2, r3
 8005c04:	dd08      	ble.n	8005c18 <_sungetc_r+0x38>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	1e5a      	subs	r2, r3, #1
 8005c0a:	6022      	str	r2, [r4, #0]
 8005c0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	3301      	adds	r3, #1
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	e7e9      	b.n	8005bec <_sungetc_r+0xc>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f000 ff12 	bl	8006a42 <__submore>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0f1      	beq.n	8005c06 <_sungetc_r+0x26>
 8005c22:	e7e1      	b.n	8005be8 <_sungetc_r+0x8>
 8005c24:	6921      	ldr	r1, [r4, #16]
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	b141      	cbz	r1, 8005c3c <_sungetc_r+0x5c>
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d206      	bcs.n	8005c3c <_sungetc_r+0x5c>
 8005c2e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005c32:	42a9      	cmp	r1, r5
 8005c34:	d102      	bne.n	8005c3c <_sungetc_r+0x5c>
 8005c36:	3a01      	subs	r2, #1
 8005c38:	6022      	str	r2, [r4, #0]
 8005c3a:	e7ea      	b.n	8005c12 <_sungetc_r+0x32>
 8005c3c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005c40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c46:	2303      	movs	r3, #3
 8005c48:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	2301      	movs	r3, #1
 8005c54:	e7de      	b.n	8005c14 <_sungetc_r+0x34>

08005c56 <__ssrefill_r>:
 8005c56:	b510      	push	{r4, lr}
 8005c58:	460c      	mov	r4, r1
 8005c5a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005c5c:	b169      	cbz	r1, 8005c7a <__ssrefill_r+0x24>
 8005c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c62:	4299      	cmp	r1, r3
 8005c64:	d001      	beq.n	8005c6a <__ssrefill_r+0x14>
 8005c66:	f7ff fd6b 	bl	8005740 <_free_r>
 8005c6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c6c:	6063      	str	r3, [r4, #4]
 8005c6e:	2000      	movs	r0, #0
 8005c70:	6360      	str	r0, [r4, #52]	@ 0x34
 8005c72:	b113      	cbz	r3, 8005c7a <__ssrefill_r+0x24>
 8005c74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6063      	str	r3, [r4, #4]
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f043 0320 	orr.w	r3, r3, #32
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8e:	e7f3      	b.n	8005c78 <__ssrefill_r+0x22>

08005c90 <__ssvfiscanf_r>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	460c      	mov	r4, r1
 8005c96:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005ca0:	49a5      	ldr	r1, [pc, #660]	@ (8005f38 <__ssvfiscanf_r+0x2a8>)
 8005ca2:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005ca4:	f10d 0804 	add.w	r8, sp, #4
 8005ca8:	49a4      	ldr	r1, [pc, #656]	@ (8005f3c <__ssvfiscanf_r+0x2ac>)
 8005caa:	4fa5      	ldr	r7, [pc, #660]	@ (8005f40 <__ssvfiscanf_r+0x2b0>)
 8005cac:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	7813      	ldrb	r3, [r2, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8158 	beq.w	8005f6e <__ssvfiscanf_r+0x2de>
 8005cbe:	5cf9      	ldrb	r1, [r7, r3]
 8005cc0:	f011 0108 	ands.w	r1, r1, #8
 8005cc4:	f102 0501 	add.w	r5, r2, #1
 8005cc8:	d019      	beq.n	8005cfe <__ssvfiscanf_r+0x6e>
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dd0f      	ble.n	8005cf0 <__ssvfiscanf_r+0x60>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	5cba      	ldrb	r2, [r7, r2]
 8005cd6:	0712      	lsls	r2, r2, #28
 8005cd8:	d401      	bmi.n	8005cde <__ssvfiscanf_r+0x4e>
 8005cda:	462a      	mov	r2, r5
 8005cdc:	e7eb      	b.n	8005cb6 <__ssvfiscanf_r+0x26>
 8005cde:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005ce0:	3201      	adds	r2, #1
 8005ce2:	9245      	str	r2, [sp, #276]	@ 0x114
 8005ce4:	6862      	ldr	r2, [r4, #4]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	6062      	str	r2, [r4, #4]
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	e7ec      	b.n	8005cca <__ssvfiscanf_r+0x3a>
 8005cf0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4798      	blx	r3
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d0e9      	beq.n	8005cd0 <__ssvfiscanf_r+0x40>
 8005cfc:	e7ed      	b.n	8005cda <__ssvfiscanf_r+0x4a>
 8005cfe:	2b25      	cmp	r3, #37	@ 0x25
 8005d00:	d012      	beq.n	8005d28 <__ssvfiscanf_r+0x98>
 8005d02:	4699      	mov	r9, r3
 8005d04:	6863      	ldr	r3, [r4, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f340 8093 	ble.w	8005e32 <__ssvfiscanf_r+0x1a2>
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	7813      	ldrb	r3, [r2, #0]
 8005d10:	454b      	cmp	r3, r9
 8005d12:	f040 812c 	bne.w	8005f6e <__ssvfiscanf_r+0x2de>
 8005d16:	6863      	ldr	r3, [r4, #4]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	6063      	str	r3, [r4, #4]
 8005d1c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005d1e:	3201      	adds	r2, #1
 8005d20:	3301      	adds	r3, #1
 8005d22:	6022      	str	r2, [r4, #0]
 8005d24:	9345      	str	r3, [sp, #276]	@ 0x114
 8005d26:	e7d8      	b.n	8005cda <__ssvfiscanf_r+0x4a>
 8005d28:	9141      	str	r1, [sp, #260]	@ 0x104
 8005d2a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005d2c:	7853      	ldrb	r3, [r2, #1]
 8005d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d30:	bf02      	ittt	eq
 8005d32:	2310      	moveq	r3, #16
 8005d34:	1c95      	addeq	r5, r2, #2
 8005d36:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005d38:	220a      	movs	r2, #10
 8005d3a:	46a9      	mov	r9, r5
 8005d3c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005d40:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d91e      	bls.n	8005d86 <__ssvfiscanf_r+0xf6>
 8005d48:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005f44 <__ssvfiscanf_r+0x2b4>
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4650      	mov	r0, sl
 8005d50:	f7fa fa76 	bl	8000240 <memchr>
 8005d54:	b138      	cbz	r0, 8005d66 <__ssvfiscanf_r+0xd6>
 8005d56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005d58:	eba0 000a 	sub.w	r0, r0, sl
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4083      	lsls	r3, r0
 8005d60:	4313      	orrs	r3, r2
 8005d62:	9341      	str	r3, [sp, #260]	@ 0x104
 8005d64:	464d      	mov	r5, r9
 8005d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d6a:	2b78      	cmp	r3, #120	@ 0x78
 8005d6c:	d806      	bhi.n	8005d7c <__ssvfiscanf_r+0xec>
 8005d6e:	2b57      	cmp	r3, #87	@ 0x57
 8005d70:	d810      	bhi.n	8005d94 <__ssvfiscanf_r+0x104>
 8005d72:	2b25      	cmp	r3, #37	@ 0x25
 8005d74:	d0c5      	beq.n	8005d02 <__ssvfiscanf_r+0x72>
 8005d76:	d857      	bhi.n	8005e28 <__ssvfiscanf_r+0x198>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d065      	beq.n	8005e48 <__ssvfiscanf_r+0x1b8>
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005d80:	230a      	movs	r3, #10
 8005d82:	9342      	str	r3, [sp, #264]	@ 0x108
 8005d84:	e078      	b.n	8005e78 <__ssvfiscanf_r+0x1e8>
 8005d86:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005d88:	fb02 1103 	mla	r1, r2, r3, r1
 8005d8c:	3930      	subs	r1, #48	@ 0x30
 8005d8e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005d90:	464d      	mov	r5, r9
 8005d92:	e7d2      	b.n	8005d3a <__ssvfiscanf_r+0xaa>
 8005d94:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005d98:	2a20      	cmp	r2, #32
 8005d9a:	d8ef      	bhi.n	8005d7c <__ssvfiscanf_r+0xec>
 8005d9c:	a101      	add	r1, pc, #4	@ (adr r1, 8005da4 <__ssvfiscanf_r+0x114>)
 8005d9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005e57 	.word	0x08005e57
 8005da8:	08005d7d 	.word	0x08005d7d
 8005dac:	08005d7d 	.word	0x08005d7d
 8005db0:	08005eb1 	.word	0x08005eb1
 8005db4:	08005d7d 	.word	0x08005d7d
 8005db8:	08005d7d 	.word	0x08005d7d
 8005dbc:	08005d7d 	.word	0x08005d7d
 8005dc0:	08005d7d 	.word	0x08005d7d
 8005dc4:	08005d7d 	.word	0x08005d7d
 8005dc8:	08005d7d 	.word	0x08005d7d
 8005dcc:	08005d7d 	.word	0x08005d7d
 8005dd0:	08005ec7 	.word	0x08005ec7
 8005dd4:	08005ead 	.word	0x08005ead
 8005dd8:	08005e2f 	.word	0x08005e2f
 8005ddc:	08005e2f 	.word	0x08005e2f
 8005de0:	08005e2f 	.word	0x08005e2f
 8005de4:	08005d7d 	.word	0x08005d7d
 8005de8:	08005e69 	.word	0x08005e69
 8005dec:	08005d7d 	.word	0x08005d7d
 8005df0:	08005d7d 	.word	0x08005d7d
 8005df4:	08005d7d 	.word	0x08005d7d
 8005df8:	08005d7d 	.word	0x08005d7d
 8005dfc:	08005ed7 	.word	0x08005ed7
 8005e00:	08005e71 	.word	0x08005e71
 8005e04:	08005e4f 	.word	0x08005e4f
 8005e08:	08005d7d 	.word	0x08005d7d
 8005e0c:	08005d7d 	.word	0x08005d7d
 8005e10:	08005ed3 	.word	0x08005ed3
 8005e14:	08005d7d 	.word	0x08005d7d
 8005e18:	08005ead 	.word	0x08005ead
 8005e1c:	08005d7d 	.word	0x08005d7d
 8005e20:	08005d7d 	.word	0x08005d7d
 8005e24:	08005e57 	.word	0x08005e57
 8005e28:	3b45      	subs	r3, #69	@ 0x45
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d8a6      	bhi.n	8005d7c <__ssvfiscanf_r+0xec>
 8005e2e:	2305      	movs	r3, #5
 8005e30:	e021      	b.n	8005e76 <__ssvfiscanf_r+0x1e6>
 8005e32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005e34:	4621      	mov	r1, r4
 8005e36:	4630      	mov	r0, r6
 8005e38:	4798      	blx	r3
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f43f af66 	beq.w	8005d0c <__ssvfiscanf_r+0x7c>
 8005e40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 808b 	bne.w	8005f5e <__ssvfiscanf_r+0x2ce>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e08b      	b.n	8005f66 <__ssvfiscanf_r+0x2d6>
 8005e4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005e50:	f042 0220 	orr.w	r2, r2, #32
 8005e54:	9241      	str	r2, [sp, #260]	@ 0x104
 8005e56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5c:	9241      	str	r2, [sp, #260]	@ 0x104
 8005e5e:	2210      	movs	r2, #16
 8005e60:	2b6e      	cmp	r3, #110	@ 0x6e
 8005e62:	9242      	str	r2, [sp, #264]	@ 0x108
 8005e64:	d902      	bls.n	8005e6c <__ssvfiscanf_r+0x1dc>
 8005e66:	e005      	b.n	8005e74 <__ssvfiscanf_r+0x1e4>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e002      	b.n	8005e76 <__ssvfiscanf_r+0x1e6>
 8005e70:	2308      	movs	r3, #8
 8005e72:	9342      	str	r3, [sp, #264]	@ 0x108
 8005e74:	2304      	movs	r3, #4
 8005e76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dd39      	ble.n	8005ef2 <__ssvfiscanf_r+0x262>
 8005e7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005e80:	0659      	lsls	r1, r3, #25
 8005e82:	d404      	bmi.n	8005e8e <__ssvfiscanf_r+0x1fe>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	5cba      	ldrb	r2, [r7, r2]
 8005e8a:	0712      	lsls	r2, r2, #28
 8005e8c:	d438      	bmi.n	8005f00 <__ssvfiscanf_r+0x270>
 8005e8e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	dc47      	bgt.n	8005f24 <__ssvfiscanf_r+0x294>
 8005e94:	466b      	mov	r3, sp
 8005e96:	4622      	mov	r2, r4
 8005e98:	a941      	add	r1, sp, #260	@ 0x104
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 fb3c 	bl	8006518 <_scanf_chars>
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	d064      	beq.n	8005f6e <__ssvfiscanf_r+0x2de>
 8005ea4:	2802      	cmp	r0, #2
 8005ea6:	f47f af18 	bne.w	8005cda <__ssvfiscanf_r+0x4a>
 8005eaa:	e7c9      	b.n	8005e40 <__ssvfiscanf_r+0x1b0>
 8005eac:	220a      	movs	r2, #10
 8005eae:	e7d7      	b.n	8005e60 <__ssvfiscanf_r+0x1d0>
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f000 fd8c 	bl	80069d0 <__sccl>
 8005eb8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ebe:	9341      	str	r3, [sp, #260]	@ 0x104
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e7d7      	b.n	8005e76 <__ssvfiscanf_r+0x1e6>
 8005ec6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ecc:	9341      	str	r3, [sp, #260]	@ 0x104
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e7d1      	b.n	8005e76 <__ssvfiscanf_r+0x1e6>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e7cf      	b.n	8005e76 <__ssvfiscanf_r+0x1e6>
 8005ed6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005ed8:	06c3      	lsls	r3, r0, #27
 8005eda:	f53f aefe 	bmi.w	8005cda <__ssvfiscanf_r+0x4a>
 8005ede:	9b00      	ldr	r3, [sp, #0]
 8005ee0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	9100      	str	r1, [sp, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	07c0      	lsls	r0, r0, #31
 8005eea:	bf4c      	ite	mi
 8005eec:	801a      	strhmi	r2, [r3, #0]
 8005eee:	601a      	strpl	r2, [r3, #0]
 8005ef0:	e6f3      	b.n	8005cda <__ssvfiscanf_r+0x4a>
 8005ef2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4798      	blx	r3
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0bf      	beq.n	8005e7e <__ssvfiscanf_r+0x1ee>
 8005efe:	e79f      	b.n	8005e40 <__ssvfiscanf_r+0x1b0>
 8005f00:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005f02:	3201      	adds	r2, #1
 8005f04:	9245      	str	r2, [sp, #276]	@ 0x114
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	3a01      	subs	r2, #1
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	6062      	str	r2, [r4, #4]
 8005f0e:	dd02      	ble.n	8005f16 <__ssvfiscanf_r+0x286>
 8005f10:	3301      	adds	r3, #1
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	e7b6      	b.n	8005e84 <__ssvfiscanf_r+0x1f4>
 8005f16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	4798      	blx	r3
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d0b0      	beq.n	8005e84 <__ssvfiscanf_r+0x1f4>
 8005f22:	e78d      	b.n	8005e40 <__ssvfiscanf_r+0x1b0>
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	dc0f      	bgt.n	8005f48 <__ssvfiscanf_r+0x2b8>
 8005f28:	466b      	mov	r3, sp
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	a941      	add	r1, sp, #260	@ 0x104
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 fb4c 	bl	80065cc <_scanf_i>
 8005f34:	e7b4      	b.n	8005ea0 <__ssvfiscanf_r+0x210>
 8005f36:	bf00      	nop
 8005f38:	08005be1 	.word	0x08005be1
 8005f3c:	08005c57 	.word	0x08005c57
 8005f40:	0800711b 	.word	0x0800711b
 8005f44:	080070d2 	.word	0x080070d2
 8005f48:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <__ssvfiscanf_r+0x2e4>)
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f43f aec5 	beq.w	8005cda <__ssvfiscanf_r+0x4a>
 8005f50:	466b      	mov	r3, sp
 8005f52:	4622      	mov	r2, r4
 8005f54:	a941      	add	r1, sp, #260	@ 0x104
 8005f56:	4630      	mov	r0, r6
 8005f58:	f3af 8000 	nop.w
 8005f5c:	e7a0      	b.n	8005ea0 <__ssvfiscanf_r+0x210>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	065b      	lsls	r3, r3, #25
 8005f62:	f53f af71 	bmi.w	8005e48 <__ssvfiscanf_r+0x1b8>
 8005f66:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005f70:	e7f9      	b.n	8005f66 <__ssvfiscanf_r+0x2d6>
 8005f72:	bf00      	nop
 8005f74:	00000000 	.word	0x00000000

08005f78 <__sfputc_r>:
 8005f78:	6893      	ldr	r3, [r2, #8]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	b410      	push	{r4}
 8005f80:	6093      	str	r3, [r2, #8]
 8005f82:	da08      	bge.n	8005f96 <__sfputc_r+0x1e>
 8005f84:	6994      	ldr	r4, [r2, #24]
 8005f86:	42a3      	cmp	r3, r4
 8005f88:	db01      	blt.n	8005f8e <__sfputc_r+0x16>
 8005f8a:	290a      	cmp	r1, #10
 8005f8c:	d103      	bne.n	8005f96 <__sfputc_r+0x1e>
 8005f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f92:	f7ff bab2 	b.w	80054fa <__swbuf_r>
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	1c58      	adds	r0, r3, #1
 8005f9a:	6010      	str	r0, [r2, #0]
 8005f9c:	7019      	strb	r1, [r3, #0]
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <__sfputs_r>:
 8005fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	4614      	mov	r4, r2
 8005fae:	18d5      	adds	r5, r2, r3
 8005fb0:	42ac      	cmp	r4, r5
 8005fb2:	d101      	bne.n	8005fb8 <__sfputs_r+0x12>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e007      	b.n	8005fc8 <__sfputs_r+0x22>
 8005fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbc:	463a      	mov	r2, r7
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7ff ffda 	bl	8005f78 <__sfputc_r>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d1f3      	bne.n	8005fb0 <__sfputs_r+0xa>
 8005fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fcc <_vfiprintf_r>:
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	b09d      	sub	sp, #116	@ 0x74
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	4698      	mov	r8, r3
 8005fd8:	4606      	mov	r6, r0
 8005fda:	b118      	cbz	r0, 8005fe4 <_vfiprintf_r+0x18>
 8005fdc:	6a03      	ldr	r3, [r0, #32]
 8005fde:	b90b      	cbnz	r3, 8005fe4 <_vfiprintf_r+0x18>
 8005fe0:	f7ff f942 	bl	8005268 <__sinit>
 8005fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fe6:	07d9      	lsls	r1, r3, #31
 8005fe8:	d405      	bmi.n	8005ff6 <_vfiprintf_r+0x2a>
 8005fea:	89ab      	ldrh	r3, [r5, #12]
 8005fec:	059a      	lsls	r2, r3, #22
 8005fee:	d402      	bmi.n	8005ff6 <_vfiprintf_r+0x2a>
 8005ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ff2:	f7ff fba2 	bl	800573a <__retarget_lock_acquire_recursive>
 8005ff6:	89ab      	ldrh	r3, [r5, #12]
 8005ff8:	071b      	lsls	r3, r3, #28
 8005ffa:	d501      	bpl.n	8006000 <_vfiprintf_r+0x34>
 8005ffc:	692b      	ldr	r3, [r5, #16]
 8005ffe:	b99b      	cbnz	r3, 8006028 <_vfiprintf_r+0x5c>
 8006000:	4629      	mov	r1, r5
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff fab8 	bl	8005578 <__swsetup_r>
 8006008:	b170      	cbz	r0, 8006028 <_vfiprintf_r+0x5c>
 800600a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800600c:	07dc      	lsls	r4, r3, #31
 800600e:	d504      	bpl.n	800601a <_vfiprintf_r+0x4e>
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	b01d      	add	sp, #116	@ 0x74
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	0598      	lsls	r0, r3, #22
 800601e:	d4f7      	bmi.n	8006010 <_vfiprintf_r+0x44>
 8006020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006022:	f7ff fb8b 	bl	800573c <__retarget_lock_release_recursive>
 8006026:	e7f3      	b.n	8006010 <_vfiprintf_r+0x44>
 8006028:	2300      	movs	r3, #0
 800602a:	9309      	str	r3, [sp, #36]	@ 0x24
 800602c:	2320      	movs	r3, #32
 800602e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006032:	f8cd 800c 	str.w	r8, [sp, #12]
 8006036:	2330      	movs	r3, #48	@ 0x30
 8006038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061e8 <_vfiprintf_r+0x21c>
 800603c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006040:	f04f 0901 	mov.w	r9, #1
 8006044:	4623      	mov	r3, r4
 8006046:	469a      	mov	sl, r3
 8006048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800604c:	b10a      	cbz	r2, 8006052 <_vfiprintf_r+0x86>
 800604e:	2a25      	cmp	r2, #37	@ 0x25
 8006050:	d1f9      	bne.n	8006046 <_vfiprintf_r+0x7a>
 8006052:	ebba 0b04 	subs.w	fp, sl, r4
 8006056:	d00b      	beq.n	8006070 <_vfiprintf_r+0xa4>
 8006058:	465b      	mov	r3, fp
 800605a:	4622      	mov	r2, r4
 800605c:	4629      	mov	r1, r5
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ffa1 	bl	8005fa6 <__sfputs_r>
 8006064:	3001      	adds	r0, #1
 8006066:	f000 80a7 	beq.w	80061b8 <_vfiprintf_r+0x1ec>
 800606a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800606c:	445a      	add	r2, fp
 800606e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006070:	f89a 3000 	ldrb.w	r3, [sl]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 809f 	beq.w	80061b8 <_vfiprintf_r+0x1ec>
 800607a:	2300      	movs	r3, #0
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006084:	f10a 0a01 	add.w	sl, sl, #1
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	9307      	str	r3, [sp, #28]
 800608c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006090:	931a      	str	r3, [sp, #104]	@ 0x68
 8006092:	4654      	mov	r4, sl
 8006094:	2205      	movs	r2, #5
 8006096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609a:	4853      	ldr	r0, [pc, #332]	@ (80061e8 <_vfiprintf_r+0x21c>)
 800609c:	f7fa f8d0 	bl	8000240 <memchr>
 80060a0:	9a04      	ldr	r2, [sp, #16]
 80060a2:	b9d8      	cbnz	r0, 80060dc <_vfiprintf_r+0x110>
 80060a4:	06d1      	lsls	r1, r2, #27
 80060a6:	bf44      	itt	mi
 80060a8:	2320      	movmi	r3, #32
 80060aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060ae:	0713      	lsls	r3, r2, #28
 80060b0:	bf44      	itt	mi
 80060b2:	232b      	movmi	r3, #43	@ 0x2b
 80060b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060b8:	f89a 3000 	ldrb.w	r3, [sl]
 80060bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80060be:	d015      	beq.n	80060ec <_vfiprintf_r+0x120>
 80060c0:	9a07      	ldr	r2, [sp, #28]
 80060c2:	4654      	mov	r4, sl
 80060c4:	2000      	movs	r0, #0
 80060c6:	f04f 0c0a 	mov.w	ip, #10
 80060ca:	4621      	mov	r1, r4
 80060cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d0:	3b30      	subs	r3, #48	@ 0x30
 80060d2:	2b09      	cmp	r3, #9
 80060d4:	d94b      	bls.n	800616e <_vfiprintf_r+0x1a2>
 80060d6:	b1b0      	cbz	r0, 8006106 <_vfiprintf_r+0x13a>
 80060d8:	9207      	str	r2, [sp, #28]
 80060da:	e014      	b.n	8006106 <_vfiprintf_r+0x13a>
 80060dc:	eba0 0308 	sub.w	r3, r0, r8
 80060e0:	fa09 f303 	lsl.w	r3, r9, r3
 80060e4:	4313      	orrs	r3, r2
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	46a2      	mov	sl, r4
 80060ea:	e7d2      	b.n	8006092 <_vfiprintf_r+0xc6>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	1d19      	adds	r1, r3, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	9103      	str	r1, [sp, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bfbb      	ittet	lt
 80060f8:	425b      	neglt	r3, r3
 80060fa:	f042 0202 	orrlt.w	r2, r2, #2
 80060fe:	9307      	strge	r3, [sp, #28]
 8006100:	9307      	strlt	r3, [sp, #28]
 8006102:	bfb8      	it	lt
 8006104:	9204      	strlt	r2, [sp, #16]
 8006106:	7823      	ldrb	r3, [r4, #0]
 8006108:	2b2e      	cmp	r3, #46	@ 0x2e
 800610a:	d10a      	bne.n	8006122 <_vfiprintf_r+0x156>
 800610c:	7863      	ldrb	r3, [r4, #1]
 800610e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006110:	d132      	bne.n	8006178 <_vfiprintf_r+0x1ac>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	1d1a      	adds	r2, r3, #4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	9203      	str	r2, [sp, #12]
 800611a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800611e:	3402      	adds	r4, #2
 8006120:	9305      	str	r3, [sp, #20]
 8006122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061f8 <_vfiprintf_r+0x22c>
 8006126:	7821      	ldrb	r1, [r4, #0]
 8006128:	2203      	movs	r2, #3
 800612a:	4650      	mov	r0, sl
 800612c:	f7fa f888 	bl	8000240 <memchr>
 8006130:	b138      	cbz	r0, 8006142 <_vfiprintf_r+0x176>
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	eba0 000a 	sub.w	r0, r0, sl
 8006138:	2240      	movs	r2, #64	@ 0x40
 800613a:	4082      	lsls	r2, r0
 800613c:	4313      	orrs	r3, r2
 800613e:	3401      	adds	r4, #1
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006146:	4829      	ldr	r0, [pc, #164]	@ (80061ec <_vfiprintf_r+0x220>)
 8006148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800614c:	2206      	movs	r2, #6
 800614e:	f7fa f877 	bl	8000240 <memchr>
 8006152:	2800      	cmp	r0, #0
 8006154:	d03f      	beq.n	80061d6 <_vfiprintf_r+0x20a>
 8006156:	4b26      	ldr	r3, [pc, #152]	@ (80061f0 <_vfiprintf_r+0x224>)
 8006158:	bb1b      	cbnz	r3, 80061a2 <_vfiprintf_r+0x1d6>
 800615a:	9b03      	ldr	r3, [sp, #12]
 800615c:	3307      	adds	r3, #7
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	3308      	adds	r3, #8
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006168:	443b      	add	r3, r7
 800616a:	9309      	str	r3, [sp, #36]	@ 0x24
 800616c:	e76a      	b.n	8006044 <_vfiprintf_r+0x78>
 800616e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006172:	460c      	mov	r4, r1
 8006174:	2001      	movs	r0, #1
 8006176:	e7a8      	b.n	80060ca <_vfiprintf_r+0xfe>
 8006178:	2300      	movs	r3, #0
 800617a:	3401      	adds	r4, #1
 800617c:	9305      	str	r3, [sp, #20]
 800617e:	4619      	mov	r1, r3
 8006180:	f04f 0c0a 	mov.w	ip, #10
 8006184:	4620      	mov	r0, r4
 8006186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800618a:	3a30      	subs	r2, #48	@ 0x30
 800618c:	2a09      	cmp	r2, #9
 800618e:	d903      	bls.n	8006198 <_vfiprintf_r+0x1cc>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0c6      	beq.n	8006122 <_vfiprintf_r+0x156>
 8006194:	9105      	str	r1, [sp, #20]
 8006196:	e7c4      	b.n	8006122 <_vfiprintf_r+0x156>
 8006198:	fb0c 2101 	mla	r1, ip, r1, r2
 800619c:	4604      	mov	r4, r0
 800619e:	2301      	movs	r3, #1
 80061a0:	e7f0      	b.n	8006184 <_vfiprintf_r+0x1b8>
 80061a2:	ab03      	add	r3, sp, #12
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	462a      	mov	r2, r5
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <_vfiprintf_r+0x228>)
 80061aa:	a904      	add	r1, sp, #16
 80061ac:	4630      	mov	r0, r6
 80061ae:	f3af 8000 	nop.w
 80061b2:	4607      	mov	r7, r0
 80061b4:	1c78      	adds	r0, r7, #1
 80061b6:	d1d6      	bne.n	8006166 <_vfiprintf_r+0x19a>
 80061b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061ba:	07d9      	lsls	r1, r3, #31
 80061bc:	d405      	bmi.n	80061ca <_vfiprintf_r+0x1fe>
 80061be:	89ab      	ldrh	r3, [r5, #12]
 80061c0:	059a      	lsls	r2, r3, #22
 80061c2:	d402      	bmi.n	80061ca <_vfiprintf_r+0x1fe>
 80061c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061c6:	f7ff fab9 	bl	800573c <__retarget_lock_release_recursive>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	065b      	lsls	r3, r3, #25
 80061ce:	f53f af1f 	bmi.w	8006010 <_vfiprintf_r+0x44>
 80061d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d4:	e71e      	b.n	8006014 <_vfiprintf_r+0x48>
 80061d6:	ab03      	add	r3, sp, #12
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	462a      	mov	r2, r5
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <_vfiprintf_r+0x228>)
 80061de:	a904      	add	r1, sp, #16
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f879 	bl	80062d8 <_printf_i>
 80061e6:	e7e4      	b.n	80061b2 <_vfiprintf_r+0x1e6>
 80061e8:	080070cc 	.word	0x080070cc
 80061ec:	080070d6 	.word	0x080070d6
 80061f0:	00000000 	.word	0x00000000
 80061f4:	08005fa7 	.word	0x08005fa7
 80061f8:	080070d2 	.word	0x080070d2

080061fc <_printf_common>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	4616      	mov	r6, r2
 8006202:	4698      	mov	r8, r3
 8006204:	688a      	ldr	r2, [r1, #8]
 8006206:	690b      	ldr	r3, [r1, #16]
 8006208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800620c:	4293      	cmp	r3, r2
 800620e:	bfb8      	it	lt
 8006210:	4613      	movlt	r3, r2
 8006212:	6033      	str	r3, [r6, #0]
 8006214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006218:	4607      	mov	r7, r0
 800621a:	460c      	mov	r4, r1
 800621c:	b10a      	cbz	r2, 8006222 <_printf_common+0x26>
 800621e:	3301      	adds	r3, #1
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	0699      	lsls	r1, r3, #26
 8006226:	bf42      	ittt	mi
 8006228:	6833      	ldrmi	r3, [r6, #0]
 800622a:	3302      	addmi	r3, #2
 800622c:	6033      	strmi	r3, [r6, #0]
 800622e:	6825      	ldr	r5, [r4, #0]
 8006230:	f015 0506 	ands.w	r5, r5, #6
 8006234:	d106      	bne.n	8006244 <_printf_common+0x48>
 8006236:	f104 0a19 	add.w	sl, r4, #25
 800623a:	68e3      	ldr	r3, [r4, #12]
 800623c:	6832      	ldr	r2, [r6, #0]
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	42ab      	cmp	r3, r5
 8006242:	dc26      	bgt.n	8006292 <_printf_common+0x96>
 8006244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	3b00      	subs	r3, #0
 800624c:	bf18      	it	ne
 800624e:	2301      	movne	r3, #1
 8006250:	0692      	lsls	r2, r2, #26
 8006252:	d42b      	bmi.n	80062ac <_printf_common+0xb0>
 8006254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006258:	4641      	mov	r1, r8
 800625a:	4638      	mov	r0, r7
 800625c:	47c8      	blx	r9
 800625e:	3001      	adds	r0, #1
 8006260:	d01e      	beq.n	80062a0 <_printf_common+0xa4>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	6922      	ldr	r2, [r4, #16]
 8006266:	f003 0306 	and.w	r3, r3, #6
 800626a:	2b04      	cmp	r3, #4
 800626c:	bf02      	ittt	eq
 800626e:	68e5      	ldreq	r5, [r4, #12]
 8006270:	6833      	ldreq	r3, [r6, #0]
 8006272:	1aed      	subeq	r5, r5, r3
 8006274:	68a3      	ldr	r3, [r4, #8]
 8006276:	bf0c      	ite	eq
 8006278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800627c:	2500      	movne	r5, #0
 800627e:	4293      	cmp	r3, r2
 8006280:	bfc4      	itt	gt
 8006282:	1a9b      	subgt	r3, r3, r2
 8006284:	18ed      	addgt	r5, r5, r3
 8006286:	2600      	movs	r6, #0
 8006288:	341a      	adds	r4, #26
 800628a:	42b5      	cmp	r5, r6
 800628c:	d11a      	bne.n	80062c4 <_printf_common+0xc8>
 800628e:	2000      	movs	r0, #0
 8006290:	e008      	b.n	80062a4 <_printf_common+0xa8>
 8006292:	2301      	movs	r3, #1
 8006294:	4652      	mov	r2, sl
 8006296:	4641      	mov	r1, r8
 8006298:	4638      	mov	r0, r7
 800629a:	47c8      	blx	r9
 800629c:	3001      	adds	r0, #1
 800629e:	d103      	bne.n	80062a8 <_printf_common+0xac>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7c6      	b.n	800623a <_printf_common+0x3e>
 80062ac:	18e1      	adds	r1, r4, r3
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	2030      	movs	r0, #48	@ 0x30
 80062b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062b6:	4422      	add	r2, r4
 80062b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062c0:	3302      	adds	r3, #2
 80062c2:	e7c7      	b.n	8006254 <_printf_common+0x58>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4622      	mov	r2, r4
 80062c8:	4641      	mov	r1, r8
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c8      	blx	r9
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xa4>
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7d9      	b.n	800628a <_printf_common+0x8e>
	...

080062d8 <_printf_i>:
 80062d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	7e0f      	ldrb	r7, [r1, #24]
 80062de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062e0:	2f78      	cmp	r7, #120	@ 0x78
 80062e2:	4691      	mov	r9, r2
 80062e4:	4680      	mov	r8, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	469a      	mov	sl, r3
 80062ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ee:	d807      	bhi.n	8006300 <_printf_i+0x28>
 80062f0:	2f62      	cmp	r7, #98	@ 0x62
 80062f2:	d80a      	bhi.n	800630a <_printf_i+0x32>
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	f000 80d2 	beq.w	800649e <_printf_i+0x1c6>
 80062fa:	2f58      	cmp	r7, #88	@ 0x58
 80062fc:	f000 80b9 	beq.w	8006472 <_printf_i+0x19a>
 8006300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006308:	e03a      	b.n	8006380 <_printf_i+0xa8>
 800630a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800630e:	2b15      	cmp	r3, #21
 8006310:	d8f6      	bhi.n	8006300 <_printf_i+0x28>
 8006312:	a101      	add	r1, pc, #4	@ (adr r1, 8006318 <_printf_i+0x40>)
 8006314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006318:	08006371 	.word	0x08006371
 800631c:	08006385 	.word	0x08006385
 8006320:	08006301 	.word	0x08006301
 8006324:	08006301 	.word	0x08006301
 8006328:	08006301 	.word	0x08006301
 800632c:	08006301 	.word	0x08006301
 8006330:	08006385 	.word	0x08006385
 8006334:	08006301 	.word	0x08006301
 8006338:	08006301 	.word	0x08006301
 800633c:	08006301 	.word	0x08006301
 8006340:	08006301 	.word	0x08006301
 8006344:	08006485 	.word	0x08006485
 8006348:	080063af 	.word	0x080063af
 800634c:	0800643f 	.word	0x0800643f
 8006350:	08006301 	.word	0x08006301
 8006354:	08006301 	.word	0x08006301
 8006358:	080064a7 	.word	0x080064a7
 800635c:	08006301 	.word	0x08006301
 8006360:	080063af 	.word	0x080063af
 8006364:	08006301 	.word	0x08006301
 8006368:	08006301 	.word	0x08006301
 800636c:	08006447 	.word	0x08006447
 8006370:	6833      	ldr	r3, [r6, #0]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6032      	str	r2, [r6, #0]
 8006378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800637c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006380:	2301      	movs	r3, #1
 8006382:	e09d      	b.n	80064c0 <_printf_i+0x1e8>
 8006384:	6833      	ldr	r3, [r6, #0]
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	6031      	str	r1, [r6, #0]
 800638c:	0606      	lsls	r6, r0, #24
 800638e:	d501      	bpl.n	8006394 <_printf_i+0xbc>
 8006390:	681d      	ldr	r5, [r3, #0]
 8006392:	e003      	b.n	800639c <_printf_i+0xc4>
 8006394:	0645      	lsls	r5, r0, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0xb8>
 8006398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800639c:	2d00      	cmp	r5, #0
 800639e:	da03      	bge.n	80063a8 <_printf_i+0xd0>
 80063a0:	232d      	movs	r3, #45	@ 0x2d
 80063a2:	426d      	negs	r5, r5
 80063a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a8:	4859      	ldr	r0, [pc, #356]	@ (8006510 <_printf_i+0x238>)
 80063aa:	230a      	movs	r3, #10
 80063ac:	e011      	b.n	80063d2 <_printf_i+0xfa>
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	6833      	ldr	r3, [r6, #0]
 80063b2:	0608      	lsls	r0, r1, #24
 80063b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80063b8:	d402      	bmi.n	80063c0 <_printf_i+0xe8>
 80063ba:	0649      	lsls	r1, r1, #25
 80063bc:	bf48      	it	mi
 80063be:	b2ad      	uxthmi	r5, r5
 80063c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80063c2:	4853      	ldr	r0, [pc, #332]	@ (8006510 <_printf_i+0x238>)
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	bf14      	ite	ne
 80063c8:	230a      	movne	r3, #10
 80063ca:	2308      	moveq	r3, #8
 80063cc:	2100      	movs	r1, #0
 80063ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063d2:	6866      	ldr	r6, [r4, #4]
 80063d4:	60a6      	str	r6, [r4, #8]
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	bfa2      	ittt	ge
 80063da:	6821      	ldrge	r1, [r4, #0]
 80063dc:	f021 0104 	bicge.w	r1, r1, #4
 80063e0:	6021      	strge	r1, [r4, #0]
 80063e2:	b90d      	cbnz	r5, 80063e8 <_printf_i+0x110>
 80063e4:	2e00      	cmp	r6, #0
 80063e6:	d04b      	beq.n	8006480 <_printf_i+0x1a8>
 80063e8:	4616      	mov	r6, r2
 80063ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ee:	fb03 5711 	mls	r7, r3, r1, r5
 80063f2:	5dc7      	ldrb	r7, [r0, r7]
 80063f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063f8:	462f      	mov	r7, r5
 80063fa:	42bb      	cmp	r3, r7
 80063fc:	460d      	mov	r5, r1
 80063fe:	d9f4      	bls.n	80063ea <_printf_i+0x112>
 8006400:	2b08      	cmp	r3, #8
 8006402:	d10b      	bne.n	800641c <_printf_i+0x144>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	07df      	lsls	r7, r3, #31
 8006408:	d508      	bpl.n	800641c <_printf_i+0x144>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	6861      	ldr	r1, [r4, #4]
 800640e:	4299      	cmp	r1, r3
 8006410:	bfde      	ittt	le
 8006412:	2330      	movle	r3, #48	@ 0x30
 8006414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006418:	f106 36ff 	addle.w	r6, r6, #4294967295
 800641c:	1b92      	subs	r2, r2, r6
 800641e:	6122      	str	r2, [r4, #16]
 8006420:	f8cd a000 	str.w	sl, [sp]
 8006424:	464b      	mov	r3, r9
 8006426:	aa03      	add	r2, sp, #12
 8006428:	4621      	mov	r1, r4
 800642a:	4640      	mov	r0, r8
 800642c:	f7ff fee6 	bl	80061fc <_printf_common>
 8006430:	3001      	adds	r0, #1
 8006432:	d14a      	bne.n	80064ca <_printf_i+0x1f2>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	b004      	add	sp, #16
 800643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f043 0320 	orr.w	r3, r3, #32
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	4833      	ldr	r0, [pc, #204]	@ (8006514 <_printf_i+0x23c>)
 8006448:	2778      	movs	r7, #120	@ 0x78
 800644a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	6831      	ldr	r1, [r6, #0]
 8006452:	061f      	lsls	r7, r3, #24
 8006454:	f851 5b04 	ldr.w	r5, [r1], #4
 8006458:	d402      	bmi.n	8006460 <_printf_i+0x188>
 800645a:	065f      	lsls	r7, r3, #25
 800645c:	bf48      	it	mi
 800645e:	b2ad      	uxthmi	r5, r5
 8006460:	6031      	str	r1, [r6, #0]
 8006462:	07d9      	lsls	r1, r3, #31
 8006464:	bf44      	itt	mi
 8006466:	f043 0320 	orrmi.w	r3, r3, #32
 800646a:	6023      	strmi	r3, [r4, #0]
 800646c:	b11d      	cbz	r5, 8006476 <_printf_i+0x19e>
 800646e:	2310      	movs	r3, #16
 8006470:	e7ac      	b.n	80063cc <_printf_i+0xf4>
 8006472:	4827      	ldr	r0, [pc, #156]	@ (8006510 <_printf_i+0x238>)
 8006474:	e7e9      	b.n	800644a <_printf_i+0x172>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f023 0320 	bic.w	r3, r3, #32
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	e7f6      	b.n	800646e <_printf_i+0x196>
 8006480:	4616      	mov	r6, r2
 8006482:	e7bd      	b.n	8006400 <_printf_i+0x128>
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	6825      	ldr	r5, [r4, #0]
 8006488:	6961      	ldr	r1, [r4, #20]
 800648a:	1d18      	adds	r0, r3, #4
 800648c:	6030      	str	r0, [r6, #0]
 800648e:	062e      	lsls	r6, r5, #24
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	d501      	bpl.n	8006498 <_printf_i+0x1c0>
 8006494:	6019      	str	r1, [r3, #0]
 8006496:	e002      	b.n	800649e <_printf_i+0x1c6>
 8006498:	0668      	lsls	r0, r5, #25
 800649a:	d5fb      	bpl.n	8006494 <_printf_i+0x1bc>
 800649c:	8019      	strh	r1, [r3, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	4616      	mov	r6, r2
 80064a4:	e7bc      	b.n	8006420 <_printf_i+0x148>
 80064a6:	6833      	ldr	r3, [r6, #0]
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	6032      	str	r2, [r6, #0]
 80064ac:	681e      	ldr	r6, [r3, #0]
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	2100      	movs	r1, #0
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7f9 fec4 	bl	8000240 <memchr>
 80064b8:	b108      	cbz	r0, 80064be <_printf_i+0x1e6>
 80064ba:	1b80      	subs	r0, r0, r6
 80064bc:	6060      	str	r0, [r4, #4]
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	6123      	str	r3, [r4, #16]
 80064c2:	2300      	movs	r3, #0
 80064c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c8:	e7aa      	b.n	8006420 <_printf_i+0x148>
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	4632      	mov	r2, r6
 80064ce:	4649      	mov	r1, r9
 80064d0:	4640      	mov	r0, r8
 80064d2:	47d0      	blx	sl
 80064d4:	3001      	adds	r0, #1
 80064d6:	d0ad      	beq.n	8006434 <_printf_i+0x15c>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	079b      	lsls	r3, r3, #30
 80064dc:	d413      	bmi.n	8006506 <_printf_i+0x22e>
 80064de:	68e0      	ldr	r0, [r4, #12]
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	4298      	cmp	r0, r3
 80064e4:	bfb8      	it	lt
 80064e6:	4618      	movlt	r0, r3
 80064e8:	e7a6      	b.n	8006438 <_printf_i+0x160>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4632      	mov	r2, r6
 80064ee:	4649      	mov	r1, r9
 80064f0:	4640      	mov	r0, r8
 80064f2:	47d0      	blx	sl
 80064f4:	3001      	adds	r0, #1
 80064f6:	d09d      	beq.n	8006434 <_printf_i+0x15c>
 80064f8:	3501      	adds	r5, #1
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	9903      	ldr	r1, [sp, #12]
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	42ab      	cmp	r3, r5
 8006502:	dcf2      	bgt.n	80064ea <_printf_i+0x212>
 8006504:	e7eb      	b.n	80064de <_printf_i+0x206>
 8006506:	2500      	movs	r5, #0
 8006508:	f104 0619 	add.w	r6, r4, #25
 800650c:	e7f5      	b.n	80064fa <_printf_i+0x222>
 800650e:	bf00      	nop
 8006510:	080070dd 	.word	0x080070dd
 8006514:	080070ee 	.word	0x080070ee

08006518 <_scanf_chars>:
 8006518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800651c:	4615      	mov	r5, r2
 800651e:	688a      	ldr	r2, [r1, #8]
 8006520:	4680      	mov	r8, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b932      	cbnz	r2, 8006534 <_scanf_chars+0x1c>
 8006526:	698a      	ldr	r2, [r1, #24]
 8006528:	2a00      	cmp	r2, #0
 800652a:	bf14      	ite	ne
 800652c:	f04f 32ff 	movne.w	r2, #4294967295
 8006530:	2201      	moveq	r2, #1
 8006532:	608a      	str	r2, [r1, #8]
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80065c8 <_scanf_chars+0xb0>
 800653a:	06d1      	lsls	r1, r2, #27
 800653c:	bf5f      	itttt	pl
 800653e:	681a      	ldrpl	r2, [r3, #0]
 8006540:	1d11      	addpl	r1, r2, #4
 8006542:	6019      	strpl	r1, [r3, #0]
 8006544:	6816      	ldrpl	r6, [r2, #0]
 8006546:	2700      	movs	r7, #0
 8006548:	69a0      	ldr	r0, [r4, #24]
 800654a:	b188      	cbz	r0, 8006570 <_scanf_chars+0x58>
 800654c:	2801      	cmp	r0, #1
 800654e:	d107      	bne.n	8006560 <_scanf_chars+0x48>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	6963      	ldr	r3, [r4, #20]
 8006556:	5c9b      	ldrb	r3, [r3, r2]
 8006558:	b953      	cbnz	r3, 8006570 <_scanf_chars+0x58>
 800655a:	2f00      	cmp	r7, #0
 800655c:	d031      	beq.n	80065c2 <_scanf_chars+0xaa>
 800655e:	e022      	b.n	80065a6 <_scanf_chars+0x8e>
 8006560:	2802      	cmp	r0, #2
 8006562:	d120      	bne.n	80065a6 <_scanf_chars+0x8e>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f819 3003 	ldrb.w	r3, [r9, r3]
 800656c:	071b      	lsls	r3, r3, #28
 800656e:	d41a      	bmi.n	80065a6 <_scanf_chars+0x8e>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	06da      	lsls	r2, r3, #27
 8006574:	bf5e      	ittt	pl
 8006576:	682b      	ldrpl	r3, [r5, #0]
 8006578:	781b      	ldrbpl	r3, [r3, #0]
 800657a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800657e:	682a      	ldr	r2, [r5, #0]
 8006580:	686b      	ldr	r3, [r5, #4]
 8006582:	3201      	adds	r2, #1
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	68a2      	ldr	r2, [r4, #8]
 8006588:	3b01      	subs	r3, #1
 800658a:	3a01      	subs	r2, #1
 800658c:	606b      	str	r3, [r5, #4]
 800658e:	3701      	adds	r7, #1
 8006590:	60a2      	str	r2, [r4, #8]
 8006592:	b142      	cbz	r2, 80065a6 <_scanf_chars+0x8e>
 8006594:	2b00      	cmp	r3, #0
 8006596:	dcd7      	bgt.n	8006548 <_scanf_chars+0x30>
 8006598:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800659c:	4629      	mov	r1, r5
 800659e:	4640      	mov	r0, r8
 80065a0:	4798      	blx	r3
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0d0      	beq.n	8006548 <_scanf_chars+0x30>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	f013 0310 	ands.w	r3, r3, #16
 80065ac:	d105      	bne.n	80065ba <_scanf_chars+0xa2>
 80065ae:	68e2      	ldr	r2, [r4, #12]
 80065b0:	3201      	adds	r2, #1
 80065b2:	60e2      	str	r2, [r4, #12]
 80065b4:	69a2      	ldr	r2, [r4, #24]
 80065b6:	b102      	cbz	r2, 80065ba <_scanf_chars+0xa2>
 80065b8:	7033      	strb	r3, [r6, #0]
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	443b      	add	r3, r7
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2000      	movs	r0, #0
 80065c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c6:	bf00      	nop
 80065c8:	0800711b 	.word	0x0800711b

080065cc <_scanf_i>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4698      	mov	r8, r3
 80065d2:	4b74      	ldr	r3, [pc, #464]	@ (80067a4 <_scanf_i+0x1d8>)
 80065d4:	460c      	mov	r4, r1
 80065d6:	4682      	mov	sl, r0
 80065d8:	4616      	mov	r6, r2
 80065da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065de:	b087      	sub	sp, #28
 80065e0:	ab03      	add	r3, sp, #12
 80065e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80065e6:	4b70      	ldr	r3, [pc, #448]	@ (80067a8 <_scanf_i+0x1dc>)
 80065e8:	69a1      	ldr	r1, [r4, #24]
 80065ea:	4a70      	ldr	r2, [pc, #448]	@ (80067ac <_scanf_i+0x1e0>)
 80065ec:	2903      	cmp	r1, #3
 80065ee:	bf08      	it	eq
 80065f0:	461a      	moveq	r2, r3
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	9201      	str	r2, [sp, #4]
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80065fc:	bf88      	it	hi
 80065fe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006602:	4627      	mov	r7, r4
 8006604:	bf82      	ittt	hi
 8006606:	eb03 0905 	addhi.w	r9, r3, r5
 800660a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800660e:	60a3      	strhi	r3, [r4, #8]
 8006610:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006614:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006618:	bf98      	it	ls
 800661a:	f04f 0900 	movls.w	r9, #0
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	463d      	mov	r5, r7
 8006622:	f04f 0b00 	mov.w	fp, #0
 8006626:	6831      	ldr	r1, [r6, #0]
 8006628:	ab03      	add	r3, sp, #12
 800662a:	7809      	ldrb	r1, [r1, #0]
 800662c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006630:	2202      	movs	r2, #2
 8006632:	f7f9 fe05 	bl	8000240 <memchr>
 8006636:	b328      	cbz	r0, 8006684 <_scanf_i+0xb8>
 8006638:	f1bb 0f01 	cmp.w	fp, #1
 800663c:	d159      	bne.n	80066f2 <_scanf_i+0x126>
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	b92a      	cbnz	r2, 800664e <_scanf_i+0x82>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	2108      	movs	r1, #8
 8006646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800664a:	6061      	str	r1, [r4, #4]
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	6822      	ldr	r2, [r4, #0]
 8006650:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	68a2      	ldr	r2, [r4, #8]
 8006658:	1e51      	subs	r1, r2, #1
 800665a:	60a1      	str	r1, [r4, #8]
 800665c:	b192      	cbz	r2, 8006684 <_scanf_i+0xb8>
 800665e:	6832      	ldr	r2, [r6, #0]
 8006660:	1c51      	adds	r1, r2, #1
 8006662:	6031      	str	r1, [r6, #0]
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	f805 2b01 	strb.w	r2, [r5], #1
 800666a:	6872      	ldr	r2, [r6, #4]
 800666c:	3a01      	subs	r2, #1
 800666e:	2a00      	cmp	r2, #0
 8006670:	6072      	str	r2, [r6, #4]
 8006672:	dc07      	bgt.n	8006684 <_scanf_i+0xb8>
 8006674:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006678:	4631      	mov	r1, r6
 800667a:	4650      	mov	r0, sl
 800667c:	4790      	blx	r2
 800667e:	2800      	cmp	r0, #0
 8006680:	f040 8085 	bne.w	800678e <_scanf_i+0x1c2>
 8006684:	f10b 0b01 	add.w	fp, fp, #1
 8006688:	f1bb 0f03 	cmp.w	fp, #3
 800668c:	d1cb      	bne.n	8006626 <_scanf_i+0x5a>
 800668e:	6863      	ldr	r3, [r4, #4]
 8006690:	b90b      	cbnz	r3, 8006696 <_scanf_i+0xca>
 8006692:	230a      	movs	r3, #10
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	4945      	ldr	r1, [pc, #276]	@ (80067b0 <_scanf_i+0x1e4>)
 800669a:	6960      	ldr	r0, [r4, #20]
 800669c:	1ac9      	subs	r1, r1, r3
 800669e:	f000 f997 	bl	80069d0 <__sccl>
 80066a2:	f04f 0b00 	mov.w	fp, #0
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03d      	beq.n	800672a <_scanf_i+0x15e>
 80066ae:	6831      	ldr	r1, [r6, #0]
 80066b0:	6960      	ldr	r0, [r4, #20]
 80066b2:	f891 c000 	ldrb.w	ip, [r1]
 80066b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d035      	beq.n	800672a <_scanf_i+0x15e>
 80066be:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80066c2:	d124      	bne.n	800670e <_scanf_i+0x142>
 80066c4:	0510      	lsls	r0, r2, #20
 80066c6:	d522      	bpl.n	800670e <_scanf_i+0x142>
 80066c8:	f10b 0b01 	add.w	fp, fp, #1
 80066cc:	f1b9 0f00 	cmp.w	r9, #0
 80066d0:	d003      	beq.n	80066da <_scanf_i+0x10e>
 80066d2:	3301      	adds	r3, #1
 80066d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	6873      	ldr	r3, [r6, #4]
 80066dc:	3b01      	subs	r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	6073      	str	r3, [r6, #4]
 80066e2:	dd1b      	ble.n	800671c <_scanf_i+0x150>
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	e7d9      	b.n	80066a6 <_scanf_i+0xda>
 80066f2:	f1bb 0f02 	cmp.w	fp, #2
 80066f6:	d1ae      	bne.n	8006656 <_scanf_i+0x8a>
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80066fe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006702:	d1bf      	bne.n	8006684 <_scanf_i+0xb8>
 8006704:	2110      	movs	r1, #16
 8006706:	6061      	str	r1, [r4, #4]
 8006708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800670c:	e7a2      	b.n	8006654 <_scanf_i+0x88>
 800670e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006712:	6022      	str	r2, [r4, #0]
 8006714:	780b      	ldrb	r3, [r1, #0]
 8006716:	f805 3b01 	strb.w	r3, [r5], #1
 800671a:	e7de      	b.n	80066da <_scanf_i+0x10e>
 800671c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006720:	4631      	mov	r1, r6
 8006722:	4650      	mov	r0, sl
 8006724:	4798      	blx	r3
 8006726:	2800      	cmp	r0, #0
 8006728:	d0df      	beq.n	80066ea <_scanf_i+0x11e>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	05d9      	lsls	r1, r3, #23
 800672e:	d50d      	bpl.n	800674c <_scanf_i+0x180>
 8006730:	42bd      	cmp	r5, r7
 8006732:	d909      	bls.n	8006748 <_scanf_i+0x17c>
 8006734:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006738:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800673c:	4632      	mov	r2, r6
 800673e:	4650      	mov	r0, sl
 8006740:	4798      	blx	r3
 8006742:	f105 39ff 	add.w	r9, r5, #4294967295
 8006746:	464d      	mov	r5, r9
 8006748:	42bd      	cmp	r5, r7
 800674a:	d028      	beq.n	800679e <_scanf_i+0x1d2>
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	f012 0210 	ands.w	r2, r2, #16
 8006752:	d113      	bne.n	800677c <_scanf_i+0x1b0>
 8006754:	702a      	strb	r2, [r5, #0]
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	9e01      	ldr	r6, [sp, #4]
 800675a:	4639      	mov	r1, r7
 800675c:	4650      	mov	r0, sl
 800675e:	47b0      	blx	r6
 8006760:	f8d8 3000 	ldr.w	r3, [r8]
 8006764:	6821      	ldr	r1, [r4, #0]
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	f8c8 2000 	str.w	r2, [r8]
 800676c:	f011 0f20 	tst.w	r1, #32
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	d00f      	beq.n	8006794 <_scanf_i+0x1c8>
 8006774:	6018      	str	r0, [r3, #0]
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60e3      	str	r3, [r4, #12]
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	1bed      	subs	r5, r5, r7
 8006780:	445d      	add	r5, fp
 8006782:	442b      	add	r3, r5
 8006784:	6123      	str	r3, [r4, #16]
 8006786:	2000      	movs	r0, #0
 8006788:	b007      	add	sp, #28
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678e:	f04f 0b00 	mov.w	fp, #0
 8006792:	e7ca      	b.n	800672a <_scanf_i+0x15e>
 8006794:	07ca      	lsls	r2, r1, #31
 8006796:	bf4c      	ite	mi
 8006798:	8018      	strhmi	r0, [r3, #0]
 800679a:	6018      	strpl	r0, [r3, #0]
 800679c:	e7eb      	b.n	8006776 <_scanf_i+0x1aa>
 800679e:	2001      	movs	r0, #1
 80067a0:	e7f2      	b.n	8006788 <_scanf_i+0x1bc>
 80067a2:	bf00      	nop
 80067a4:	080070a8 	.word	0x080070a8
 80067a8:	08006cbd 	.word	0x08006cbd
 80067ac:	08006d9d 	.word	0x08006d9d
 80067b0:	0800710f 	.word	0x0800710f

080067b4 <__sflush_r>:
 80067b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	0716      	lsls	r6, r2, #28
 80067be:	4605      	mov	r5, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	d454      	bmi.n	800686e <__sflush_r+0xba>
 80067c4:	684b      	ldr	r3, [r1, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	dc02      	bgt.n	80067d0 <__sflush_r+0x1c>
 80067ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	dd48      	ble.n	8006862 <__sflush_r+0xae>
 80067d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d045      	beq.n	8006862 <__sflush_r+0xae>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067dc:	682f      	ldr	r7, [r5, #0]
 80067de:	6a21      	ldr	r1, [r4, #32]
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	d030      	beq.n	8006846 <__sflush_r+0x92>
 80067e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	0759      	lsls	r1, r3, #29
 80067ea:	d505      	bpl.n	80067f8 <__sflush_r+0x44>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067f2:	b10b      	cbz	r3, 80067f8 <__sflush_r+0x44>
 80067f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067f6:	1ad2      	subs	r2, r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067fc:	6a21      	ldr	r1, [r4, #32]
 80067fe:	4628      	mov	r0, r5
 8006800:	47b0      	blx	r6
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	d106      	bne.n	8006816 <__sflush_r+0x62>
 8006808:	6829      	ldr	r1, [r5, #0]
 800680a:	291d      	cmp	r1, #29
 800680c:	d82b      	bhi.n	8006866 <__sflush_r+0xb2>
 800680e:	4a2a      	ldr	r2, [pc, #168]	@ (80068b8 <__sflush_r+0x104>)
 8006810:	410a      	asrs	r2, r1
 8006812:	07d6      	lsls	r6, r2, #31
 8006814:	d427      	bmi.n	8006866 <__sflush_r+0xb2>
 8006816:	2200      	movs	r2, #0
 8006818:	6062      	str	r2, [r4, #4]
 800681a:	04d9      	lsls	r1, r3, #19
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	d504      	bpl.n	800682c <__sflush_r+0x78>
 8006822:	1c42      	adds	r2, r0, #1
 8006824:	d101      	bne.n	800682a <__sflush_r+0x76>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	b903      	cbnz	r3, 800682c <__sflush_r+0x78>
 800682a:	6560      	str	r0, [r4, #84]	@ 0x54
 800682c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800682e:	602f      	str	r7, [r5, #0]
 8006830:	b1b9      	cbz	r1, 8006862 <__sflush_r+0xae>
 8006832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006836:	4299      	cmp	r1, r3
 8006838:	d002      	beq.n	8006840 <__sflush_r+0x8c>
 800683a:	4628      	mov	r0, r5
 800683c:	f7fe ff80 	bl	8005740 <_free_r>
 8006840:	2300      	movs	r3, #0
 8006842:	6363      	str	r3, [r4, #52]	@ 0x34
 8006844:	e00d      	b.n	8006862 <__sflush_r+0xae>
 8006846:	2301      	movs	r3, #1
 8006848:	4628      	mov	r0, r5
 800684a:	47b0      	blx	r6
 800684c:	4602      	mov	r2, r0
 800684e:	1c50      	adds	r0, r2, #1
 8006850:	d1c9      	bne.n	80067e6 <__sflush_r+0x32>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0c6      	beq.n	80067e6 <__sflush_r+0x32>
 8006858:	2b1d      	cmp	r3, #29
 800685a:	d001      	beq.n	8006860 <__sflush_r+0xac>
 800685c:	2b16      	cmp	r3, #22
 800685e:	d11e      	bne.n	800689e <__sflush_r+0xea>
 8006860:	602f      	str	r7, [r5, #0]
 8006862:	2000      	movs	r0, #0
 8006864:	e022      	b.n	80068ac <__sflush_r+0xf8>
 8006866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686a:	b21b      	sxth	r3, r3
 800686c:	e01b      	b.n	80068a6 <__sflush_r+0xf2>
 800686e:	690f      	ldr	r7, [r1, #16]
 8006870:	2f00      	cmp	r7, #0
 8006872:	d0f6      	beq.n	8006862 <__sflush_r+0xae>
 8006874:	0793      	lsls	r3, r2, #30
 8006876:	680e      	ldr	r6, [r1, #0]
 8006878:	bf08      	it	eq
 800687a:	694b      	ldreq	r3, [r1, #20]
 800687c:	600f      	str	r7, [r1, #0]
 800687e:	bf18      	it	ne
 8006880:	2300      	movne	r3, #0
 8006882:	eba6 0807 	sub.w	r8, r6, r7
 8006886:	608b      	str	r3, [r1, #8]
 8006888:	f1b8 0f00 	cmp.w	r8, #0
 800688c:	dde9      	ble.n	8006862 <__sflush_r+0xae>
 800688e:	6a21      	ldr	r1, [r4, #32]
 8006890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006892:	4643      	mov	r3, r8
 8006894:	463a      	mov	r2, r7
 8006896:	4628      	mov	r0, r5
 8006898:	47b0      	blx	r6
 800689a:	2800      	cmp	r0, #0
 800689c:	dc08      	bgt.n	80068b0 <__sflush_r+0xfc>
 800689e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4407      	add	r7, r0
 80068b2:	eba8 0800 	sub.w	r8, r8, r0
 80068b6:	e7e7      	b.n	8006888 <__sflush_r+0xd4>
 80068b8:	dfbffffe 	.word	0xdfbffffe

080068bc <_fflush_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	690b      	ldr	r3, [r1, #16]
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b913      	cbnz	r3, 80068cc <_fflush_r+0x10>
 80068c6:	2500      	movs	r5, #0
 80068c8:	4628      	mov	r0, r5
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	b118      	cbz	r0, 80068d6 <_fflush_r+0x1a>
 80068ce:	6a03      	ldr	r3, [r0, #32]
 80068d0:	b90b      	cbnz	r3, 80068d6 <_fflush_r+0x1a>
 80068d2:	f7fe fcc9 	bl	8005268 <__sinit>
 80068d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f3      	beq.n	80068c6 <_fflush_r+0xa>
 80068de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068e0:	07d0      	lsls	r0, r2, #31
 80068e2:	d404      	bmi.n	80068ee <_fflush_r+0x32>
 80068e4:	0599      	lsls	r1, r3, #22
 80068e6:	d402      	bmi.n	80068ee <_fflush_r+0x32>
 80068e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ea:	f7fe ff26 	bl	800573a <__retarget_lock_acquire_recursive>
 80068ee:	4628      	mov	r0, r5
 80068f0:	4621      	mov	r1, r4
 80068f2:	f7ff ff5f 	bl	80067b4 <__sflush_r>
 80068f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068f8:	07da      	lsls	r2, r3, #31
 80068fa:	4605      	mov	r5, r0
 80068fc:	d4e4      	bmi.n	80068c8 <_fflush_r+0xc>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	059b      	lsls	r3, r3, #22
 8006902:	d4e1      	bmi.n	80068c8 <_fflush_r+0xc>
 8006904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006906:	f7fe ff19 	bl	800573c <__retarget_lock_release_recursive>
 800690a:	e7dd      	b.n	80068c8 <_fflush_r+0xc>

0800690c <__swhatbuf_r>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	460c      	mov	r4, r1
 8006910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006914:	2900      	cmp	r1, #0
 8006916:	b096      	sub	sp, #88	@ 0x58
 8006918:	4615      	mov	r5, r2
 800691a:	461e      	mov	r6, r3
 800691c:	da0d      	bge.n	800693a <__swhatbuf_r+0x2e>
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006924:	f04f 0100 	mov.w	r1, #0
 8006928:	bf14      	ite	ne
 800692a:	2340      	movne	r3, #64	@ 0x40
 800692c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006930:	2000      	movs	r0, #0
 8006932:	6031      	str	r1, [r6, #0]
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	b016      	add	sp, #88	@ 0x58
 8006938:	bd70      	pop	{r4, r5, r6, pc}
 800693a:	466a      	mov	r2, sp
 800693c:	f000 f8d6 	bl	8006aec <_fstat_r>
 8006940:	2800      	cmp	r0, #0
 8006942:	dbec      	blt.n	800691e <__swhatbuf_r+0x12>
 8006944:	9901      	ldr	r1, [sp, #4]
 8006946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800694a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800694e:	4259      	negs	r1, r3
 8006950:	4159      	adcs	r1, r3
 8006952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006956:	e7eb      	b.n	8006930 <__swhatbuf_r+0x24>

08006958 <__smakebuf_r>:
 8006958:	898b      	ldrh	r3, [r1, #12]
 800695a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695c:	079d      	lsls	r5, r3, #30
 800695e:	4606      	mov	r6, r0
 8006960:	460c      	mov	r4, r1
 8006962:	d507      	bpl.n	8006974 <__smakebuf_r+0x1c>
 8006964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	2301      	movs	r3, #1
 800696e:	6163      	str	r3, [r4, #20]
 8006970:	b003      	add	sp, #12
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006974:	ab01      	add	r3, sp, #4
 8006976:	466a      	mov	r2, sp
 8006978:	f7ff ffc8 	bl	800690c <__swhatbuf_r>
 800697c:	9f00      	ldr	r7, [sp, #0]
 800697e:	4605      	mov	r5, r0
 8006980:	4639      	mov	r1, r7
 8006982:	4630      	mov	r0, r6
 8006984:	f7fe ff48 	bl	8005818 <_malloc_r>
 8006988:	b948      	cbnz	r0, 800699e <__smakebuf_r+0x46>
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	059a      	lsls	r2, r3, #22
 8006990:	d4ee      	bmi.n	8006970 <__smakebuf_r+0x18>
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	e7e2      	b.n	8006964 <__smakebuf_r+0xc>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	6020      	str	r0, [r4, #0]
 80069a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069ae:	b15b      	cbz	r3, 80069c8 <__smakebuf_r+0x70>
 80069b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 f8ab 	bl	8006b10 <_isatty_r>
 80069ba:	b128      	cbz	r0, 80069c8 <__smakebuf_r+0x70>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	431d      	orrs	r5, r3
 80069cc:	81a5      	strh	r5, [r4, #12]
 80069ce:	e7cf      	b.n	8006970 <__smakebuf_r+0x18>

080069d0 <__sccl>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	780b      	ldrb	r3, [r1, #0]
 80069d4:	4604      	mov	r4, r0
 80069d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80069d8:	bf0b      	itete	eq
 80069da:	784b      	ldrbeq	r3, [r1, #1]
 80069dc:	1c4a      	addne	r2, r1, #1
 80069de:	1c8a      	addeq	r2, r1, #2
 80069e0:	2100      	movne	r1, #0
 80069e2:	bf08      	it	eq
 80069e4:	2101      	moveq	r1, #1
 80069e6:	3801      	subs	r0, #1
 80069e8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80069ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 80069f0:	42a8      	cmp	r0, r5
 80069f2:	d1fb      	bne.n	80069ec <__sccl+0x1c>
 80069f4:	b90b      	cbnz	r3, 80069fa <__sccl+0x2a>
 80069f6:	1e50      	subs	r0, r2, #1
 80069f8:	bd70      	pop	{r4, r5, r6, pc}
 80069fa:	f081 0101 	eor.w	r1, r1, #1
 80069fe:	54e1      	strb	r1, [r4, r3]
 8006a00:	4610      	mov	r0, r2
 8006a02:	4602      	mov	r2, r0
 8006a04:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a08:	2d2d      	cmp	r5, #45	@ 0x2d
 8006a0a:	d005      	beq.n	8006a18 <__sccl+0x48>
 8006a0c:	2d5d      	cmp	r5, #93	@ 0x5d
 8006a0e:	d016      	beq.n	8006a3e <__sccl+0x6e>
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	d0f1      	beq.n	80069f8 <__sccl+0x28>
 8006a14:	462b      	mov	r3, r5
 8006a16:	e7f2      	b.n	80069fe <__sccl+0x2e>
 8006a18:	7846      	ldrb	r6, [r0, #1]
 8006a1a:	2e5d      	cmp	r6, #93	@ 0x5d
 8006a1c:	d0fa      	beq.n	8006a14 <__sccl+0x44>
 8006a1e:	42b3      	cmp	r3, r6
 8006a20:	dcf8      	bgt.n	8006a14 <__sccl+0x44>
 8006a22:	3002      	adds	r0, #2
 8006a24:	461a      	mov	r2, r3
 8006a26:	3201      	adds	r2, #1
 8006a28:	4296      	cmp	r6, r2
 8006a2a:	54a1      	strb	r1, [r4, r2]
 8006a2c:	dcfb      	bgt.n	8006a26 <__sccl+0x56>
 8006a2e:	1af2      	subs	r2, r6, r3
 8006a30:	3a01      	subs	r2, #1
 8006a32:	1c5d      	adds	r5, r3, #1
 8006a34:	42b3      	cmp	r3, r6
 8006a36:	bfa8      	it	ge
 8006a38:	2200      	movge	r2, #0
 8006a3a:	18ab      	adds	r3, r5, r2
 8006a3c:	e7e1      	b.n	8006a02 <__sccl+0x32>
 8006a3e:	4610      	mov	r0, r2
 8006a40:	e7da      	b.n	80069f8 <__sccl+0x28>

08006a42 <__submore>:
 8006a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a46:	460c      	mov	r4, r1
 8006a48:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	d11d      	bne.n	8006a8e <__submore+0x4c>
 8006a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006a56:	f7fe fedf 	bl	8005818 <_malloc_r>
 8006a5a:	b918      	cbnz	r0, 8006a64 <__submore+0x22>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a68:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006a6a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006a6e:	6360      	str	r0, [r4, #52]	@ 0x34
 8006a70:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006a74:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006a78:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006a7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006a80:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006a84:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006a88:	6020      	str	r0, [r4, #0]
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e7e8      	b.n	8006a60 <__submore+0x1e>
 8006a8e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006a90:	0077      	lsls	r7, r6, #1
 8006a92:	463a      	mov	r2, r7
 8006a94:	f000 f86a 	bl	8006b6c <_realloc_r>
 8006a98:	4605      	mov	r5, r0
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0de      	beq.n	8006a5c <__submore+0x1a>
 8006a9e:	eb00 0806 	add.w	r8, r0, r6
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f000 f852 	bl	8006b50 <memcpy>
 8006aac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006ab0:	f8c4 8000 	str.w	r8, [r4]
 8006ab4:	e7e9      	b.n	8006a8a <__submore+0x48>

08006ab6 <memmove>:
 8006ab6:	4288      	cmp	r0, r1
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	eb01 0402 	add.w	r4, r1, r2
 8006abe:	d902      	bls.n	8006ac6 <memmove+0x10>
 8006ac0:	4284      	cmp	r4, r0
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	d807      	bhi.n	8006ad6 <memmove+0x20>
 8006ac6:	1e43      	subs	r3, r0, #1
 8006ac8:	42a1      	cmp	r1, r4
 8006aca:	d008      	beq.n	8006ade <memmove+0x28>
 8006acc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ad0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ad4:	e7f8      	b.n	8006ac8 <memmove+0x12>
 8006ad6:	4402      	add	r2, r0
 8006ad8:	4601      	mov	r1, r0
 8006ada:	428a      	cmp	r2, r1
 8006adc:	d100      	bne.n	8006ae0 <memmove+0x2a>
 8006ade:	bd10      	pop	{r4, pc}
 8006ae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ae4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ae8:	e7f7      	b.n	8006ada <memmove+0x24>
	...

08006aec <_fstat_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d07      	ldr	r5, [pc, #28]	@ (8006b0c <_fstat_r+0x20>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f7fa fd6a 	bl	80015d2 <_fstat>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d102      	bne.n	8006b08 <_fstat_r+0x1c>
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	b103      	cbz	r3, 8006b08 <_fstat_r+0x1c>
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000410 	.word	0x20000410

08006b10 <_isatty_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d06      	ldr	r5, [pc, #24]	@ (8006b2c <_isatty_r+0x1c>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	f7fa fd69 	bl	80015f2 <_isatty>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_isatty_r+0x1a>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_isatty_r+0x1a>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	20000410 	.word	0x20000410

08006b30 <_sbrk_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4d06      	ldr	r5, [pc, #24]	@ (8006b4c <_sbrk_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4604      	mov	r4, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	f7fa fd72 	bl	8001624 <_sbrk>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_sbrk_r+0x1a>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_sbrk_r+0x1a>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000410 	.word	0x20000410

08006b50 <memcpy>:
 8006b50:	440a      	add	r2, r1
 8006b52:	4291      	cmp	r1, r2
 8006b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b58:	d100      	bne.n	8006b5c <memcpy+0xc>
 8006b5a:	4770      	bx	lr
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b66:	4291      	cmp	r1, r2
 8006b68:	d1f9      	bne.n	8006b5e <memcpy+0xe>
 8006b6a:	bd10      	pop	{r4, pc}

08006b6c <_realloc_r>:
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	4680      	mov	r8, r0
 8006b72:	4615      	mov	r5, r2
 8006b74:	460c      	mov	r4, r1
 8006b76:	b921      	cbnz	r1, 8006b82 <_realloc_r+0x16>
 8006b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	f7fe be4b 	b.w	8005818 <_malloc_r>
 8006b82:	b92a      	cbnz	r2, 8006b90 <_realloc_r+0x24>
 8006b84:	f7fe fddc 	bl	8005740 <_free_r>
 8006b88:	2400      	movs	r4, #0
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	f000 f906 	bl	8006da0 <_malloc_usable_size_r>
 8006b94:	4285      	cmp	r5, r0
 8006b96:	4606      	mov	r6, r0
 8006b98:	d802      	bhi.n	8006ba0 <_realloc_r+0x34>
 8006b9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b9e:	d8f4      	bhi.n	8006b8a <_realloc_r+0x1e>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	f7fe fe38 	bl	8005818 <_malloc_r>
 8006ba8:	4607      	mov	r7, r0
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0ec      	beq.n	8006b88 <_realloc_r+0x1c>
 8006bae:	42b5      	cmp	r5, r6
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	bf28      	it	cs
 8006bb6:	4632      	movcs	r2, r6
 8006bb8:	f7ff ffca 	bl	8006b50 <memcpy>
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	f7fe fdbe 	bl	8005740 <_free_r>
 8006bc4:	463c      	mov	r4, r7
 8006bc6:	e7e0      	b.n	8006b8a <_realloc_r+0x1e>

08006bc8 <_strtol_l.constprop.0>:
 8006bc8:	2b24      	cmp	r3, #36	@ 0x24
 8006bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bce:	4686      	mov	lr, r0
 8006bd0:	4690      	mov	r8, r2
 8006bd2:	d801      	bhi.n	8006bd8 <_strtol_l.constprop.0+0x10>
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d106      	bne.n	8006be6 <_strtol_l.constprop.0+0x1e>
 8006bd8:	f7fe fd84 	bl	80056e4 <__errno>
 8006bdc:	2316      	movs	r3, #22
 8006bde:	6003      	str	r3, [r0, #0]
 8006be0:	2000      	movs	r0, #0
 8006be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be6:	4834      	ldr	r0, [pc, #208]	@ (8006cb8 <_strtol_l.constprop.0+0xf0>)
 8006be8:	460d      	mov	r5, r1
 8006bea:	462a      	mov	r2, r5
 8006bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf0:	5d06      	ldrb	r6, [r0, r4]
 8006bf2:	f016 0608 	ands.w	r6, r6, #8
 8006bf6:	d1f8      	bne.n	8006bea <_strtol_l.constprop.0+0x22>
 8006bf8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006bfa:	d12d      	bne.n	8006c58 <_strtol_l.constprop.0+0x90>
 8006bfc:	782c      	ldrb	r4, [r5, #0]
 8006bfe:	2601      	movs	r6, #1
 8006c00:	1c95      	adds	r5, r2, #2
 8006c02:	f033 0210 	bics.w	r2, r3, #16
 8006c06:	d109      	bne.n	8006c1c <_strtol_l.constprop.0+0x54>
 8006c08:	2c30      	cmp	r4, #48	@ 0x30
 8006c0a:	d12a      	bne.n	8006c62 <_strtol_l.constprop.0+0x9a>
 8006c0c:	782a      	ldrb	r2, [r5, #0]
 8006c0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006c12:	2a58      	cmp	r2, #88	@ 0x58
 8006c14:	d125      	bne.n	8006c62 <_strtol_l.constprop.0+0x9a>
 8006c16:	786c      	ldrb	r4, [r5, #1]
 8006c18:	2310      	movs	r3, #16
 8006c1a:	3502      	adds	r5, #2
 8006c1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006c20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006c24:	2200      	movs	r2, #0
 8006c26:	fbbc f9f3 	udiv	r9, ip, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006c30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006c34:	2f09      	cmp	r7, #9
 8006c36:	d81b      	bhi.n	8006c70 <_strtol_l.constprop.0+0xa8>
 8006c38:	463c      	mov	r4, r7
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	dd27      	ble.n	8006c8e <_strtol_l.constprop.0+0xc6>
 8006c3e:	1c57      	adds	r7, r2, #1
 8006c40:	d007      	beq.n	8006c52 <_strtol_l.constprop.0+0x8a>
 8006c42:	4581      	cmp	r9, r0
 8006c44:	d320      	bcc.n	8006c88 <_strtol_l.constprop.0+0xc0>
 8006c46:	d101      	bne.n	8006c4c <_strtol_l.constprop.0+0x84>
 8006c48:	45a2      	cmp	sl, r4
 8006c4a:	db1d      	blt.n	8006c88 <_strtol_l.constprop.0+0xc0>
 8006c4c:	fb00 4003 	mla	r0, r0, r3, r4
 8006c50:	2201      	movs	r2, #1
 8006c52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c56:	e7eb      	b.n	8006c30 <_strtol_l.constprop.0+0x68>
 8006c58:	2c2b      	cmp	r4, #43	@ 0x2b
 8006c5a:	bf04      	itt	eq
 8006c5c:	782c      	ldrbeq	r4, [r5, #0]
 8006c5e:	1c95      	addeq	r5, r2, #2
 8006c60:	e7cf      	b.n	8006c02 <_strtol_l.constprop.0+0x3a>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1da      	bne.n	8006c1c <_strtol_l.constprop.0+0x54>
 8006c66:	2c30      	cmp	r4, #48	@ 0x30
 8006c68:	bf0c      	ite	eq
 8006c6a:	2308      	moveq	r3, #8
 8006c6c:	230a      	movne	r3, #10
 8006c6e:	e7d5      	b.n	8006c1c <_strtol_l.constprop.0+0x54>
 8006c70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006c74:	2f19      	cmp	r7, #25
 8006c76:	d801      	bhi.n	8006c7c <_strtol_l.constprop.0+0xb4>
 8006c78:	3c37      	subs	r4, #55	@ 0x37
 8006c7a:	e7de      	b.n	8006c3a <_strtol_l.constprop.0+0x72>
 8006c7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006c80:	2f19      	cmp	r7, #25
 8006c82:	d804      	bhi.n	8006c8e <_strtol_l.constprop.0+0xc6>
 8006c84:	3c57      	subs	r4, #87	@ 0x57
 8006c86:	e7d8      	b.n	8006c3a <_strtol_l.constprop.0+0x72>
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	e7e1      	b.n	8006c52 <_strtol_l.constprop.0+0x8a>
 8006c8e:	1c53      	adds	r3, r2, #1
 8006c90:	d108      	bne.n	8006ca4 <_strtol_l.constprop.0+0xdc>
 8006c92:	2322      	movs	r3, #34	@ 0x22
 8006c94:	f8ce 3000 	str.w	r3, [lr]
 8006c98:	4660      	mov	r0, ip
 8006c9a:	f1b8 0f00 	cmp.w	r8, #0
 8006c9e:	d0a0      	beq.n	8006be2 <_strtol_l.constprop.0+0x1a>
 8006ca0:	1e69      	subs	r1, r5, #1
 8006ca2:	e006      	b.n	8006cb2 <_strtol_l.constprop.0+0xea>
 8006ca4:	b106      	cbz	r6, 8006ca8 <_strtol_l.constprop.0+0xe0>
 8006ca6:	4240      	negs	r0, r0
 8006ca8:	f1b8 0f00 	cmp.w	r8, #0
 8006cac:	d099      	beq.n	8006be2 <_strtol_l.constprop.0+0x1a>
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	d1f6      	bne.n	8006ca0 <_strtol_l.constprop.0+0xd8>
 8006cb2:	f8c8 1000 	str.w	r1, [r8]
 8006cb6:	e794      	b.n	8006be2 <_strtol_l.constprop.0+0x1a>
 8006cb8:	0800711b 	.word	0x0800711b

08006cbc <_strtol_r>:
 8006cbc:	f7ff bf84 	b.w	8006bc8 <_strtol_l.constprop.0>

08006cc0 <_strtoul_l.constprop.0>:
 8006cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	4e34      	ldr	r6, [pc, #208]	@ (8006d98 <_strtoul_l.constprop.0+0xd8>)
 8006cc6:	4686      	mov	lr, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cd0:	5d37      	ldrb	r7, [r6, r4]
 8006cd2:	f017 0708 	ands.w	r7, r7, #8
 8006cd6:	d1f8      	bne.n	8006cca <_strtoul_l.constprop.0+0xa>
 8006cd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006cda:	d12f      	bne.n	8006d3c <_strtoul_l.constprop.0+0x7c>
 8006cdc:	782c      	ldrb	r4, [r5, #0]
 8006cde:	2701      	movs	r7, #1
 8006ce0:	1c85      	adds	r5, r0, #2
 8006ce2:	f033 0010 	bics.w	r0, r3, #16
 8006ce6:	d109      	bne.n	8006cfc <_strtoul_l.constprop.0+0x3c>
 8006ce8:	2c30      	cmp	r4, #48	@ 0x30
 8006cea:	d12c      	bne.n	8006d46 <_strtoul_l.constprop.0+0x86>
 8006cec:	7828      	ldrb	r0, [r5, #0]
 8006cee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006cf2:	2858      	cmp	r0, #88	@ 0x58
 8006cf4:	d127      	bne.n	8006d46 <_strtoul_l.constprop.0+0x86>
 8006cf6:	786c      	ldrb	r4, [r5, #1]
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	3502      	adds	r5, #2
 8006cfc:	f04f 38ff 	mov.w	r8, #4294967295
 8006d00:	2600      	movs	r6, #0
 8006d02:	fbb8 f8f3 	udiv	r8, r8, r3
 8006d06:	fb03 f908 	mul.w	r9, r3, r8
 8006d0a:	ea6f 0909 	mvn.w	r9, r9
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006d14:	f1bc 0f09 	cmp.w	ip, #9
 8006d18:	d81c      	bhi.n	8006d54 <_strtoul_l.constprop.0+0x94>
 8006d1a:	4664      	mov	r4, ip
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	dd2a      	ble.n	8006d76 <_strtoul_l.constprop.0+0xb6>
 8006d20:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006d24:	d007      	beq.n	8006d36 <_strtoul_l.constprop.0+0x76>
 8006d26:	4580      	cmp	r8, r0
 8006d28:	d322      	bcc.n	8006d70 <_strtoul_l.constprop.0+0xb0>
 8006d2a:	d101      	bne.n	8006d30 <_strtoul_l.constprop.0+0x70>
 8006d2c:	45a1      	cmp	r9, r4
 8006d2e:	db1f      	blt.n	8006d70 <_strtoul_l.constprop.0+0xb0>
 8006d30:	fb00 4003 	mla	r0, r0, r3, r4
 8006d34:	2601      	movs	r6, #1
 8006d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d3a:	e7e9      	b.n	8006d10 <_strtoul_l.constprop.0+0x50>
 8006d3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006d3e:	bf04      	itt	eq
 8006d40:	782c      	ldrbeq	r4, [r5, #0]
 8006d42:	1c85      	addeq	r5, r0, #2
 8006d44:	e7cd      	b.n	8006ce2 <_strtoul_l.constprop.0+0x22>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1d8      	bne.n	8006cfc <_strtoul_l.constprop.0+0x3c>
 8006d4a:	2c30      	cmp	r4, #48	@ 0x30
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2308      	moveq	r3, #8
 8006d50:	230a      	movne	r3, #10
 8006d52:	e7d3      	b.n	8006cfc <_strtoul_l.constprop.0+0x3c>
 8006d54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006d58:	f1bc 0f19 	cmp.w	ip, #25
 8006d5c:	d801      	bhi.n	8006d62 <_strtoul_l.constprop.0+0xa2>
 8006d5e:	3c37      	subs	r4, #55	@ 0x37
 8006d60:	e7dc      	b.n	8006d1c <_strtoul_l.constprop.0+0x5c>
 8006d62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006d66:	f1bc 0f19 	cmp.w	ip, #25
 8006d6a:	d804      	bhi.n	8006d76 <_strtoul_l.constprop.0+0xb6>
 8006d6c:	3c57      	subs	r4, #87	@ 0x57
 8006d6e:	e7d5      	b.n	8006d1c <_strtoul_l.constprop.0+0x5c>
 8006d70:	f04f 36ff 	mov.w	r6, #4294967295
 8006d74:	e7df      	b.n	8006d36 <_strtoul_l.constprop.0+0x76>
 8006d76:	1c73      	adds	r3, r6, #1
 8006d78:	d106      	bne.n	8006d88 <_strtoul_l.constprop.0+0xc8>
 8006d7a:	2322      	movs	r3, #34	@ 0x22
 8006d7c:	f8ce 3000 	str.w	r3, [lr]
 8006d80:	4630      	mov	r0, r6
 8006d82:	b932      	cbnz	r2, 8006d92 <_strtoul_l.constprop.0+0xd2>
 8006d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d88:	b107      	cbz	r7, 8006d8c <_strtoul_l.constprop.0+0xcc>
 8006d8a:	4240      	negs	r0, r0
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	d0f9      	beq.n	8006d84 <_strtoul_l.constprop.0+0xc4>
 8006d90:	b106      	cbz	r6, 8006d94 <_strtoul_l.constprop.0+0xd4>
 8006d92:	1e69      	subs	r1, r5, #1
 8006d94:	6011      	str	r1, [r2, #0]
 8006d96:	e7f5      	b.n	8006d84 <_strtoul_l.constprop.0+0xc4>
 8006d98:	0800711b 	.word	0x0800711b

08006d9c <_strtoul_r>:
 8006d9c:	f7ff bf90 	b.w	8006cc0 <_strtoul_l.constprop.0>

08006da0 <_malloc_usable_size_r>:
 8006da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da4:	1f18      	subs	r0, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bfbc      	itt	lt
 8006daa:	580b      	ldrlt	r3, [r1, r0]
 8006dac:	18c0      	addlt	r0, r0, r3
 8006dae:	4770      	bx	lr

08006db0 <_init>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr

08006dbc <_fini>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr
