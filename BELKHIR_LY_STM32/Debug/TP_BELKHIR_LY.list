
TP_BELKHIR_LY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e30  08005e30  000070b4  2**0
                  CONTENTS
  4 .ARM          00000008  08005e30  08005e30  00006e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e38  08005e38  000070b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e38  08005e38  00006e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e3c  08005e3c  00006e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08005e40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200000b4  08005ef4  000070b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08005ef4  00007444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed57  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292d  00000000  00000000  00015e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00018768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f5  00000000  00000000  00019460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003aa4  00000000  00000000  00019e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bcb  00000000  00000000  0001d8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6e8  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffbac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dbc  00000000  00000000  000ffbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001039ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a98 	.word	0x08005a98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08005a98 	.word	0x08005a98

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <uart_write>:
uint8_t start[] = "\r\n Communication entre STM32 et Raspberry PI\r\n " ;
static int uartRxReceived = 0;  // Flag pour indiquer la réception d'un caractère

// Fonction pour écrire une chaîne via UART
static int uart_write(char *s, uint16_t size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&UART_PI, (uint8_t *)s, size, HAL_MAX_DELAY);
 80005dc:	887a      	ldrh	r2, [r7, #2]
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <uart_write+0x24>)
 80005e6:	f003 fcc5 	bl	8003f74 <HAL_UART_Transmit>
    return size;
 80005ea:	887b      	ldrh	r3, [r7, #2]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002ac 	.word	0x200002ac

080005f8 <PI_Init>:

// Initialisation de la communication
void PI_Init(void)
 {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&UART_PI, (uint8_t *)uartRxBuffer, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	490e      	ldr	r1, [pc, #56]	@ (8000638 <PI_Init+0x40>)
 8000600:	480e      	ldr	r0, [pc, #56]	@ (800063c <PI_Init+0x44>)
 8000602:	f003 fd42 	bl	800408a <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&UART_PI, start, strlen((char *)start), HAL_MAX_DELAY);
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <PI_Init+0x48>)
 8000608:	f7ff fe0c 	bl	8000224 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	490a      	ldr	r1, [pc, #40]	@ (8000640 <PI_Init+0x48>)
 8000616:	4809      	ldr	r0, [pc, #36]	@ (800063c <PI_Init+0x44>)
 8000618:	f003 fcac 	bl	8003f74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&UART_PI, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800061c:	4809      	ldr	r0, [pc, #36]	@ (8000644 <PI_Init+0x4c>)
 800061e:	f7ff fe01 	bl	8000224 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	4906      	ldr	r1, [pc, #24]	@ (8000644 <PI_Init+0x4c>)
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <PI_Init+0x44>)
 800062e:	f003 fca1 	bl	8003f74 <HAL_UART_Transmit>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000134 	.word	0x20000134
 800063c:	200002ac 	.word	0x200002ac
 8000640:	2000000c 	.word	0x2000000c
 8000644:	20000000 	.word	0x20000000

08000648 <PI_GetCommand>:

// Fonction pour traiter les commandes reçues via UART
static void PI_GetCommand(char *buffer)
{
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b090      	sub	sp, #64	@ 0x40
 800064c:	af04      	add	r7, sp, #16
 800064e:	6078      	str	r0, [r7, #4]
    // Vérifiez la commande et construisez la réponse sans afficher la commande
    if (strcmp(buffer, "GET_T") == 0) {
 8000650:	49b3      	ldr	r1, [pc, #716]	@ (8000920 <PI_GetCommand+0x2d8>)
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff fddc 	bl	8000210 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d155      	bne.n	800070a <PI_GetCommand+0xc2>
       // int32_t tempNc = 51000 ; //BMP280_ReadTemperature() ;
        int32_t temp = 1250 ; //BMP280_ConvertTemperature(tempNc) ;
 800065e:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8000662:	60fb      	str	r3, [r7, #12]
        int size = snprintf(printfBuffer, BUFFER_SIZE, "T=+%ld%ld.%ld%ld_C\r\n",(temp/1000)%10,(temp/100)%10,(temp/10)%10,temp%10);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4aaf      	ldr	r2, [pc, #700]	@ (8000924 <PI_GetCommand+0x2dc>)
 8000668:	fb82 1203 	smull	r1, r2, r2, r3
 800066c:	1192      	asrs	r2, r2, #6
 800066e:	17db      	asrs	r3, r3, #31
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	4bad      	ldr	r3, [pc, #692]	@ (8000928 <PI_GetCommand+0x2e0>)
 8000674:	fb83 1302 	smull	r1, r3, r3, r2
 8000678:	1099      	asrs	r1, r3, #2
 800067a:	17d3      	asrs	r3, r2, #31
 800067c:	1acd      	subs	r5, r1, r3
 800067e:	462b      	mov	r3, r5
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	442b      	add	r3, r5
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	1ad5      	subs	r5, r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4aa8      	ldr	r2, [pc, #672]	@ (800092c <PI_GetCommand+0x2e4>)
 800068c:	fb82 1203 	smull	r1, r2, r2, r3
 8000690:	1152      	asrs	r2, r2, #5
 8000692:	17db      	asrs	r3, r3, #31
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	4ba4      	ldr	r3, [pc, #656]	@ (8000928 <PI_GetCommand+0x2e0>)
 8000698:	fb83 2301 	smull	r2, r3, r3, r1
 800069c:	109a      	asrs	r2, r3, #2
 800069e:	17cb      	asrs	r3, r1, #31
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1aca      	subs	r2, r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	499e      	ldr	r1, [pc, #632]	@ (8000928 <PI_GetCommand+0x2e0>)
 80006b0:	fb81 0103 	smull	r0, r1, r1, r3
 80006b4:	1089      	asrs	r1, r1, #2
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ac8      	subs	r0, r1, r3
 80006ba:	4b9b      	ldr	r3, [pc, #620]	@ (8000928 <PI_GetCommand+0x2e0>)
 80006bc:	fb83 1300 	smull	r1, r3, r3, r0
 80006c0:	1099      	asrs	r1, r3, #2
 80006c2:	17c3      	asrs	r3, r0, #31
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	1ac1      	subs	r1, r0, r3
 80006d0:	68fc      	ldr	r4, [r7, #12]
 80006d2:	4b95      	ldr	r3, [pc, #596]	@ (8000928 <PI_GetCommand+0x2e0>)
 80006d4:	fb83 0304 	smull	r0, r3, r3, r4
 80006d8:	1098      	asrs	r0, r3, #2
 80006da:	17e3      	asrs	r3, r4, #31
 80006dc:	1ac0      	subs	r0, r0, r3
 80006de:	4603      	mov	r3, r0
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4403      	add	r3, r0
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	1ae0      	subs	r0, r4, r3
 80006e8:	9002      	str	r0, [sp, #8]
 80006ea:	9101      	str	r1, [sp, #4]
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	462b      	mov	r3, r5
 80006f0:	4a8f      	ldr	r2, [pc, #572]	@ (8000930 <PI_GetCommand+0x2e8>)
 80006f2:	2164      	movs	r1, #100	@ 0x64
 80006f4:	488f      	ldr	r0, [pc, #572]	@ (8000934 <PI_GetCommand+0x2ec>)
 80006f6:	f004 f989 	bl	8004a0c <sniprintf>
 80006fa:	60b8      	str	r0, [r7, #8]
        uart_write(printfBuffer, size);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	488c      	ldr	r0, [pc, #560]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000704:	f7ff ff64 	bl	80005d0 <uart_write>
    }
    else {
        int size = snprintf(printfBuffer, BUFFER_SIZE, "\r\nCommande inconnue\r\n");
        uart_write(printfBuffer, size);
    }
}
 8000708:	e105      	b.n	8000916 <PI_GetCommand+0x2ce>
    } else if (strcmp(buffer, "GET_P") == 0) {
 800070a:	498b      	ldr	r1, [pc, #556]	@ (8000938 <PI_GetCommand+0x2f0>)
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fd7f 	bl	8000210 <strcmp>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d110      	bne.n	800073a <PI_GetCommand+0xf2>
        int32_t Pres = 58000 ; //BMP280_ConvertPressure(PresNc) ;
 8000718:	f24e 2390 	movw	r3, #58000	@ 0xe290
 800071c:	617b      	str	r3, [r7, #20]
        int size = snprintf(printfBuffer, BUFFER_SIZE, "P=%ldPa\r\n",Pres);
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4a86      	ldr	r2, [pc, #536]	@ (800093c <PI_GetCommand+0x2f4>)
 8000722:	2164      	movs	r1, #100	@ 0x64
 8000724:	4883      	ldr	r0, [pc, #524]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000726:	f004 f971 	bl	8004a0c <sniprintf>
 800072a:	6138      	str	r0, [r7, #16]
        uart_write(printfBuffer, size);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	b29b      	uxth	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	4880      	ldr	r0, [pc, #512]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000734:	f7ff ff4c 	bl	80005d0 <uart_write>
}
 8000738:	e0ed      	b.n	8000916 <PI_GetCommand+0x2ce>
    else if(strcmp(buffer, "SET_K=1234") == 0){
 800073a:	4981      	ldr	r1, [pc, #516]	@ (8000940 <PI_GetCommand+0x2f8>)
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fd67 	bl	8000210 <strcmp>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10c      	bne.n	8000762 <PI_GetCommand+0x11a>
        int size = snprintf(printfBuffer, BUFFER_SIZE, "SET_K=OK \r\n");
 8000748:	4a7e      	ldr	r2, [pc, #504]	@ (8000944 <PI_GetCommand+0x2fc>)
 800074a:	2164      	movs	r1, #100	@ 0x64
 800074c:	4879      	ldr	r0, [pc, #484]	@ (8000934 <PI_GetCommand+0x2ec>)
 800074e:	f004 f95d 	bl	8004a0c <sniprintf>
 8000752:	61b8      	str	r0, [r7, #24]
        uart_write(printfBuffer, size);
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	b29b      	uxth	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	4876      	ldr	r0, [pc, #472]	@ (8000934 <PI_GetCommand+0x2ec>)
 800075c:	f7ff ff38 	bl	80005d0 <uart_write>
}
 8000760:	e0d9      	b.n	8000916 <PI_GetCommand+0x2ce>
    else if(strcmp(buffer, "GET_K") == 0){
 8000762:	4979      	ldr	r1, [pc, #484]	@ (8000948 <PI_GetCommand+0x300>)
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd53 	bl	8000210 <strcmp>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d163      	bne.n	8000838 <PI_GetCommand+0x1f0>
        int16_t K= 1234 ; // getK() ;
 8000770:	f240 43d2 	movw	r3, #1234	@ 0x4d2
 8000774:	847b      	strh	r3, [r7, #34]	@ 0x22
        int size = snprintf(printfBuffer, BUFFER_SIZE, "K=%d%d.%d%d000\r\n",(K/1000)%10,(K/100)%10,(K/10)%10,K%10);
 8000776:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800077a:	4a6a      	ldr	r2, [pc, #424]	@ (8000924 <PI_GetCommand+0x2dc>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1192      	asrs	r2, r2, #6
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	b21a      	sxth	r2, r3
 8000788:	4b67      	ldr	r3, [pc, #412]	@ (8000928 <PI_GetCommand+0x2e0>)
 800078a:	fb83 1302 	smull	r1, r3, r3, r2
 800078e:	1099      	asrs	r1, r3, #2
 8000790:	17d3      	asrs	r3, r2, #31
 8000792:	1ac9      	subs	r1, r1, r3
 8000794:	460b      	mov	r3, r1
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	440b      	add	r3, r1
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b21b      	sxth	r3, r3
 80007a0:	461d      	mov	r5, r3
 80007a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80007a6:	4a61      	ldr	r2, [pc, #388]	@ (800092c <PI_GetCommand+0x2e4>)
 80007a8:	fb82 1203 	smull	r1, r2, r2, r3
 80007ac:	1152      	asrs	r2, r2, #5
 80007ae:	17db      	asrs	r3, r3, #31
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	4b5c      	ldr	r3, [pc, #368]	@ (8000928 <PI_GetCommand+0x2e0>)
 80007b6:	fb83 1302 	smull	r1, r3, r3, r2
 80007ba:	1099      	asrs	r1, r3, #2
 80007bc:	17d3      	asrs	r3, r2, #31
 80007be:	1ac9      	subs	r1, r1, r3
 80007c0:	460b      	mov	r3, r1
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80007d2:	4a55      	ldr	r2, [pc, #340]	@ (8000928 <PI_GetCommand+0x2e0>)
 80007d4:	fb82 1203 	smull	r1, r2, r2, r3
 80007d8:	1092      	asrs	r2, r2, #2
 80007da:	17db      	asrs	r3, r3, #31
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b21a      	sxth	r2, r3
 80007e0:	4b51      	ldr	r3, [pc, #324]	@ (8000928 <PI_GetCommand+0x2e0>)
 80007e2:	fb83 1302 	smull	r1, r3, r3, r2
 80007e6:	1099      	asrs	r1, r3, #2
 80007e8:	17d3      	asrs	r3, r2, #31
 80007ea:	1ac9      	subs	r1, r1, r3
 80007ec:	460b      	mov	r3, r1
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	440b      	add	r3, r1
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	461c      	mov	r4, r3
 80007fa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80007fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000928 <PI_GetCommand+0x2e0>)
 8000800:	fb83 1302 	smull	r1, r3, r3, r2
 8000804:	1099      	asrs	r1, r3, #2
 8000806:	17d3      	asrs	r3, r2, #31
 8000808:	1ac9      	subs	r1, r1, r3
 800080a:	460b      	mov	r3, r1
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b21b      	sxth	r3, r3
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	9401      	str	r4, [sp, #4]
 800081a:	9000      	str	r0, [sp, #0]
 800081c:	462b      	mov	r3, r5
 800081e:	4a4b      	ldr	r2, [pc, #300]	@ (800094c <PI_GetCommand+0x304>)
 8000820:	2164      	movs	r1, #100	@ 0x64
 8000822:	4844      	ldr	r0, [pc, #272]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000824:	f004 f8f2 	bl	8004a0c <sniprintf>
 8000828:	61f8      	str	r0, [r7, #28]
        uart_write(printfBuffer, size);
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	b29b      	uxth	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	4840      	ldr	r0, [pc, #256]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000832:	f7ff fecd 	bl	80005d0 <uart_write>
}
 8000836:	e06e      	b.n	8000916 <PI_GetCommand+0x2ce>
    else if(strcmp(buffer, "GET_A") == 0){
 8000838:	4945      	ldr	r1, [pc, #276]	@ (8000950 <PI_GetCommand+0x308>)
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fce8 	bl	8000210 <strcmp>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d15b      	bne.n	80008fe <PI_GetCommand+0x2b6>
        int16_t A= 90 ;//getAngle() ;
 8000846:	235a      	movs	r3, #90	@ 0x5a
 8000848:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int size = snprintf(printfBuffer, BUFFER_SIZE, "A=%d%d%d.0000\r\n",(A/100)%10,(A/10)%10,(A)%10,A%10);
 800084a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800084e:	4a37      	ldr	r2, [pc, #220]	@ (800092c <PI_GetCommand+0x2e4>)
 8000850:	fb82 1203 	smull	r1, r2, r2, r3
 8000854:	1152      	asrs	r2, r2, #5
 8000856:	17db      	asrs	r3, r3, #31
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	b21a      	sxth	r2, r3
 800085c:	4b32      	ldr	r3, [pc, #200]	@ (8000928 <PI_GetCommand+0x2e0>)
 800085e:	fb83 1302 	smull	r1, r3, r3, r2
 8000862:	1099      	asrs	r1, r3, #2
 8000864:	17d3      	asrs	r3, r2, #31
 8000866:	1ac9      	subs	r1, r1, r3
 8000868:	460b      	mov	r3, r1
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	b21b      	sxth	r3, r3
 8000874:	461d      	mov	r5, r3
 8000876:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800087a:	4a2b      	ldr	r2, [pc, #172]	@ (8000928 <PI_GetCommand+0x2e0>)
 800087c:	fb82 1203 	smull	r1, r2, r2, r3
 8000880:	1092      	asrs	r2, r2, #2
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	b21a      	sxth	r2, r3
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <PI_GetCommand+0x2e0>)
 800088a:	fb83 1302 	smull	r1, r3, r3, r2
 800088e:	1099      	asrs	r1, r3, #2
 8000890:	17d3      	asrs	r3, r2, #31
 8000892:	1ac9      	subs	r1, r1, r3
 8000894:	460b      	mov	r3, r1
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	440b      	add	r3, r1
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	b21b      	sxth	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80008a6:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <PI_GetCommand+0x2e0>)
 80008a8:	fb83 1302 	smull	r1, r3, r3, r2
 80008ac:	1099      	asrs	r1, r3, #2
 80008ae:	17d3      	asrs	r3, r2, #31
 80008b0:	1ac9      	subs	r1, r1, r3
 80008b2:	460b      	mov	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	b21b      	sxth	r3, r3
 80008be:	461c      	mov	r4, r3
 80008c0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80008c4:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <PI_GetCommand+0x2e0>)
 80008c6:	fb83 1302 	smull	r1, r3, r3, r2
 80008ca:	1099      	asrs	r1, r3, #2
 80008cc:	17d3      	asrs	r3, r2, #31
 80008ce:	1ac9      	subs	r1, r1, r3
 80008d0:	460b      	mov	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b21b      	sxth	r3, r3
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	9401      	str	r4, [sp, #4]
 80008e0:	9000      	str	r0, [sp, #0]
 80008e2:	462b      	mov	r3, r5
 80008e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000954 <PI_GetCommand+0x30c>)
 80008e6:	2164      	movs	r1, #100	@ 0x64
 80008e8:	4812      	ldr	r0, [pc, #72]	@ (8000934 <PI_GetCommand+0x2ec>)
 80008ea:	f004 f88f 	bl	8004a0c <sniprintf>
 80008ee:	6278      	str	r0, [r7, #36]	@ 0x24
        uart_write(printfBuffer, size);
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	480f      	ldr	r0, [pc, #60]	@ (8000934 <PI_GetCommand+0x2ec>)
 80008f8:	f7ff fe6a 	bl	80005d0 <uart_write>
}
 80008fc:	e00b      	b.n	8000916 <PI_GetCommand+0x2ce>
        int size = snprintf(printfBuffer, BUFFER_SIZE, "\r\nCommande inconnue\r\n");
 80008fe:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <PI_GetCommand+0x310>)
 8000900:	2164      	movs	r1, #100	@ 0x64
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000904:	f004 f882 	bl	8004a0c <sniprintf>
 8000908:	62f8      	str	r0, [r7, #44]	@ 0x2c
        uart_write(printfBuffer, size);
 800090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090c:	b29b      	uxth	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	4808      	ldr	r0, [pc, #32]	@ (8000934 <PI_GetCommand+0x2ec>)
 8000912:	f7ff fe5d 	bl	80005d0 <uart_write>
}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	@ 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bdb0      	pop	{r4, r5, r7, pc}
 800091e:	bf00      	nop
 8000920:	08005ab0 	.word	0x08005ab0
 8000924:	10624dd3 	.word	0x10624dd3
 8000928:	66666667 	.word	0x66666667
 800092c:	51eb851f 	.word	0x51eb851f
 8000930:	08005ab8 	.word	0x08005ab8
 8000934:	200000d0 	.word	0x200000d0
 8000938:	08005ad0 	.word	0x08005ad0
 800093c:	08005ad8 	.word	0x08005ad8
 8000940:	08005ae4 	.word	0x08005ae4
 8000944:	08005af0 	.word	0x08005af0
 8000948:	08005afc 	.word	0x08005afc
 800094c:	08005b04 	.word	0x08005b04
 8000950:	08005b18 	.word	0x08005b18
 8000954:	08005b20 	.word	0x08005b20
 8000958:	08005b30 	.word	0x08005b30

0800095c <PI_RUN>:

// Fonction principale pour gérer les commandes envoyées via UART
int PI_RUN(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
    static char cmd_buffer[BUFFER_SIZE];
    static int pos = 0;
    char c;

    // Si un caractère est reçu via UART (vérifié par l'interruption)
    if (uartRxReceived) {
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <PI_RUN+0xa0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d042      	beq.n	80009f0 <PI_RUN+0x94>
        c = uartRxBuffer[0];  // Lire le caractère reçu via UART
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <PI_RUN+0xa4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
        uartRxReceived = 0;    // Réinitialiser le flag
 8000970:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <PI_RUN+0xa0>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]

        // Traitement des caractères reçus
        switch (c) {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b0d      	cmp	r3, #13
 800097a:	d002      	beq.n	8000982 <PI_RUN+0x26>
 800097c:	2b7f      	cmp	r3, #127	@ 0x7f
 800097e:	d014      	beq.n	80009aa <PI_RUN+0x4e>
 8000980:	e021      	b.n	80009c6 <PI_RUN+0x6a>
            case '\r':   // Touche RETURN
                uart_write("\n", 2);   // Sauter une ligne après Entrée
 8000982:	2102      	movs	r1, #2
 8000984:	481f      	ldr	r0, [pc, #124]	@ (8000a04 <PI_RUN+0xa8>)
 8000986:	f7ff fe23 	bl	80005d0 <uart_write>
                cmd_buffer[pos] = '\0';   // Terminer la chaîne
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <PI_RUN+0xac>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <PI_RUN+0xb0>)
 8000990:	2100      	movs	r1, #0
 8000992:	54d1      	strb	r1, [r2, r3]
                PI_GetCommand(cmd_buffer);  // Exécuter la commande
 8000994:	481d      	ldr	r0, [pc, #116]	@ (8000a0c <PI_RUN+0xb0>)
 8000996:	f7ff fe57 	bl	8000648 <PI_GetCommand>
                pos = 0;      // Réinitialiser la position du buffer
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <PI_RUN+0xac>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
                uart_write("STM32@pig3>", 12);
 80009a0:	210c      	movs	r1, #12
 80009a2:	481b      	ldr	r0, [pc, #108]	@ (8000a10 <PI_RUN+0xb4>)
 80009a4:	f7ff fe14 	bl	80005d0 <uart_write>
                break;
 80009a8:	e022      	b.n	80009f0 <PI_RUN+0x94>

            case 127:    // Touche Backspace
                if (pos > 0) {
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <PI_RUN+0xac>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dd1b      	ble.n	80009ea <PI_RUN+0x8e>
                    pos--;     // Supprimer le dernier caractère
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <PI_RUN+0xac>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	4a13      	ldr	r2, [pc, #76]	@ (8000a08 <PI_RUN+0xac>)
 80009ba:	6013      	str	r3, [r2, #0]
                    uart_write("\b \b", 3); // Effacer le caractère sur le terminal
 80009bc:	2103      	movs	r1, #3
 80009be:	4815      	ldr	r0, [pc, #84]	@ (8000a14 <PI_RUN+0xb8>)
 80009c0:	f7ff fe06 	bl	80005d0 <uart_write>
                }
                break;
 80009c4:	e011      	b.n	80009ea <PI_RUN+0x8e>

            default:    // Autres caractères
                if (pos < BUFFER_SIZE - 1) {  // Vérifier si le buffer a de l'espace
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <PI_RUN+0xac>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b62      	cmp	r3, #98	@ 0x62
 80009cc:	dc0f      	bgt.n	80009ee <PI_RUN+0x92>
                    uart_write(&c, 1);        // Afficher le caractère
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	2101      	movs	r1, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fdfc 	bl	80005d0 <uart_write>
                    cmd_buffer[pos++] = c;    // Stocker le caractère
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <PI_RUN+0xac>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	490a      	ldr	r1, [pc, #40]	@ (8000a08 <PI_RUN+0xac>)
 80009e0:	600a      	str	r2, [r1, #0]
 80009e2:	79f9      	ldrb	r1, [r7, #7]
 80009e4:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <PI_RUN+0xb0>)
 80009e6:	54d1      	strb	r1, [r2, r3]
                }
                break;
 80009e8:	e001      	b.n	80009ee <PI_RUN+0x92>
                break;
 80009ea:	bf00      	nop
 80009ec:	e000      	b.n	80009f0 <PI_RUN+0x94>
                break;
 80009ee:	bf00      	nop
        }

    }

    return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000138 	.word	0x20000138
 8000a00:	20000134 	.word	0x20000134
 8000a04:	08005b48 	.word	0x08005b48
 8000a08:	2000013c 	.word	0x2000013c
 8000a0c:	20000140 	.word	0x20000140
 8000a10:	08005b4c 	.word	0x08005b4c
 8000a14:	08005b58 	.word	0x08005b58

08000a18 <BMP280_RegisterWrite>:
signed short dig_P8 = 0;
signed short dig_P9 = 0;

uint32_t t_fine;

static int BMP280_RegisterWrite(uint8_t reg, uint8_t data) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2] = {reg, data};
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	733b      	strb	r3, [r7, #12]
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	737b      	strb	r3, [r7, #13]
    if (HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY)) {
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <BMP280_RegisterWrite+0x44>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2302      	movs	r3, #2
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <BMP280_RegisterWrite+0x48>)
 8000a44:	f001 fd58 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <BMP280_RegisterWrite+0x3a>
        return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e000      	b.n	8000a54 <BMP280_RegisterWrite+0x3c>
    }
    return 1;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000003c 	.word	0x2000003c
 8000a60:	200001e8 	.word	0x200001e8

08000a64 <BMP280_RegisterRead>:

static int BMP280_RegisterRead(uint8_t reg, uint8_t *data, uint16_t length) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	80bb      	strh	r3, [r7, #4]
    if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDRESS, &reg, 1, HAL_MAX_DELAY)) {
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <BMP280_RegisterRead+0x5c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2301      	movs	r3, #1
 8000a84:	480f      	ldr	r0, [pc, #60]	@ (8000ac4 <BMP280_RegisterRead+0x60>)
 8000a86:	f001 fd37 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <BMP280_RegisterRead+0x30>
        return 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e010      	b.n	8000ab6 <BMP280_RegisterRead+0x52>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, length, HAL_MAX_DELAY)) {
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <BMP280_RegisterRead+0x5c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	9200      	str	r2, [sp, #0]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <BMP280_RegisterRead+0x60>)
 8000aa6:	f001 fe25 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <BMP280_RegisterRead+0x50>
        return 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e000      	b.n	8000ab6 <BMP280_RegisterRead+0x52>
    }
    return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000003c 	.word	0x2000003c
 8000ac4:	200001e8 	.word	0x200001e8

08000ac8 <BMP280_Init>:

void BMP280_Init(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af02      	add	r7, sp, #8
    uint8_t data[1];
    uint8_t ConfigValue = 0x57;
 8000ace:	2357      	movs	r3, #87	@ 0x57
 8000ad0:	71fb      	strb	r3, [r7, #7]
    if (1 == BMP280_RegisterWrite(BMP280_REG_CONFIG, ConfigValue)) {
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <BMP280_Init+0x58>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff9c 	bl	8000a18 <BMP280_RegisterWrite>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d103      	bne.n	8000aee <BMP280_Init+0x26>
        printf("Erreur pendant l'écriture de la configuration \r\n");
 8000ae6:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <BMP280_Init+0x5c>)
 8000ae8:	f003 ff88 	bl	80049fc <puts>
        return;
 8000aec:	e014      	b.n	8000b18 <BMP280_Init+0x50>
    }
    if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDRESS, data, sizeof(data), HAL_MAX_DELAY)) {
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <BMP280_Init+0x60>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	1d3a      	adds	r2, r7, #4
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <BMP280_Init+0x64>)
 8000b00:	f001 fdf8 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <BMP280_Init+0x4e>
        return;
    }
    printf("La valeur configurée est : 0x%X \r\n", data[0]);
 8000b0a:	793b      	ldrb	r3, [r7, #4]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <BMP280_Init+0x68>)
 8000b10:	f003 ff0c 	bl	800492c <iprintf>
 8000b14:	e000      	b.n	8000b18 <BMP280_Init+0x50>
        return;
 8000b16:	bf00      	nop
}
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000003d 	.word	0x2000003d
 8000b24:	08005b5c 	.word	0x08005b5c
 8000b28:	2000003c 	.word	0x2000003c
 8000b2c:	200001e8 	.word	0x200001e8
 8000b30:	08005b90 	.word	0x08005b90

08000b34 <BMP280_ReadCalibrationData>:
        return;
    }
    printf("La valeur id = 0x%X\r\n", idValue);
}

void BMP280_ReadCalibrationData() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
    uint8_t calibData[BMP280_CALIB_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_CALIB_DATA, calibData, BMP280_CALIB_DATA_LEN)) {
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c64 <BMP280_ReadCalibrationData+0x130>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	1d39      	adds	r1, r7, #4
 8000b40:	2218      	movs	r2, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff8e 	bl	8000a64 <BMP280_RegisterRead>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d103      	bne.n	8000b56 <BMP280_ReadCalibrationData+0x22>
        printf("La lecture de calibration a échoué \r\n");
 8000b4e:	4846      	ldr	r0, [pc, #280]	@ (8000c68 <BMP280_ReadCalibrationData+0x134>)
 8000b50:	f003 ff54 	bl	80049fc <puts>
 8000b54:	e082      	b.n	8000c5c <BMP280_ReadCalibrationData+0x128>
        return;
    }

    printf("Lecture des données de calibration OK \r\n");
 8000b56:	4845      	ldr	r0, [pc, #276]	@ (8000c6c <BMP280_ReadCalibrationData+0x138>)
 8000b58:	f003 ff50 	bl	80049fc <puts>
    for (int i = 0; i < BMP280_CALIB_DATA_LEN; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	e00d      	b.n	8000b7e <BMP280_ReadCalibrationData+0x4a>
        printf("Le contenu du registre 0x%X est  %d \r\n", 0x88 + i, calibData[i]);
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8000b68:	1d3a      	adds	r2, r7, #4
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	483f      	ldr	r0, [pc, #252]	@ (8000c70 <BMP280_ReadCalibrationData+0x13c>)
 8000b74:	f003 feda 	bl	800492c <iprintf>
    for (int i = 0; i < BMP280_CALIB_DATA_LEN; i++) {
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	2b17      	cmp	r3, #23
 8000b82:	ddee      	ble.n	8000b62 <BMP280_ReadCalibrationData+0x2e>
    }

    dig_T1 = (calibData[0] | (calibData[1] << 8));
 8000b84:	793b      	ldrb	r3, [r7, #4]
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	797b      	ldrb	r3, [r7, #5]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	4b38      	ldr	r3, [pc, #224]	@ (8000c74 <BMP280_ReadCalibrationData+0x140>)
 8000b94:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData[2] | (calibData[3] << 8));
 8000b96:	79bb      	ldrb	r3, [r7, #6]
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <BMP280_ReadCalibrationData+0x144>)
 8000ba6:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData[4] | (calibData[5] << 8));
 8000ba8:	7a3b      	ldrb	r3, [r7, #8]
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	7a7b      	ldrb	r3, [r7, #9]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <BMP280_ReadCalibrationData+0x148>)
 8000bb8:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData[6] | (calibData[7] << 8));
 8000bba:	7abb      	ldrb	r3, [r7, #10]
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <BMP280_ReadCalibrationData+0x14c>)
 8000bca:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData[8] | (calibData[9] << 8));
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	7b7b      	ldrb	r3, [r7, #13]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <BMP280_ReadCalibrationData+0x150>)
 8000bdc:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData[10] | (calibData[11] << 8));
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <BMP280_ReadCalibrationData+0x154>)
 8000bee:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData[12] | (calibData[13] << 8));
 8000bf0:	7c3b      	ldrb	r3, [r7, #16]
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	7c7b      	ldrb	r3, [r7, #17]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <BMP280_ReadCalibrationData+0x158>)
 8000c00:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData[14] | (calibData[15] << 8));
 8000c02:	7cbb      	ldrb	r3, [r7, #18]
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	7cfb      	ldrb	r3, [r7, #19]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <BMP280_ReadCalibrationData+0x15c>)
 8000c12:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData[16] | (calibData[17] << 8));
 8000c14:	7d3b      	ldrb	r3, [r7, #20]
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	7d7b      	ldrb	r3, [r7, #21]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <BMP280_ReadCalibrationData+0x160>)
 8000c24:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData[18] | (calibData[19] << 8));
 8000c26:	7dbb      	ldrb	r3, [r7, #22]
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <BMP280_ReadCalibrationData+0x164>)
 8000c36:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData[20] | (calibData[21] << 8));
 8000c38:	7e3b      	ldrb	r3, [r7, #24]
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	7e7b      	ldrb	r3, [r7, #25]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <BMP280_ReadCalibrationData+0x168>)
 8000c48:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData[22] | (calibData[23] << 8));
 8000c4a:	7ebb      	ldrb	r3, [r7, #26]
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	7efb      	ldrb	r3, [r7, #27]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <BMP280_ReadCalibrationData+0x16c>)
 8000c5a:	801a      	strh	r2, [r3, #0]
}
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000003e 	.word	0x2000003e
 8000c68:	08005c20 	.word	0x08005c20
 8000c6c:	08005c48 	.word	0x08005c48
 8000c70:	08005c74 	.word	0x08005c74
 8000c74:	200001a4 	.word	0x200001a4
 8000c78:	200001a6 	.word	0x200001a6
 8000c7c:	200001a8 	.word	0x200001a8
 8000c80:	200001aa 	.word	0x200001aa
 8000c84:	200001ac 	.word	0x200001ac
 8000c88:	200001ae 	.word	0x200001ae
 8000c8c:	200001b0 	.word	0x200001b0
 8000c90:	200001b2 	.word	0x200001b2
 8000c94:	200001b4 	.word	0x200001b4
 8000c98:	200001b6 	.word	0x200001b6
 8000c9c:	200001b8 	.word	0x200001b8
 8000ca0:	200001ba 	.word	0x200001ba

08000ca4 <BMP280_ReadTemperature>:

int32_t BMP280_ReadTemperature(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    uint8_t tempData[BMP280_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_TEMP, tempData, BMP280_DATA_LEN)) {
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <BMP280_ReadTemperature+0x38>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	1d39      	adds	r1, r7, #4
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fed6 	bl	8000a64 <BMP280_RegisterRead>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <BMP280_ReadTemperature+0x1e>
        return 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e008      	b.n	8000cd4 <BMP280_ReadTemperature+0x30>
    }
    return (int32_t)((tempData[0] << 12) | (tempData[1] << 4) | (tempData[2]>> 4));
 8000cc2:	793b      	ldrb	r3, [r7, #4]
 8000cc4:	031a      	lsls	r2, r3, #12
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	79ba      	ldrb	r2, [r7, #6]
 8000cce:	0912      	lsrs	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	4313      	orrs	r3, r2
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000003f 	.word	0x2000003f

08000ce0 <BMP280_ConvertTemperature>:

int32_t BMP280_ConvertTemperature(int32_t rawTemp) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;

    var1 = (((rawTemp >> 3) - ((int32_t)dig_T1 << 1)) * (int32_t)dig_T2) >> 11;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	10da      	asrs	r2, r3, #3
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <BMP280_ConvertTemperature+0x7c>)
 8000cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d60 <BMP280_ConvertTemperature+0x80>)
 8000cf8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	12db      	asrs	r3, r3, #11
 8000d02:	617b      	str	r3, [r7, #20]
    var2 = (((((rawTemp >> 4) - (int32_t)dig_T1) * ((rawTemp >> 4) - (int32_t)dig_T1)) >> 12) * (int32_t)dig_T3) >> 14;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	111b      	asrs	r3, r3, #4
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <BMP280_ConvertTemperature+0x7c>)
 8000d0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	1112      	asrs	r2, r2, #4
 8000d14:	4911      	ldr	r1, [pc, #68]	@ (8000d5c <BMP280_ConvertTemperature+0x7c>)
 8000d16:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000d1a:	1a52      	subs	r2, r2, r1
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	131b      	asrs	r3, r3, #12
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <BMP280_ConvertTemperature+0x84>)
 8000d24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d28:	fb02 f303 	mul.w	r3, r2, r3
 8000d2c:	139b      	asrs	r3, r3, #14
 8000d2e:	613b      	str	r3, [r7, #16]

    t_fine = var1 + var2;
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4413      	add	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <BMP280_ConvertTemperature+0x88>)
 8000d3a:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <BMP280_ConvertTemperature+0x88>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	3380      	adds	r3, #128	@ 0x80
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	60fb      	str	r3, [r7, #12]
    return T;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200001a4 	.word	0x200001a4
 8000d60:	200001a6 	.word	0x200001a6
 8000d64:	200001a8 	.word	0x200001a8
 8000d68:	200001bc 	.word	0x200001bc

08000d6c <BMP280_ReadPressure>:

int32_t BMP280_ReadPressure(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
    uint8_t pressureData[BMP280_DATA_LEN];
    if (1 == BMP280_RegisterRead(BMP280_REG_PRESSURE, pressureData, BMP280_DATA_LEN)) {
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <BMP280_ReadPressure+0x38>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	1d39      	adds	r1, r7, #4
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fe72 	bl	8000a64 <BMP280_RegisterRead>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <BMP280_ReadPressure+0x1e>
        return 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e008      	b.n	8000d9c <BMP280_ReadPressure+0x30>
    }
    return (int32_t)((pressureData[0] << 16) | (pressureData[1] << 4) |(pressureData[2] >> 4));
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	797b      	ldrb	r3, [r7, #5]
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	4313      	orrs	r3, r2
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	0912      	lsrs	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	4313      	orrs	r3, r2
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000040 	.word	0x20000040

08000da8 <BMP280_ConvertPressure>:

int32_t BMP280_ConvertPressure(int32_t rawPressure) {
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, P;

    var1 = (t_fine >> 1) - 64000;
 8000db0:	4b49      	ldr	r3, [pc, #292]	@ (8000ed8 <BMP280_ConvertPressure+0x130>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8000dba:	613b      	str	r3, [r7, #16]
    var2 = ((var1 >> 2) * (var1 >> 2) >> 11) * dig_P6;
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	109b      	asrs	r3, r3, #2
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	1092      	asrs	r2, r2, #2
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	12db      	asrs	r3, r3, #11
 8000dca:	4a44      	ldr	r2, [pc, #272]	@ (8000edc <BMP280_ConvertPressure+0x134>)
 8000dcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
 8000dd4:	60fb      	str	r3, [r7, #12]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8000dd6:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <BMP280_ConvertPressure+0x138>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	109a      	asrs	r2, r3, #2
 8000df0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee4 <BMP280_ConvertPressure+0x13c>)
 8000df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	4413      	add	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
    var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <BMP280_ConvertPressure+0x140>)
 8000dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e02:	4619      	mov	r1, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	109b      	asrs	r3, r3, #2
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	1092      	asrs	r2, r2, #2
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	135b      	asrs	r3, r3, #13
 8000e12:	fb01 f303 	mul.w	r3, r1, r3
 8000e16:	10da      	asrs	r2, r3, #3
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <BMP280_ConvertPressure+0x144>)
 8000e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	105b      	asrs	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	149b      	asrs	r3, r3, #18
 8000e2c:	613b      	str	r3, [r7, #16]
    var1 = ((32768 + var1) * dig_P1) >> 25;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000e34:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef0 <BMP280_ConvertPressure+0x148>)
 8000e36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	165b      	asrs	r3, r3, #25
 8000e40:	613b      	str	r3, [r7, #16]

    if (var1 == 0) {
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <BMP280_ConvertPressure+0xa4>
        return 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e03e      	b.n	8000eca <BMP280_ConvertPressure+0x122>
    }

    P = ((1048576 - rawPressure) - (var2 >> 12)) * 3125;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f5c3 1280 	rsb	r2, r3, #1048576	@ 0x100000
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	131b      	asrs	r3, r3, #12
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	f640 4235 	movw	r2, #3125	@ 0xc35
 8000e5c:	fb02 f303 	mul.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    if (P < 0x80000000) {
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db06      	blt.n	8000e76 <BMP280_ConvertPressure+0xce>
        P = (P << 1) / var1;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005a      	lsls	r2, r3, #1
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e005      	b.n	8000e82 <BMP280_ConvertPressure+0xda>
    } else {
        P = (P / var1) * 2;
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
    }

    var1 = (dig_P9 * ((P >> 3) * (P >> 3) >> 13)) >> 12;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <BMP280_ConvertPressure+0x14c>)
 8000e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	10db      	asrs	r3, r3, #3
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	10d2      	asrs	r2, r2, #3
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	135b      	asrs	r3, r3, #13
 8000e98:	fb01 f303 	mul.w	r3, r1, r3
 8000e9c:	131b      	asrs	r3, r3, #12
 8000e9e:	613b      	str	r3, [r7, #16]
    var2 = ((P >> 2) * dig_P8) >> 13;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	109b      	asrs	r3, r3, #2
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <BMP280_ConvertPressure+0x150>)
 8000ea6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	135b      	asrs	r3, r3, #13
 8000eb0:	60fb      	str	r3, [r7, #12]
    P = (int32_t)(P + ((var1 + var2 + dig_P7) >> 4));
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <BMP280_ConvertPressure+0x154>)
 8000eba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	111b      	asrs	r3, r3, #4
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
    return P;
 8000ec8:	697b      	ldr	r3, [r7, #20]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001bc 	.word	0x200001bc
 8000edc:	200001b4 	.word	0x200001b4
 8000ee0:	200001b2 	.word	0x200001b2
 8000ee4:	200001b0 	.word	0x200001b0
 8000ee8:	200001ae 	.word	0x200001ae
 8000eec:	200001ac 	.word	0x200001ac
 8000ef0:	200001aa 	.word	0x200001aa
 8000ef4:	200001ba 	.word	0x200001ba
 8000ef8:	200001b8 	.word	0x200001b8
 8000efc:	200001b6 	.word	0x200001b6

08000f00 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <MX_CAN1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f1e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <MX_CAN1_Init+0x64>)
 8000f52:	f000 fd03 	bl	800195c <HAL_CAN_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f000 fa5a 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001c0 	.word	0x200001c0
 8000f68:	40006400 	.word	0x40006400

08000f6c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_CAN_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12c      	bne.n	8000fe8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_CAN_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_CAN_MspInit+0x88>)
 8000f98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_CAN_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_CAN_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <HAL_CAN_MspInit+0x88>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_CAN_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_CAN_MspInit+0x8c>)
 8000fe4:	f000 ffb0 	bl	8001f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	@ 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40006400 	.word	0x40006400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400

08000ffc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a1d      	ldr	r2, [pc, #116]	@ (8001080 <MX_GPIO_Init+0x84>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a0f      	ldr	r2, [pc, #60]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <MX_GPIO_Init+0x84>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_GPIO_Init+0x84>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_GPIO_Init+0x84>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f001 f8d5 	bl	8002270 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f9a2 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001e8 	.word	0x200001e8
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <HAL_I2C_MspInit+0x84>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12b      	bne.n	800115a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_I2C_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <HAL_I2C_MspInit+0x88>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_I2C_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111e:	23c0      	movs	r3, #192	@ 0xc0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <HAL_I2C_MspInit+0x8c>)
 800113a:	f000 ff05 	bl	8001f48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_I2C_MspInit+0x88>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_I2C_MspInit+0x88>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_I2C_MspInit+0x88>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40005400 	.word	0x40005400
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400

08001170 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(&huart3, (uint8_t*)&chr,1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);
 8001178:	1d39      	adds	r1, r7, #4
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	2201      	movs	r2, #1
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <__io_putchar+0x20>)
 8001182:	f002 fef7 	bl	8003f74 <HAL_UART_Transmit>
	return chr;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000264 	.word	0x20000264

08001194 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001198:	f000 fb4a 	bl	8001830 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800119c:	f000 f840 	bl	8001220 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011a0:	f7ff ff2c 	bl	8000ffc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011a4:	f000 fa48 	bl	8001638 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80011a8:	f7ff ff6c 	bl	8001084 <MX_I2C1_Init>
	MX_CAN1_Init();
 80011ac:	f7ff fea8 	bl	8000f00 <MX_CAN1_Init>
	MX_USART3_UART_Init();
 80011b0:	f000 fa6c 	bl	800168c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("=============TP BUS & RESEAUX ===========\r\n") ;
 80011b4:	4815      	ldr	r0, [pc, #84]	@ (800120c <main+0x78>)
 80011b6:	f003 fc21 	bl	80049fc <puts>
	BMP280_Init() ;
 80011ba:	f7ff fc85 	bl	8000ac8 <BMP280_Init>
	//BMP280_ReadID() ;
	BMP280_Init();
 80011be:	f7ff fc83 	bl	8000ac8 <BMP280_Init>
	BMP280_ReadCalibrationData();  // Lecture des paramètres de calibration
 80011c2:	f7ff fcb7 	bl	8000b34 <BMP280_ReadCalibrationData>
	PI_Init();
 80011c6:	f7ff fa17 	bl	80005f8 <PI_Init>
	PI_RUN();
 80011ca:	f7ff fbc7 	bl	800095c <PI_RUN>

	pHeader.IDE = CAN_ID_STD;
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <main+0x7c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <main+0x7c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
	HAL_CAN_Start(&hcan1);
 80011da:	480e      	ldr	r0, [pc, #56]	@ (8001214 <main+0x80>)
 80011dc:	f000 fcb9 	bl	8001b52 <HAL_CAN_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Mesurer et afficher les valeurs de température et de pression
		 Measure_Display_Temp_Pressure();
 80011e0:	f000 f890 	bl	8001304 <Measure_Display_Temp_Pressure>
		 CAN_SendMessage(AngleID, Angle90p, 2) ;
 80011e4:	2202      	movs	r2, #2
 80011e6:	490c      	ldr	r1, [pc, #48]	@ (8001218 <main+0x84>)
 80011e8:	2061      	movs	r0, #97	@ 0x61
 80011ea:	f000 f8dd 	bl	80013a8 <CAN_SendMessage>
		 HAL_Delay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f2:	f000 fb8f 	bl	8001914 <HAL_Delay>
		 CAN_SendMessage(AngleID, Angle90m, 2) ;
 80011f6:	2202      	movs	r2, #2
 80011f8:	4908      	ldr	r1, [pc, #32]	@ (800121c <main+0x88>)
 80011fa:	2061      	movs	r0, #97	@ 0x61
 80011fc:	f000 f8d4 	bl	80013a8 <CAN_SendMessage>
		 HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001204:	f000 fb86 	bl	8001914 <HAL_Delay>
		 Measure_Display_Temp_Pressure();
 8001208:	bf00      	nop
 800120a:	e7e9      	b.n	80011e0 <main+0x4c>
 800120c:	08005c9c 	.word	0x08005c9c
 8001210:	20000244 	.word	0x20000244
 8001214:	200001c0 	.word	0x200001c0
 8001218:	20000044 	.word	0x20000044
 800121c:	20000048 	.word	0x20000048

08001220 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	@ 0x50
 8001224:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2234      	movs	r2, #52	@ 0x34
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fcf8 	bl	8004c24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <SystemClock_Config+0xdc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <SystemClock_Config+0xdc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	@ 0x40
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <SystemClock_Config+0xdc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <SystemClock_Config+0xe0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <SystemClock_Config+0xe0>)
 800126a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <SystemClock_Config+0xe0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001284:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001290:	2304      	movs	r3, #4
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001294:	23b4      	movs	r3, #180	@ 0xb4
 8001296:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fb75 	bl	8003998 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80012b4:	f000 f8ae 	bl	8001414 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b8:	f001 ffd4 	bl	8003264 <HAL_PWREx_EnableOverDrive>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80012c2:	f000 f8a7 	bl	8001414 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2302      	movs	r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2105      	movs	r1, #5
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f80d 	bl	8003304 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80012f0:	f000 f890 	bl	8001414 <Error_Handler>
	}
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	@ 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <Measure_Display_Temp_Pressure>:

/* USER CODE BEGIN 4 */
void Measure_Display_Temp_Pressure(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
    temperature = BMP280_ReadTemperature();
 8001308:	f7ff fccc 	bl	8000ca4 <BMP280_ReadTemperature>
 800130c:	4603      	mov	r3, r0
 800130e:	4a1f      	ldr	r2, [pc, #124]	@ (800138c <Measure_Display_Temp_Pressure+0x88>)
 8001310:	6013      	str	r3, [r2, #0]
    pressure = BMP280_ReadPressure();
 8001312:	f7ff fd2b 	bl	8000d6c <BMP280_ReadPressure>
 8001316:	4603      	mov	r3, r0
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <Measure_Display_Temp_Pressure+0x8c>)
 800131a:	6013      	str	r3, [r2, #0]

    if (temperature && pressure) {
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <Measure_Display_Temp_Pressure+0x88>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d02c      	beq.n	800137e <Measure_Display_Temp_Pressure+0x7a>
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <Measure_Display_Temp_Pressure+0x8c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d028      	beq.n	800137e <Measure_Display_Temp_Pressure+0x7a>
        printf("Température non compensée : %ld\r\n", temperature);
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <Measure_Display_Temp_Pressure+0x88>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	4818      	ldr	r0, [pc, #96]	@ (8001394 <Measure_Display_Temp_Pressure+0x90>)
 8001334:	f003 fafa 	bl	800492c <iprintf>
        printf("Pression non compensée : %ld\r\n", pressure);
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <Measure_Display_Temp_Pressure+0x8c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4816      	ldr	r0, [pc, #88]	@ (8001398 <Measure_Display_Temp_Pressure+0x94>)
 8001340:	f003 faf4 	bl	800492c <iprintf>

        temperature = BMP280_ConvertTemperature(temperature);
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <Measure_Display_Temp_Pressure+0x88>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fcc9 	bl	8000ce0 <BMP280_ConvertTemperature>
 800134e:	4603      	mov	r3, r0
 8001350:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <Measure_Display_Temp_Pressure+0x88>)
 8001352:	6013      	str	r3, [r2, #0]
        pressure = BMP280_ConvertPressure(pressure);
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <Measure_Display_Temp_Pressure+0x8c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd25 	bl	8000da8 <BMP280_ConvertPressure>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <Measure_Display_Temp_Pressure+0x8c>)
 8001362:	6013      	str	r3, [r2, #0]

        printf("Température compensée : %ld\r\n", temperature);
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <Measure_Display_Temp_Pressure+0x88>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	@ (800139c <Measure_Display_Temp_Pressure+0x98>)
 800136c:	f003 fade 	bl	800492c <iprintf>
        printf("Pression compensée : %ld\r\n", pressure);
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <Measure_Display_Temp_Pressure+0x8c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <Measure_Display_Temp_Pressure+0x9c>)
 8001378:	f003 fad8 	bl	800492c <iprintf>
 800137c:	e003      	b.n	8001386 <Measure_Display_Temp_Pressure+0x82>
    } else {
        printf("Erreur de lecture des données de température ou de pression\r\n");
 800137e:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <Measure_Display_Temp_Pressure+0xa0>)
 8001380:	f003 fb3c 	bl	80049fc <puts>
    }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000023c 	.word	0x2000023c
 8001390:	20000240 	.word	0x20000240
 8001394:	08005cc8 	.word	0x08005cc8
 8001398:	08005cec 	.word	0x08005cec
 800139c:	08005d0c 	.word	0x08005d0c
 80013a0:	08005d2c 	.word	0x08005d2c
 80013a4:	08005d48 	.word	0x08005d48

080013a8 <CAN_SendMessage>:

void CAN_SendMessage(uint16_t id, uint8_t *data, uint8_t length) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	80fb      	strh	r3, [r7, #6]
 80013b4:	4613      	mov	r3, r2
 80013b6:	717b      	strb	r3, [r7, #5]
    pHeader.StdId = id;
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <CAN_SendMessage+0x58>)
 80013bc:	6013      	str	r3, [r2, #0]
    pHeader.DLC = length;
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <CAN_SendMessage+0x58>)
 80013c2:	6113      	str	r3, [r2, #16]

    if (HAL_CAN_AddTxMessage(&hcan1, &pHeader, data, &pTxMailbox) != HAL_OK) {
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <CAN_SendMessage+0x5c>)
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	490d      	ldr	r1, [pc, #52]	@ (8001400 <CAN_SendMessage+0x58>)
 80013ca:	480f      	ldr	r0, [pc, #60]	@ (8001408 <CAN_SendMessage+0x60>)
 80013cc:	f000 fc05 	bl	8001bda <HAL_CAN_AddTxMessage>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <CAN_SendMessage+0x3a>
        printf("Erreur d'envoi CAN pour l'ID: 0x%X\r\n", id);
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <CAN_SendMessage+0x64>)
 80013dc:	f003 faa6 	bl	800492c <iprintf>
    } else {
        printf("Message CAN envoyé, ID: 0x%X, Data: 0x%X 0x%X\r\n", id, data[0], data[1]);
    }
}
 80013e0:	e009      	b.n	80013f6 <CAN_SendMessage+0x4e>
        printf("Message CAN envoyé, ID: 0x%X, Data: 0x%X 0x%X\r\n", id, data[0], data[1]);
 80013e2:	88f9      	ldrh	r1, [r7, #6]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4807      	ldr	r0, [pc, #28]	@ (8001410 <CAN_SendMessage+0x68>)
 80013f2:	f003 fa9b 	bl	800492c <iprintf>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000244 	.word	0x20000244
 8001404:	2000025c 	.word	0x2000025c
 8001408:	200001c0 	.word	0x200001c0
 800140c:	08005d88 	.word	0x08005d88
 8001410:	08005db0 	.word	0x08005db0

08001414 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145e:	2007      	movs	r0, #7
 8001460:	f000 fd3e 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <NMI_Handler+0x4>

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <UsageFault_Handler+0x4>

08001498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 fa05 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00a      	b.n	80014f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e0:	f3af 8000 	nop.w
 80014e4:	4601      	mov	r1, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	b2ca      	uxtb	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf0      	blt.n	80014e0 <_read+0x12>
  }

  return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e009      	b.n	800152e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fe24 	bl	8001170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf1      	blt.n	800151a <_write+0x12>
  }
  return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_close>:

int _close(int file)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001568:	605a      	str	r2, [r3, #4]
  return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_isatty>:

int _isatty(int file)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f003 fb72 	bl	8004cc0 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20020000 	.word	0x20020000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000260 	.word	0x20000260
 8001610:	20000448 	.word	0x20000448

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f002 fc30 	bl	8003ed4 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f7ff fecb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000264 	.word	0x20000264
 8001688:	40004400 	.word	0x40004400

0800168c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_USART3_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f002 fc06 	bl	8003ed4 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f7ff fea1 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002ac 	.word	0x200002ac
 80016dc:	40004800 	.word	0x40004800

080016e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a32      	ldr	r2, [pc, #200]	@ (80017c8 <HAL_UART_MspInit+0xe8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12c      	bne.n	800175c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4a30      	ldr	r2, [pc, #192]	@ (80017cc <HAL_UART_MspInit+0xec>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a29      	ldr	r2, [pc, #164]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800173a:	230c      	movs	r3, #12
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174a:	2307      	movs	r3, #7
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	481e      	ldr	r0, [pc, #120]	@ (80017d0 <HAL_UART_MspInit+0xf0>)
 8001756:	f000 fbf7 	bl	8001f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800175a:	e031      	b.n	80017c0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1c      	ldr	r2, [pc, #112]	@ (80017d4 <HAL_UART_MspInit+0xf4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12c      	bne.n	80017c0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_UART_MspInit+0xec>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a10      	ldr	r2, [pc, #64]	@ (80017cc <HAL_UART_MspInit+0xec>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_UART_MspInit+0xec>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800179e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b0:	2307      	movs	r3, #7
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <HAL_UART_MspInit+0xf8>)
 80017bc:	f000 fbc4 	bl	8001f48 <HAL_GPIO_Init>
}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	@ 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40004400 	.word	0x40004400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40004800 	.word	0x40004800
 80017d8:	40020800 	.word	0x40020800

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001814 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017e0:	f7ff ff18 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e6:	490d      	ldr	r1, [pc, #52]	@ (800181c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800180a:	f003 fa5f 	bl	8004ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7ff fcc1 	bl	8001194 <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001820:	08005e40 	.word	0x08005e40
  ldr r2, =_sbss
 8001824:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001828:	20000444 	.word	0x20000444

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fb41 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fddc 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fb4b 	bl	8001f2e <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 fb21 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	@ (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000004c 	.word	0x2000004c
 80018cc:	20000054 	.word	0x20000054
 80018d0:	20000050 	.word	0x20000050

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000054 	.word	0x20000054
 80018f8:	200002f4 	.word	0x200002f4

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200002f4 	.word	0x200002f4

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000054 	.word	0x20000054

0800195c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0ed      	b.n	8001b4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff faf6 	bl	8000f6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001990:	f7ff ffb4 	bl	80018fc <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001996:	e012      	b.n	80019be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001998:	f7ff ffb0 	bl	80018fc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d90b      	bls.n	80019be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2205      	movs	r2, #5
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0c5      	b.n	8001b4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0e5      	beq.n	8001998 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0202 	bic.w	r2, r2, #2
 80019da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019dc:	f7ff ff8e 	bl	80018fc <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019e2:	e012      	b.n	8001a0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e4:	f7ff ff8a 	bl	80018fc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d90b      	bls.n	8001a0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e09f      	b.n	8001b4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e5      	bne.n	80019e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e1b      	ldrb	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7e5b      	ldrb	r3, [r3, #25]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e9b      	ldrb	r3, [r3, #26]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0220 	bic.w	r2, r2, #32
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7edb      	ldrb	r3, [r3, #27]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0210 	bic.w	r2, r2, #16
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0210 	orr.w	r2, r2, #16
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7f1b      	ldrb	r3, [r3, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0208 	orr.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0208 	bic.w	r2, r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7f5b      	ldrb	r3, [r3, #29]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0204 	orr.w	r2, r2, #4
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0204 	bic.w	r2, r2, #4
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	ea42 0103 	orr.w	r1, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d12e      	bne.n	8001bc4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b7e:	f7ff febd 	bl	80018fc <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b84:	e012      	b.n	8001bac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b86:	f7ff feb9 	bl	80018fc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b0a      	cmp	r3, #10
 8001b92:	d90b      	bls.n	8001bac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e012      	b.n	8001bd2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1e5      	bne.n	8001b86 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e006      	b.n	8001bd2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b089      	sub	sp, #36	@ 0x24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d003      	beq.n	8001c06 <HAL_CAN_AddTxMessage+0x2c>
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f040 80ad 	bne.w	8001d60 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8095 	beq.w	8001d50 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	0e1b      	lsrs	r3, r3, #24
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c30:	2201      	movs	r2, #1
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	409a      	lsls	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	6809      	ldr	r1, [r1, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3318      	adds	r3, #24
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	440b      	add	r3, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e00f      	b.n	8001c7e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3318      	adds	r3, #24
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3304      	adds	r3, #4
 8001c90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	7d1b      	ldrb	r3, [r3, #20]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d111      	bne.n	8001cbe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	3304      	adds	r3, #4
 8001cbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	061a      	lsls	r2, r3, #24
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3305      	adds	r3, #5
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	3204      	adds	r2, #4
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	6811      	ldr	r1, [r2, #0]
 8001ce6:	ea43 0200 	orr.w	r2, r3, r0
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001cf4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	061a      	lsls	r2, r3, #24
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3302      	adds	r3, #2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	4313      	orrs	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	4610      	mov	r0, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	ea43 0200 	orr.w	r2, r3, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3318      	adds	r3, #24
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	6811      	ldr	r1, [r2, #0]
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3318      	adds	r3, #24
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e00e      	b.n	8001d6e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e006      	b.n	8001d6e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff47 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff5c 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffb0 	bl	8001e9c <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e165      	b.n	8002230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8154 	bne.w	800222a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80ae 	beq.w	800222a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002248 <HAL_GPIO_Init+0x300>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002248 <HAL_GPIO_Init+0x300>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020de:	4b5a      	ldr	r3, [pc, #360]	@ (8002248 <HAL_GPIO_Init+0x300>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a58      	ldr	r2, [pc, #352]	@ (800224c <HAL_GPIO_Init+0x304>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4f      	ldr	r2, [pc, #316]	@ (8002250 <HAL_GPIO_Init+0x308>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d025      	beq.n	8002162 <HAL_GPIO_Init+0x21a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4e      	ldr	r2, [pc, #312]	@ (8002254 <HAL_GPIO_Init+0x30c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x216>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4d      	ldr	r2, [pc, #308]	@ (8002258 <HAL_GPIO_Init+0x310>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x212>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <HAL_GPIO_Init+0x314>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x20e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4b      	ldr	r2, [pc, #300]	@ (8002260 <HAL_GPIO_Init+0x318>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x20a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4a      	ldr	r2, [pc, #296]	@ (8002264 <HAL_GPIO_Init+0x31c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x206>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <HAL_GPIO_Init+0x320>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x202>
 8002146:	2306      	movs	r3, #6
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 800214a:	2307      	movs	r3, #7
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x21c>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4935      	ldr	r1, [pc, #212]	@ (800224c <HAL_GPIO_Init+0x304>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002182:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_GPIO_Init+0x324>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a6:	4a31      	ldr	r2, [pc, #196]	@ (800226c <HAL_GPIO_Init+0x324>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ac:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x324>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d0:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_GPIO_Init+0x324>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021d6:	4b25      	ldr	r3, [pc, #148]	@ (800226c <HAL_GPIO_Init+0x324>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fa:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_GPIO_Init+0x324>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002200:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <HAL_GPIO_Init+0x324>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002224:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_GPIO_Init+0x324>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae96 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40013800 	.word	0x40013800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40020800 	.word	0x40020800
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40021400 	.word	0x40021400
 8002268:	40021800 	.word	0x40021800
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e12b      	b.n	80024da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe ff22 	bl	80010e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	@ 0x24
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d4:	f001 f908 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a81      	ldr	r2, [pc, #516]	@ (80024e4 <HAL_I2C_Init+0x274>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d807      	bhi.n	80022f4 <HAL_I2C_Init+0x84>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a80      	ldr	r2, [pc, #512]	@ (80024e8 <HAL_I2C_Init+0x278>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e006      	b.n	8002302 <HAL_I2C_Init+0x92>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a7d      	ldr	r2, [pc, #500]	@ (80024ec <HAL_I2C_Init+0x27c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bf94      	ite	ls
 80022fc:	2301      	movls	r3, #1
 80022fe:	2300      	movhi	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0e7      	b.n	80024da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a78      	ldr	r2, [pc, #480]	@ (80024f0 <HAL_I2C_Init+0x280>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9b      	lsrs	r3, r3, #18
 8002314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a6a      	ldr	r2, [pc, #424]	@ (80024e4 <HAL_I2C_Init+0x274>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d802      	bhi.n	8002344 <HAL_I2C_Init+0xd4>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3301      	adds	r3, #1
 8002342:	e009      	b.n	8002358 <HAL_I2C_Init+0xe8>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	4a69      	ldr	r2, [pc, #420]	@ (80024f4 <HAL_I2C_Init+0x284>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	3301      	adds	r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800236a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	495c      	ldr	r1, [pc, #368]	@ (80024e4 <HAL_I2C_Init+0x274>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d819      	bhi.n	80023ac <HAL_I2C_Init+0x13c>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e59      	subs	r1, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fbb1 f3f3 	udiv	r3, r1, r3
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800238c:	400b      	ands	r3, r1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_I2C_Init+0x138>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e59      	subs	r1, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	e051      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e04f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_I2C_Init+0x168>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e012      	b.n	80023fe <HAL_I2C_Init+0x18e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Init+0x196>
 8002402:	2301      	movs	r3, #1
 8002404:	e022      	b.n	800244c <HAL_I2C_Init+0x1dc>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_I2C_Init+0x1bc>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e58      	subs	r0, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002420:	3301      	adds	r3, #1
 8002422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242a:	e00f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6809      	ldr	r1, [r1, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800247a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6911      	ldr	r1, [r2, #16]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	430b      	orrs	r3, r1
 800248e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	000186a0 	.word	0x000186a0
 80024e8:	001e847f 	.word	0x001e847f
 80024ec:	003d08ff 	.word	0x003d08ff
 80024f0:	431bde83 	.word	0x431bde83
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
 8002508:	4613      	mov	r3, r2
 800250a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff f9f6 	bl	80018fc <HAL_GetTick>
 8002510:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 80e0 	bne.w	80026e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	4970      	ldr	r1, [pc, #448]	@ (80026ec <HAL_I2C_Master_Transmit+0x1f4>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fc64 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	e0d3      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_Master_Transmit+0x50>
 8002544:	2302      	movs	r3, #2
 8002546:	e0cc      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d007      	beq.n	800256e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2221      	movs	r2, #33	@ 0x21
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2210      	movs	r2, #16
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	893a      	ldrh	r2, [r7, #8]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a50      	ldr	r2, [pc, #320]	@ (80026f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 face 	bl	8002b58 <I2C_MasterRequestWrite>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e08d      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025dc:	e066      	b.n	80026ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	6a39      	ldr	r1, [r7, #32]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fd22 	bl	800302c <I2C_WaitOnTXEFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00d      	beq.n	800260a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d107      	bne.n	8002606 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002604:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d11b      	bne.n	8002680 <HAL_I2C_Master_Transmit+0x188>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d017      	beq.n	8002680 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	6a39      	ldr	r1, [r7, #32]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fd19 	bl	80030bc <I2C_WaitOnBTFFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	2b04      	cmp	r3, #4
 8002696:	d107      	bne.n	80026a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e01a      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d194      	bne.n	80025de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	00100002 	.word	0x00100002
 80026f0:	ffff0000 	.word	0xffff0000

080026f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	@ 0x30
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff f8f8 	bl	80018fc <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 8217 	bne.w	8002b4a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	497c      	ldr	r1, [pc, #496]	@ (8002918 <HAL_I2C_Master_Receive+0x224>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fb66 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e20a      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_I2C_Master_Receive+0x50>
 8002740:	2302      	movs	r3, #2
 8002742:	e203      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d007      	beq.n	800276a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2222      	movs	r2, #34	@ 0x22
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2210      	movs	r2, #16
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <HAL_I2C_Master_Receive+0x228>)
 80027aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa52 	bl	8002c5c <I2C_MasterRequestRead>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c4      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d113      	bne.n	80027f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e198      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d11b      	bne.n	8002832 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e178      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11b      	bne.n	8002872 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	e158      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002898:	e144      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	2b03      	cmp	r3, #3
 80028a0:	f200 80f1 	bhi.w	8002a86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d123      	bne.n	80028f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fc4b 	bl	800314c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e145      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f2:	e117      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d14e      	bne.n	800299a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	2200      	movs	r2, #0
 8002904:	4906      	ldr	r1, [pc, #24]	@ (8002920 <HAL_I2C_Master_Receive+0x22c>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fa76 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e11a      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
 8002916:	bf00      	nop
 8002918:	00100002 	.word	0x00100002
 800291c:	ffff0000 	.word	0xffff0000
 8002920:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002998:	e0c4      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	2200      	movs	r2, #0
 80029a2:	496c      	ldr	r1, [pc, #432]	@ (8002b54 <HAL_I2C_Master_Receive+0x460>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fa27 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0cb      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fc:	2200      	movs	r2, #0
 80029fe:	4955      	ldr	r1, [pc, #340]	@ (8002b54 <HAL_I2C_Master_Receive+0x460>)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f9f9 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e09d      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a84:	e04e      	b.n	8002b24 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fb5e 	bl	800314c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e058      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d124      	bne.n	8002b24 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f aeb6 	bne.w	800289a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	@ 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	00010004 	.word	0x00010004

08002b58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d006      	beq.n	8002b82 <I2C_MasterRequestWrite+0x2a>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d003      	beq.n	8002b82 <I2C_MasterRequestWrite+0x2a>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b80:	d108      	bne.n	8002b94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e00b      	b.n	8002bac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	2b12      	cmp	r3, #18
 8002b9a:	d107      	bne.n	8002bac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f91d 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00d      	beq.n	8002be0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd2:	d103      	bne.n	8002bdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e035      	b.n	8002c4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002be8:	d108      	bne.n	8002bfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bf8:	611a      	str	r2, [r3, #16]
 8002bfa:	e01b      	b.n	8002c34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bfc:	897b      	ldrh	r3, [r7, #10]
 8002bfe:	11db      	asrs	r3, r3, #7
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0306 	and.w	r3, r3, #6
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f063 030f 	orn	r3, r3, #15
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	490e      	ldr	r1, [pc, #56]	@ (8002c54 <I2C_MasterRequestWrite+0xfc>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f966 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e010      	b.n	8002c4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4907      	ldr	r1, [pc, #28]	@ (8002c58 <I2C_MasterRequestWrite+0x100>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f956 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	00010008 	.word	0x00010008
 8002c58:	00010002 	.word	0x00010002

08002c5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d006      	beq.n	8002c96 <I2C_MasterRequestRead+0x3a>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d003      	beq.n	8002c96 <I2C_MasterRequestRead+0x3a>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c94:	d108      	bne.n	8002ca8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e00b      	b.n	8002cc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	2b11      	cmp	r3, #17
 8002cae:	d107      	bne.n	8002cc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f893 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce6:	d103      	bne.n	8002cf0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e079      	b.n	8002de8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cfc:	d108      	bne.n	8002d10 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	e05f      	b.n	8002dd0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d10:	897b      	ldrh	r3, [r7, #10]
 8002d12:	11db      	asrs	r3, r3, #7
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0306 	and.w	r3, r3, #6
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f063 030f 	orn	r3, r3, #15
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4930      	ldr	r1, [pc, #192]	@ (8002df0 <I2C_MasterRequestRead+0x194>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8dc 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e054      	b.n	8002de8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4929      	ldr	r1, [pc, #164]	@ (8002df4 <I2C_MasterRequestRead+0x198>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8cc 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e044      	b.n	8002de8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d82:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f831 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002daa:	d103      	bne.n	8002db4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e017      	b.n	8002de8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	11db      	asrs	r3, r3, #7
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 0306 	and.w	r3, r3, #6
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f063 030e 	orn	r3, r3, #14
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <I2C_MasterRequestRead+0x198>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f888 	bl	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00010008 	.word	0x00010008
 8002df4:	00010002 	.word	0x00010002

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e048      	b.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d044      	beq.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fd73 	bl	80018fc <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d139      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	e00c      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d116      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e023      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	0c1b      	lsrs	r3, r3, #16
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10d      	bne.n	8002ec2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	e00c      	b.n	8002edc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d093      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efa:	e071      	b.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f0a:	d123      	bne.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e067      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d041      	beq.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7fe fcce 	bl	80018fc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d136      	bne.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10c      	bne.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e00b      	b.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e021      	b.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10c      	bne.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e00b      	b.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f af6d 	bne.w	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f8e3 	bl	8003206 <I2C_IsAcknowledgeFailed>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e034      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d028      	beq.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fc53 	bl	80018fc <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11d      	bne.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b80      	cmp	r3, #128	@ 0x80
 8003074:	d016      	beq.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d1c3      	bne.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f89b 	bl	8003206 <I2C_IsAcknowledgeFailed>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e034      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d028      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe fc0b 	bl	80018fc <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d016      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e007      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d1c3      	bne.n	80030ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003158:	e049      	b.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	d119      	bne.n	800319c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0210 	mvn.w	r2, #16
 8003170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e030      	b.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fe fbae 	bl	80018fc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11d      	bne.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d016      	beq.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f043 0220 	orr.w	r2, r3, #32
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d1ae      	bne.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321c:	d11b      	bne.n	8003256 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003226:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	@ 0x40
 800327e:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800328a:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003290:	f7fe fb34 	bl	80018fc <HAL_GetTick>
 8003294:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003296:	e009      	b.n	80032ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003298:	f7fe fb30 	bl	80018fc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032a6:	d901      	bls.n	80032ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e01f      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x98>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d1ee      	bne.n	8003298 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c0:	f7fe fb1c 	bl	80018fc <HAL_GetTick>
 80032c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032c6:	e009      	b.n	80032dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032c8:	f7fe fb18 	bl	80018fc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032d6:	d901      	bls.n	80032dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e007      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032dc:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x98>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032e8:	d1ee      	bne.n	80032c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	420e0040 	.word	0x420e0040
 80032fc:	40007000 	.word	0x40007000
 8003300:	420e0044 	.word	0x420e0044

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0cc      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b68      	ldr	r3, [pc, #416]	@ (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d90c      	bls.n	8003340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b65      	ldr	r3, [pc, #404]	@ (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b63      	ldr	r3, [pc, #396]	@ (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0b8      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003358:	4b59      	ldr	r3, [pc, #356]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a58      	ldr	r2, [pc, #352]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003370:	4b53      	ldr	r3, [pc, #332]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a52      	ldr	r2, [pc, #328]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800337a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b50      	ldr	r3, [pc, #320]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	494d      	ldr	r1, [pc, #308]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d044      	beq.n	8003424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b47      	ldr	r3, [pc, #284]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d119      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	4b3f      	ldr	r3, [pc, #252]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b3b      	ldr	r3, [pc, #236]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e067      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4b37      	ldr	r3, [pc, #220]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4934      	ldr	r1, [pc, #208]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f4:	f7fe fa82 	bl	80018fc <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fe fa7e 	bl	80018fc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04f      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b25      	ldr	r3, [pc, #148]	@ (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d20c      	bcs.n	800344c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e032      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4916      	ldr	r1, [pc, #88]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003476:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	490e      	ldr	r1, [pc, #56]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800348a:	f000 f855 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	490a      	ldr	r1, [pc, #40]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe f9e2 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023c00 	.word	0x40023c00
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08005de4 	.word	0x08005de4
 80034c8:	2000004c 	.word	0x2000004c
 80034cc:	20000050 	.word	0x20000050

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000004c 	.word	0x2000004c

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ec:	f7ff fff0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	@ (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	08005df4 	.word	0x08005df4

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003514:	f7ff ffdc 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0b5b      	lsrs	r3, r3, #13
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	@ (8003534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	08005df4 	.word	0x08005df4

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b0ae      	sub	sp, #184	@ 0xb8
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355e:	4bcb      	ldr	r3, [pc, #812]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b0c      	cmp	r3, #12
 8003568:	f200 8206 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x440>
 800356c:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <HAL_RCC_GetSysClockFreq+0x3c>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	080035a9 	.word	0x080035a9
 8003578:	08003979 	.word	0x08003979
 800357c:	08003979 	.word	0x08003979
 8003580:	08003979 	.word	0x08003979
 8003584:	080035b1 	.word	0x080035b1
 8003588:	08003979 	.word	0x08003979
 800358c:	08003979 	.word	0x08003979
 8003590:	08003979 	.word	0x08003979
 8003594:	080035b9 	.word	0x080035b9
 8003598:	08003979 	.word	0x08003979
 800359c:	08003979 	.word	0x08003979
 80035a0:	08003979 	.word	0x08003979
 80035a4:	080037a9 	.word	0x080037a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4bb9      	ldr	r3, [pc, #740]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x358>)
 80035aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ae:	e1e7      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b0:	4bb8      	ldr	r3, [pc, #736]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035b6:	e1e3      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4bb4      	ldr	r3, [pc, #720]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c4:	4bb1      	ldr	r3, [pc, #708]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d071      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d0:	4bae      	ldr	r3, [pc, #696]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035f6:	4622      	mov	r2, r4
 80035f8:	462b      	mov	r3, r5
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	0159      	lsls	r1, r3, #5
 8003604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003608:	0150      	lsls	r0, r2, #5
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4621      	mov	r1, r4
 8003610:	1a51      	subs	r1, r2, r1
 8003612:	6439      	str	r1, [r7, #64]	@ 0x40
 8003614:	4629      	mov	r1, r5
 8003616:	eb63 0301 	sbc.w	r3, r3, r1
 800361a:	647b      	str	r3, [r7, #68]	@ 0x44
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003628:	4649      	mov	r1, r9
 800362a:	018b      	lsls	r3, r1, #6
 800362c:	4641      	mov	r1, r8
 800362e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003632:	4641      	mov	r1, r8
 8003634:	018a      	lsls	r2, r1, #6
 8003636:	4641      	mov	r1, r8
 8003638:	1a51      	subs	r1, r2, r1
 800363a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800363c:	4649      	mov	r1, r9
 800363e:	eb63 0301 	sbc.w	r3, r3, r1
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003650:	4649      	mov	r1, r9
 8003652:	00cb      	lsls	r3, r1, #3
 8003654:	4641      	mov	r1, r8
 8003656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365a:	4641      	mov	r1, r8
 800365c:	00ca      	lsls	r2, r1, #3
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	4603      	mov	r3, r0
 8003664:	4622      	mov	r2, r4
 8003666:	189b      	adds	r3, r3, r2
 8003668:	633b      	str	r3, [r7, #48]	@ 0x30
 800366a:	462b      	mov	r3, r5
 800366c:	460a      	mov	r2, r1
 800366e:	eb42 0303 	adc.w	r3, r2, r3
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003680:	4629      	mov	r1, r5
 8003682:	024b      	lsls	r3, r1, #9
 8003684:	4621      	mov	r1, r4
 8003686:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800368a:	4621      	mov	r1, r4
 800368c:	024a      	lsls	r2, r1, #9
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800369c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80036a4:	f7fc fe1c 	bl	80002e0 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036b2:	e067      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4b75      	ldr	r3, [pc, #468]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80036c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036ce:	2300      	movs	r3, #0
 80036d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80036d6:	4622      	mov	r2, r4
 80036d8:	462b      	mov	r3, r5
 80036da:	f04f 0000 	mov.w	r0, #0
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	0159      	lsls	r1, r3, #5
 80036e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e8:	0150      	lsls	r0, r2, #5
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4621      	mov	r1, r4
 80036f0:	1a51      	subs	r1, r2, r1
 80036f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036f4:	4629      	mov	r1, r5
 80036f6:	eb63 0301 	sbc.w	r3, r3, r1
 80036fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003708:	4649      	mov	r1, r9
 800370a:	018b      	lsls	r3, r1, #6
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003712:	4641      	mov	r1, r8
 8003714:	018a      	lsls	r2, r1, #6
 8003716:	4641      	mov	r1, r8
 8003718:	ebb2 0a01 	subs.w	sl, r2, r1
 800371c:	4649      	mov	r1, r9
 800371e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800372e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003736:	4692      	mov	sl, r2
 8003738:	469b      	mov	fp, r3
 800373a:	4623      	mov	r3, r4
 800373c:	eb1a 0303 	adds.w	r3, sl, r3
 8003740:	623b      	str	r3, [r7, #32]
 8003742:	462b      	mov	r3, r5
 8003744:	eb4b 0303 	adc.w	r3, fp, r3
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003756:	4629      	mov	r1, r5
 8003758:	028b      	lsls	r3, r1, #10
 800375a:	4621      	mov	r1, r4
 800375c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003760:	4621      	mov	r1, r4
 8003762:	028a      	lsls	r2, r1, #10
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800376c:	2200      	movs	r2, #0
 800376e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003770:	677a      	str	r2, [r7, #116]	@ 0x74
 8003772:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003776:	f7fc fdb3 	bl	80002e0 <__aeabi_uldivmod>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4613      	mov	r3, r2
 8003780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003784:	4b41      	ldr	r3, [pc, #260]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	3301      	adds	r3, #1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800379a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037a6:	e0eb      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a8:	4b38      	ldr	r3, [pc, #224]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b4:	4b35      	ldr	r3, [pc, #212]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d06b      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c0:	4b32      	ldr	r3, [pc, #200]	@ (800388c <HAL_RCC_GetSysClockFreq+0x354>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	2200      	movs	r2, #0
 80037c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80037d4:	2300      	movs	r3, #0
 80037d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80037d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037dc:	4622      	mov	r2, r4
 80037de:	462b      	mov	r3, r5
 80037e0:	f04f 0000 	mov.w	r0, #0
 80037e4:	f04f 0100 	mov.w	r1, #0
 80037e8:	0159      	lsls	r1, r3, #5
 80037ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ee:	0150      	lsls	r0, r2, #5
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4621      	mov	r1, r4
 80037f6:	1a51      	subs	r1, r2, r1
 80037f8:	61b9      	str	r1, [r7, #24]
 80037fa:	4629      	mov	r1, r5
 80037fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800380e:	4659      	mov	r1, fp
 8003810:	018b      	lsls	r3, r1, #6
 8003812:	4651      	mov	r1, sl
 8003814:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003818:	4651      	mov	r1, sl
 800381a:	018a      	lsls	r2, r1, #6
 800381c:	4651      	mov	r1, sl
 800381e:	ebb2 0801 	subs.w	r8, r2, r1
 8003822:	4659      	mov	r1, fp
 8003824:	eb63 0901 	sbc.w	r9, r3, r1
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003834:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003838:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383c:	4690      	mov	r8, r2
 800383e:	4699      	mov	r9, r3
 8003840:	4623      	mov	r3, r4
 8003842:	eb18 0303 	adds.w	r3, r8, r3
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	462b      	mov	r3, r5
 800384a:	eb49 0303 	adc.w	r3, r9, r3
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800385c:	4629      	mov	r1, r5
 800385e:	024b      	lsls	r3, r1, #9
 8003860:	4621      	mov	r1, r4
 8003862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003866:	4621      	mov	r1, r4
 8003868:	024a      	lsls	r2, r1, #9
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003872:	2200      	movs	r2, #0
 8003874:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003876:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003878:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800387c:	f7fc fd30 	bl	80002e0 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800388a:	e065      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x420>
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003898:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x458>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	2200      	movs	r2, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	4611      	mov	r1, r2
 80038a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80038aa:	2300      	movs	r3, #0
 80038ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80038b2:	4642      	mov	r2, r8
 80038b4:	464b      	mov	r3, r9
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0159      	lsls	r1, r3, #5
 80038c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c4:	0150      	lsls	r0, r2, #5
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4641      	mov	r1, r8
 80038cc:	1a51      	subs	r1, r2, r1
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	4649      	mov	r1, r9
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038e4:	4659      	mov	r1, fp
 80038e6:	018b      	lsls	r3, r1, #6
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ee:	4651      	mov	r1, sl
 80038f0:	018a      	lsls	r2, r1, #6
 80038f2:	4651      	mov	r1, sl
 80038f4:	1a54      	subs	r4, r2, r1
 80038f6:	4659      	mov	r1, fp
 80038f8:	eb63 0501 	sbc.w	r5, r3, r1
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	464b      	mov	r3, r9
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003940:	2200      	movs	r2, #0
 8003942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003944:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800394a:	f7fc fcc9 	bl	80002e0 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4613      	mov	r3, r2
 8003954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003958:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x458>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0f1b      	lsrs	r3, r3, #28
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800396a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003976:	e003      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x45c>)
 800397a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800397e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003984:	4618      	mov	r0, r3
 8003986:	37b8      	adds	r7, #184	@ 0xb8
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400

08003998 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e28d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8083 	beq.w	8003abe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039b8:	4b94      	ldr	r3, [pc, #592]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d019      	beq.n	80039f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039c4:	4b91      	ldr	r3, [pc, #580]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039d0:	4b8e      	ldr	r3, [pc, #568]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b8b      	ldr	r3, [pc, #556]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b88      	ldr	r3, [pc, #544]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	4b84      	ldr	r3, [pc, #528]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05b      	beq.n	8003abc <HAL_RCC_OscConfig+0x124>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d157      	bne.n	8003abc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e25a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x90>
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7b      	ldr	r2, [pc, #492]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xcc>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0xb4>
 8003a32:	4b76      	ldr	r3, [pc, #472]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b73      	ldr	r3, [pc, #460]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a72      	ldr	r2, [pc, #456]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xcc>
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b6c      	ldr	r3, [pc, #432]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd ff46 	bl	80018fc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fd ff42 	bl	80018fc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	@ 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e21f      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b61      	ldr	r3, [pc, #388]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xdc>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fd ff32 	bl	80018fc <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fd ff2e 	bl	80018fc <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e20b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b57      	ldr	r3, [pc, #348]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x104>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d06f      	beq.n	8003baa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003aca:	4b50      	ldr	r3, [pc, #320]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d017      	beq.n	8003b06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b47      	ldr	r3, [pc, #284]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b41      	ldr	r3, [pc, #260]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x186>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1d3      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4937      	ldr	r1, [pc, #220]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	@ (8003c10 <HAL_RCC_OscConfig+0x278>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fedb 	bl	80018fc <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fd fed7 	bl	80018fc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1b4      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b28      	ldr	r3, [pc, #160]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4925      	ldr	r1, [pc, #148]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <HAL_RCC_OscConfig+0x278>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd feba 	bl	80018fc <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7fd feb6 	bl	80018fc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e193      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <HAL_RCC_OscConfig+0x27c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd fe9a 	bl	80018fc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fe96 	bl	80018fc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e173      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x234>
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fe83 	bl	80018fc <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fd fe7f 	bl	80018fc <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e15c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470000 	.word	0x42470000
 8003c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b8a      	ldr	r3, [pc, #552]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8097 	beq.w	8003d60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c36:	4b83      	ldr	r3, [pc, #524]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b7c      	ldr	r3, [pc, #496]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b79      	ldr	r3, [pc, #484]	@ (8003e48 <HAL_RCC_OscConfig+0x4b0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCC_OscConfig+0x4b0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a75      	ldr	r2, [pc, #468]	@ (8003e48 <HAL_RCC_OscConfig+0x4b0>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fe3f 	bl	80018fc <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fd fe3b 	bl	80018fc <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e118      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b6c      	ldr	r3, [pc, #432]	@ (8003e48 <HAL_RCC_OscConfig+0x4b0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x31e>
 8003ca8:	4b66      	ldr	r3, [pc, #408]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	4a65      	ldr	r2, [pc, #404]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x358>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x340>
 8003cbe:	4b61      	ldr	r3, [pc, #388]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	4a60      	ldr	r2, [pc, #384]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cca:	4b5e      	ldr	r3, [pc, #376]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a5d      	ldr	r2, [pc, #372]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x358>
 8003cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	4a59      	ldr	r2, [pc, #356]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce4:	4b57      	ldr	r3, [pc, #348]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	4a56      	ldr	r2, [pc, #344]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fe00 	bl	80018fc <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fdfc 	bl	80018fc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0d7      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b4b      	ldr	r3, [pc, #300]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x368>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fd fdea 	bl	80018fc <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd fde6 	bl	80018fc <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0c1      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	4b40      	ldr	r3, [pc, #256]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	4a3a      	ldr	r2, [pc, #232]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80ad 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6a:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d060      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d145      	bne.n	8003e0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b33      	ldr	r3, [pc, #204]	@ (8003e4c <HAL_RCC_OscConfig+0x4b4>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd fdba 	bl	80018fc <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fd fdb6 	bl	80018fc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e093      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b29      	ldr	r3, [pc, #164]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	071b      	lsls	r3, r3, #28
 8003dd6:	491b      	ldr	r1, [pc, #108]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x4b4>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fd fd8b 	bl	80018fc <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd fd87 	bl	80018fc <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e064      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x452>
 8003e08:	e05c      	b.n	8003ec4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <HAL_RCC_OscConfig+0x4b4>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd fd74 	bl	80018fc <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fd fd70 	bl	80018fc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e04d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x480>
 8003e36:	e045      	b.n	8003ec4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e040      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed0 <HAL_RCC_OscConfig+0x538>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d030      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d129      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d122      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d119      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e042      	b.n	8003f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fbf0 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	@ 0x24
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f9d1 	bl	80042c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	@ 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d175      	bne.n	8004080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_Transmit+0x2c>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e06e      	b.n	8004082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2221      	movs	r2, #33	@ 0x21
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb2:	f7fd fca3 	bl	80018fc <HAL_GetTick>
 8003fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fcc:	d108      	bne.n	8003fe0 <HAL_UART_Transmit+0x6c>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	e003      	b.n	8003fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fe8:	e02e      	b.n	8004048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2180      	movs	r1, #128	@ 0x80
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f86d 	bl	80040d4 <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03a      	b.n	8004082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3302      	adds	r3, #2
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	e007      	b.n	800403a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1cb      	bne.n	8003fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	2140      	movs	r1, #64	@ 0x40
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f839 	bl	80040d4 <UART_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	4613      	mov	r3, r2
 8004096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d112      	bne.n	80040ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_UART_Receive_IT+0x26>
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e00b      	b.n	80040cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	461a      	mov	r2, r3
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f860 	bl	8004186 <UART_Start_Receive_IT>
 80040c6:	4603      	mov	r3, r0
 80040c8:	e000      	b.n	80040cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e4:	e03b      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d037      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fd fc05 	bl	80018fc <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <UART_WaitOnFlagUntilTimeout+0x30>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e03a      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d023      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b80      	cmp	r3, #128	@ 0x80
 800411a:	d020      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x8a>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b40      	cmp	r3, #64	@ 0x40
 8004120:	d01d      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d116      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f857 	bl	80041fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2208      	movs	r2, #8
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00f      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d0b4      	beq.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2222      	movs	r2, #34	@ 0x22
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0220 	orr.w	r2, r2, #32
 80041ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b095      	sub	sp, #84	@ 0x54
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004222:	643a      	str	r2, [r7, #64]	@ 0x40
 8004224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	61fb      	str	r3, [r7, #28]
   return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	2b01      	cmp	r3, #1
 8004270:	d119      	bne.n	80042a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 0310 	bic.w	r3, r3, #16
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004292:	61ba      	str	r2, [r7, #24]
 8004294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042b4:	bf00      	nop
 80042b6:	3754      	adds	r7, #84	@ 0x54
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b0c0      	sub	sp, #256	@ 0x100
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	ea40 0301 	orr.w	r3, r0, r1
 80042e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	431a      	orrs	r2, r3
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004318:	f021 010c 	bic.w	r1, r1, #12
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004326:	430b      	orrs	r3, r1
 8004328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	6999      	ldr	r1, [r3, #24]
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	ea40 0301 	orr.w	r3, r0, r1
 8004346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8f      	ldr	r3, [pc, #572]	@ (800458c <UART_SetConfig+0x2cc>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <UART_SetConfig+0xa0>
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b8d      	ldr	r3, [pc, #564]	@ (8004590 <UART_SetConfig+0x2d0>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d104      	bne.n	800436a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7ff f8d6 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 8004364:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004368:	e003      	b.n	8004372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800436a:	f7ff f8bd 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 800436e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437c:	f040 810c 	bne.w	8004598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800438a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800438e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004392:	4622      	mov	r2, r4
 8004394:	462b      	mov	r3, r5
 8004396:	1891      	adds	r1, r2, r2
 8004398:	65b9      	str	r1, [r7, #88]	@ 0x58
 800439a:	415b      	adcs	r3, r3
 800439c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800439e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043a2:	4621      	mov	r1, r4
 80043a4:	eb12 0801 	adds.w	r8, r2, r1
 80043a8:	4629      	mov	r1, r5
 80043aa:	eb43 0901 	adc.w	r9, r3, r1
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c2:	4690      	mov	r8, r2
 80043c4:	4699      	mov	r9, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	eb18 0303 	adds.w	r3, r8, r3
 80043cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043d0:	462b      	mov	r3, r5
 80043d2:	eb49 0303 	adc.w	r3, r9, r3
 80043d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043ee:	460b      	mov	r3, r1
 80043f0:	18db      	adds	r3, r3, r3
 80043f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f4:	4613      	mov	r3, r2
 80043f6:	eb42 0303 	adc.w	r3, r2, r3
 80043fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80043fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004404:	f7fb ff6c 	bl	80002e0 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <UART_SetConfig+0x2d4>)
 800440e:	fba3 2302 	umull	r2, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	011c      	lsls	r4, r3, #4
 8004416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004420:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004430:	415b      	adcs	r3, r3
 8004432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004438:	4641      	mov	r1, r8
 800443a:	eb12 0a01 	adds.w	sl, r2, r1
 800443e:	4649      	mov	r1, r9
 8004440:	eb43 0b01 	adc.w	fp, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004458:	4692      	mov	sl, r2
 800445a:	469b      	mov	fp, r3
 800445c:	4643      	mov	r3, r8
 800445e:	eb1a 0303 	adds.w	r3, sl, r3
 8004462:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004466:	464b      	mov	r3, r9
 8004468:	eb4b 0303 	adc.w	r3, fp, r3
 800446c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800447c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004484:	460b      	mov	r3, r1
 8004486:	18db      	adds	r3, r3, r3
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
 800448a:	4613      	mov	r3, r2
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	647b      	str	r3, [r7, #68]	@ 0x44
 8004492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800449a:	f7fb ff21 	bl	80002e0 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004594 <UART_SetConfig+0x2d4>)
 80044a6:	fba3 2301 	umull	r2, r3, r3, r1
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2264      	movs	r2, #100	@ 0x64
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	1acb      	subs	r3, r1, r3
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044ba:	4b36      	ldr	r3, [pc, #216]	@ (8004594 <UART_SetConfig+0x2d4>)
 80044bc:	fba3 2302 	umull	r2, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044c8:	441c      	add	r4, r3
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044dc:	4642      	mov	r2, r8
 80044de:	464b      	mov	r3, r9
 80044e0:	1891      	adds	r1, r2, r2
 80044e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044e4:	415b      	adcs	r3, r3
 80044e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044ec:	4641      	mov	r1, r8
 80044ee:	1851      	adds	r1, r2, r1
 80044f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80044f2:	4649      	mov	r1, r9
 80044f4:	414b      	adcs	r3, r1
 80044f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004504:	4659      	mov	r1, fp
 8004506:	00cb      	lsls	r3, r1, #3
 8004508:	4651      	mov	r1, sl
 800450a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450e:	4651      	mov	r1, sl
 8004510:	00ca      	lsls	r2, r1, #3
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	4603      	mov	r3, r0
 8004518:	4642      	mov	r2, r8
 800451a:	189b      	adds	r3, r3, r2
 800451c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004520:	464b      	mov	r3, r9
 8004522:	460a      	mov	r2, r1
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004538:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800453c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004540:	460b      	mov	r3, r1
 8004542:	18db      	adds	r3, r3, r3
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004546:	4613      	mov	r3, r2
 8004548:	eb42 0303 	adc.w	r3, r2, r3
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004556:	f7fb fec3 	bl	80002e0 <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <UART_SetConfig+0x2d4>)
 8004560:	fba3 1302 	umull	r1, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	2164      	movs	r1, #100	@ 0x64
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	3332      	adds	r3, #50	@ 0x32
 8004572:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <UART_SetConfig+0x2d4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	f003 0207 	and.w	r2, r3, #7
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4422      	add	r2, r4
 8004586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004588:	e106      	b.n	8004798 <UART_SetConfig+0x4d8>
 800458a:	bf00      	nop
 800458c:	40011000 	.word	0x40011000
 8004590:	40011400 	.word	0x40011400
 8004594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800459c:	2200      	movs	r2, #0
 800459e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045aa:	4642      	mov	r2, r8
 80045ac:	464b      	mov	r3, r9
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	6239      	str	r1, [r7, #32]
 80045b2:	415b      	adcs	r3, r3
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ba:	4641      	mov	r1, r8
 80045bc:	1854      	adds	r4, r2, r1
 80045be:	4649      	mov	r1, r9
 80045c0:	eb43 0501 	adc.w	r5, r3, r1
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	00eb      	lsls	r3, r5, #3
 80045ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d2:	00e2      	lsls	r2, r4, #3
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	4643      	mov	r3, r8
 80045da:	18e3      	adds	r3, r4, r3
 80045dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045e0:	464b      	mov	r3, r9
 80045e2:	eb45 0303 	adc.w	r3, r5, r3
 80045e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004606:	4629      	mov	r1, r5
 8004608:	008b      	lsls	r3, r1, #2
 800460a:	4621      	mov	r1, r4
 800460c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004610:	4621      	mov	r1, r4
 8004612:	008a      	lsls	r2, r1, #2
 8004614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004618:	f7fb fe62 	bl	80002e0 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4b60      	ldr	r3, [pc, #384]	@ (80047a4 <UART_SetConfig+0x4e4>)
 8004622:	fba3 2302 	umull	r2, r3, r3, r2
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	011c      	lsls	r4, r3, #4
 800462a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004634:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	1891      	adds	r1, r2, r2
 8004642:	61b9      	str	r1, [r7, #24]
 8004644:	415b      	adcs	r3, r3
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464c:	4641      	mov	r1, r8
 800464e:	1851      	adds	r1, r2, r1
 8004650:	6139      	str	r1, [r7, #16]
 8004652:	4649      	mov	r1, r9
 8004654:	414b      	adcs	r3, r1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004664:	4659      	mov	r1, fp
 8004666:	00cb      	lsls	r3, r1, #3
 8004668:	4651      	mov	r1, sl
 800466a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466e:	4651      	mov	r1, sl
 8004670:	00ca      	lsls	r2, r1, #3
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	4603      	mov	r3, r0
 8004678:	4642      	mov	r2, r8
 800467a:	189b      	adds	r3, r3, r2
 800467c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004680:	464b      	mov	r3, r9
 8004682:	460a      	mov	r2, r1
 8004684:	eb42 0303 	adc.w	r3, r2, r3
 8004688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004696:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046a4:	4649      	mov	r1, r9
 80046a6:	008b      	lsls	r3, r1, #2
 80046a8:	4641      	mov	r1, r8
 80046aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ae:	4641      	mov	r1, r8
 80046b0:	008a      	lsls	r2, r1, #2
 80046b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046b6:	f7fb fe13 	bl	80002e0 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	4b38      	ldr	r3, [pc, #224]	@ (80047a4 <UART_SetConfig+0x4e4>)
 80046c2:	fba3 2301 	umull	r2, r3, r3, r1
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2264      	movs	r2, #100	@ 0x64
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	1acb      	subs	r3, r1, r3
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	3332      	adds	r3, #50	@ 0x32
 80046d4:	4a33      	ldr	r2, [pc, #204]	@ (80047a4 <UART_SetConfig+0x4e4>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046e0:	441c      	add	r4, r3
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80046ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	1891      	adds	r1, r2, r2
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	415b      	adcs	r3, r3
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004700:	4641      	mov	r1, r8
 8004702:	1851      	adds	r1, r2, r1
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	4649      	mov	r1, r9
 8004708:	414b      	adcs	r3, r1
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004718:	4659      	mov	r1, fp
 800471a:	00cb      	lsls	r3, r1, #3
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004722:	4651      	mov	r1, sl
 8004724:	00ca      	lsls	r2, r1, #3
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	4603      	mov	r3, r0
 800472c:	4642      	mov	r2, r8
 800472e:	189b      	adds	r3, r3, r2
 8004730:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004732:	464b      	mov	r3, r9
 8004734:	460a      	mov	r2, r1
 8004736:	eb42 0303 	adc.w	r3, r2, r3
 800473a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	663b      	str	r3, [r7, #96]	@ 0x60
 8004746:	667a      	str	r2, [r7, #100]	@ 0x64
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004754:	4649      	mov	r1, r9
 8004756:	008b      	lsls	r3, r1, #2
 8004758:	4641      	mov	r1, r8
 800475a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475e:	4641      	mov	r1, r8
 8004760:	008a      	lsls	r2, r1, #2
 8004762:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004766:	f7fb fdbb 	bl	80002e0 <__aeabi_uldivmod>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <UART_SetConfig+0x4e4>)
 8004770:	fba3 1302 	umull	r1, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	2164      	movs	r1, #100	@ 0x64
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	3332      	adds	r3, #50	@ 0x32
 8004782:	4a08      	ldr	r2, [pc, #32]	@ (80047a4 <UART_SetConfig+0x4e4>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4422      	add	r2, r4
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800479e:	46bd      	mov	sp, r7
 80047a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a4:	51eb851f 	.word	0x51eb851f

080047a8 <std>:
 80047a8:	2300      	movs	r3, #0
 80047aa:	b510      	push	{r4, lr}
 80047ac:	4604      	mov	r4, r0
 80047ae:	e9c0 3300 	strd	r3, r3, [r0]
 80047b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b6:	6083      	str	r3, [r0, #8]
 80047b8:	8181      	strh	r1, [r0, #12]
 80047ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80047bc:	81c2      	strh	r2, [r0, #14]
 80047be:	6183      	str	r3, [r0, #24]
 80047c0:	4619      	mov	r1, r3
 80047c2:	2208      	movs	r2, #8
 80047c4:	305c      	adds	r0, #92	@ 0x5c
 80047c6:	f000 fa2d 	bl	8004c24 <memset>
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <std+0x58>)
 80047cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <std+0x5c>)
 80047d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <std+0x60>)
 80047d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <std+0x64>)
 80047d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <std+0x68>)
 80047dc:	6224      	str	r4, [r4, #32]
 80047de:	429c      	cmp	r4, r3
 80047e0:	d006      	beq.n	80047f0 <std+0x48>
 80047e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047e6:	4294      	cmp	r4, r2
 80047e8:	d002      	beq.n	80047f0 <std+0x48>
 80047ea:	33d0      	adds	r3, #208	@ 0xd0
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d105      	bne.n	80047fc <std+0x54>
 80047f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f8:	f000 ba8c 	b.w	8004d14 <__retarget_lock_init_recursive>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	08004a75 	.word	0x08004a75
 8004804:	08004a97 	.word	0x08004a97
 8004808:	08004acf 	.word	0x08004acf
 800480c:	08004af3 	.word	0x08004af3
 8004810:	200002f8 	.word	0x200002f8

08004814 <stdio_exit_handler>:
 8004814:	4a02      	ldr	r2, [pc, #8]	@ (8004820 <stdio_exit_handler+0xc>)
 8004816:	4903      	ldr	r1, [pc, #12]	@ (8004824 <stdio_exit_handler+0x10>)
 8004818:	4803      	ldr	r0, [pc, #12]	@ (8004828 <stdio_exit_handler+0x14>)
 800481a:	f000 b869 	b.w	80048f0 <_fwalk_sglue>
 800481e:	bf00      	nop
 8004820:	20000058 	.word	0x20000058
 8004824:	08005865 	.word	0x08005865
 8004828:	20000068 	.word	0x20000068

0800482c <cleanup_stdio>:
 800482c:	6841      	ldr	r1, [r0, #4]
 800482e:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <cleanup_stdio+0x34>)
 8004830:	4299      	cmp	r1, r3
 8004832:	b510      	push	{r4, lr}
 8004834:	4604      	mov	r4, r0
 8004836:	d001      	beq.n	800483c <cleanup_stdio+0x10>
 8004838:	f001 f814 	bl	8005864 <_fflush_r>
 800483c:	68a1      	ldr	r1, [r4, #8]
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <cleanup_stdio+0x38>)
 8004840:	4299      	cmp	r1, r3
 8004842:	d002      	beq.n	800484a <cleanup_stdio+0x1e>
 8004844:	4620      	mov	r0, r4
 8004846:	f001 f80d 	bl	8005864 <_fflush_r>
 800484a:	68e1      	ldr	r1, [r4, #12]
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <cleanup_stdio+0x3c>)
 800484e:	4299      	cmp	r1, r3
 8004850:	d004      	beq.n	800485c <cleanup_stdio+0x30>
 8004852:	4620      	mov	r0, r4
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	f001 b804 	b.w	8005864 <_fflush_r>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	200002f8 	.word	0x200002f8
 8004864:	20000360 	.word	0x20000360
 8004868:	200003c8 	.word	0x200003c8

0800486c <global_stdio_init.part.0>:
 800486c:	b510      	push	{r4, lr}
 800486e:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <global_stdio_init.part.0+0x30>)
 8004870:	4c0b      	ldr	r4, [pc, #44]	@ (80048a0 <global_stdio_init.part.0+0x34>)
 8004872:	4a0c      	ldr	r2, [pc, #48]	@ (80048a4 <global_stdio_init.part.0+0x38>)
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	4620      	mov	r0, r4
 8004878:	2200      	movs	r2, #0
 800487a:	2104      	movs	r1, #4
 800487c:	f7ff ff94 	bl	80047a8 <std>
 8004880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004884:	2201      	movs	r2, #1
 8004886:	2109      	movs	r1, #9
 8004888:	f7ff ff8e 	bl	80047a8 <std>
 800488c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004890:	2202      	movs	r2, #2
 8004892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004896:	2112      	movs	r1, #18
 8004898:	f7ff bf86 	b.w	80047a8 <std>
 800489c:	20000430 	.word	0x20000430
 80048a0:	200002f8 	.word	0x200002f8
 80048a4:	08004815 	.word	0x08004815

080048a8 <__sfp_lock_acquire>:
 80048a8:	4801      	ldr	r0, [pc, #4]	@ (80048b0 <__sfp_lock_acquire+0x8>)
 80048aa:	f000 ba34 	b.w	8004d16 <__retarget_lock_acquire_recursive>
 80048ae:	bf00      	nop
 80048b0:	20000439 	.word	0x20000439

080048b4 <__sfp_lock_release>:
 80048b4:	4801      	ldr	r0, [pc, #4]	@ (80048bc <__sfp_lock_release+0x8>)
 80048b6:	f000 ba2f 	b.w	8004d18 <__retarget_lock_release_recursive>
 80048ba:	bf00      	nop
 80048bc:	20000439 	.word	0x20000439

080048c0 <__sinit>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	f7ff fff0 	bl	80048a8 <__sfp_lock_acquire>
 80048c8:	6a23      	ldr	r3, [r4, #32]
 80048ca:	b11b      	cbz	r3, 80048d4 <__sinit+0x14>
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d0:	f7ff bff0 	b.w	80048b4 <__sfp_lock_release>
 80048d4:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <__sinit+0x28>)
 80048d6:	6223      	str	r3, [r4, #32]
 80048d8:	4b04      	ldr	r3, [pc, #16]	@ (80048ec <__sinit+0x2c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f5      	bne.n	80048cc <__sinit+0xc>
 80048e0:	f7ff ffc4 	bl	800486c <global_stdio_init.part.0>
 80048e4:	e7f2      	b.n	80048cc <__sinit+0xc>
 80048e6:	bf00      	nop
 80048e8:	0800482d 	.word	0x0800482d
 80048ec:	20000430 	.word	0x20000430

080048f0 <_fwalk_sglue>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	4607      	mov	r7, r0
 80048f6:	4688      	mov	r8, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	2600      	movs	r6, #0
 80048fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004900:	f1b9 0901 	subs.w	r9, r9, #1
 8004904:	d505      	bpl.n	8004912 <_fwalk_sglue+0x22>
 8004906:	6824      	ldr	r4, [r4, #0]
 8004908:	2c00      	cmp	r4, #0
 800490a:	d1f7      	bne.n	80048fc <_fwalk_sglue+0xc>
 800490c:	4630      	mov	r0, r6
 800490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <_fwalk_sglue+0x38>
 8004918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491c:	3301      	adds	r3, #1
 800491e:	d003      	beq.n	8004928 <_fwalk_sglue+0x38>
 8004920:	4629      	mov	r1, r5
 8004922:	4638      	mov	r0, r7
 8004924:	47c0      	blx	r8
 8004926:	4306      	orrs	r6, r0
 8004928:	3568      	adds	r5, #104	@ 0x68
 800492a:	e7e9      	b.n	8004900 <_fwalk_sglue+0x10>

0800492c <iprintf>:
 800492c:	b40f      	push	{r0, r1, r2, r3}
 800492e:	b507      	push	{r0, r1, r2, lr}
 8004930:	4906      	ldr	r1, [pc, #24]	@ (800494c <iprintf+0x20>)
 8004932:	ab04      	add	r3, sp, #16
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	f853 2b04 	ldr.w	r2, [r3], #4
 800493a:	6881      	ldr	r1, [r0, #8]
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	f000 fc67 	bl	8005210 <_vfiprintf_r>
 8004942:	b003      	add	sp, #12
 8004944:	f85d eb04 	ldr.w	lr, [sp], #4
 8004948:	b004      	add	sp, #16
 800494a:	4770      	bx	lr
 800494c:	20000064 	.word	0x20000064

08004950 <_puts_r>:
 8004950:	6a03      	ldr	r3, [r0, #32]
 8004952:	b570      	push	{r4, r5, r6, lr}
 8004954:	6884      	ldr	r4, [r0, #8]
 8004956:	4605      	mov	r5, r0
 8004958:	460e      	mov	r6, r1
 800495a:	b90b      	cbnz	r3, 8004960 <_puts_r+0x10>
 800495c:	f7ff ffb0 	bl	80048c0 <__sinit>
 8004960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004962:	07db      	lsls	r3, r3, #31
 8004964:	d405      	bmi.n	8004972 <_puts_r+0x22>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	0598      	lsls	r0, r3, #22
 800496a:	d402      	bmi.n	8004972 <_puts_r+0x22>
 800496c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800496e:	f000 f9d2 	bl	8004d16 <__retarget_lock_acquire_recursive>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	0719      	lsls	r1, r3, #28
 8004976:	d502      	bpl.n	800497e <_puts_r+0x2e>
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d135      	bne.n	80049ea <_puts_r+0x9a>
 800497e:	4621      	mov	r1, r4
 8004980:	4628      	mov	r0, r5
 8004982:	f000 f8f9 	bl	8004b78 <__swsetup_r>
 8004986:	b380      	cbz	r0, 80049ea <_puts_r+0x9a>
 8004988:	f04f 35ff 	mov.w	r5, #4294967295
 800498c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800498e:	07da      	lsls	r2, r3, #31
 8004990:	d405      	bmi.n	800499e <_puts_r+0x4e>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	059b      	lsls	r3, r3, #22
 8004996:	d402      	bmi.n	800499e <_puts_r+0x4e>
 8004998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800499a:	f000 f9bd 	bl	8004d18 <__retarget_lock_release_recursive>
 800499e:	4628      	mov	r0, r5
 80049a0:	bd70      	pop	{r4, r5, r6, pc}
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da04      	bge.n	80049b0 <_puts_r+0x60>
 80049a6:	69a2      	ldr	r2, [r4, #24]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	dc17      	bgt.n	80049dc <_puts_r+0x8c>
 80049ac:	290a      	cmp	r1, #10
 80049ae:	d015      	beq.n	80049dc <_puts_r+0x8c>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	6022      	str	r2, [r4, #0]
 80049b6:	7019      	strb	r1, [r3, #0]
 80049b8:	68a3      	ldr	r3, [r4, #8]
 80049ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049be:	3b01      	subs	r3, #1
 80049c0:	60a3      	str	r3, [r4, #8]
 80049c2:	2900      	cmp	r1, #0
 80049c4:	d1ed      	bne.n	80049a2 <_puts_r+0x52>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da11      	bge.n	80049ee <_puts_r+0x9e>
 80049ca:	4622      	mov	r2, r4
 80049cc:	210a      	movs	r1, #10
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 f893 	bl	8004afa <__swbuf_r>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d0d7      	beq.n	8004988 <_puts_r+0x38>
 80049d8:	250a      	movs	r5, #10
 80049da:	e7d7      	b.n	800498c <_puts_r+0x3c>
 80049dc:	4622      	mov	r2, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 f88b 	bl	8004afa <__swbuf_r>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d1e7      	bne.n	80049b8 <_puts_r+0x68>
 80049e8:	e7ce      	b.n	8004988 <_puts_r+0x38>
 80049ea:	3e01      	subs	r6, #1
 80049ec:	e7e4      	b.n	80049b8 <_puts_r+0x68>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	6022      	str	r2, [r4, #0]
 80049f4:	220a      	movs	r2, #10
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	e7ee      	b.n	80049d8 <_puts_r+0x88>
	...

080049fc <puts>:
 80049fc:	4b02      	ldr	r3, [pc, #8]	@ (8004a08 <puts+0xc>)
 80049fe:	4601      	mov	r1, r0
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f7ff bfa5 	b.w	8004950 <_puts_r>
 8004a06:	bf00      	nop
 8004a08:	20000064 	.word	0x20000064

08004a0c <sniprintf>:
 8004a0c:	b40c      	push	{r2, r3}
 8004a0e:	b530      	push	{r4, r5, lr}
 8004a10:	4b17      	ldr	r3, [pc, #92]	@ (8004a70 <sniprintf+0x64>)
 8004a12:	1e0c      	subs	r4, r1, #0
 8004a14:	681d      	ldr	r5, [r3, #0]
 8004a16:	b09d      	sub	sp, #116	@ 0x74
 8004a18:	da08      	bge.n	8004a2c <sniprintf+0x20>
 8004a1a:	238b      	movs	r3, #139	@ 0x8b
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	b01d      	add	sp, #116	@ 0x74
 8004a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a28:	b002      	add	sp, #8
 8004a2a:	4770      	bx	lr
 8004a2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004a30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a34:	bf14      	ite	ne
 8004a36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a3a:	4623      	moveq	r3, r4
 8004a3c:	9304      	str	r3, [sp, #16]
 8004a3e:	9307      	str	r3, [sp, #28]
 8004a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a44:	9002      	str	r0, [sp, #8]
 8004a46:	9006      	str	r0, [sp, #24]
 8004a48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a4c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a4e:	ab21      	add	r3, sp, #132	@ 0x84
 8004a50:	a902      	add	r1, sp, #8
 8004a52:	4628      	mov	r0, r5
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	f000 fab5 	bl	8004fc4 <_svfiprintf_r>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	bfbc      	itt	lt
 8004a5e:	238b      	movlt	r3, #139	@ 0x8b
 8004a60:	602b      	strlt	r3, [r5, #0]
 8004a62:	2c00      	cmp	r4, #0
 8004a64:	d0dd      	beq.n	8004a22 <sniprintf+0x16>
 8004a66:	9b02      	ldr	r3, [sp, #8]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e7d9      	b.n	8004a22 <sniprintf+0x16>
 8004a6e:	bf00      	nop
 8004a70:	20000064 	.word	0x20000064

08004a74 <__sread>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	460c      	mov	r4, r1
 8004a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7c:	f000 f8fc 	bl	8004c78 <_read_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	bfab      	itete	ge
 8004a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a86:	89a3      	ldrhlt	r3, [r4, #12]
 8004a88:	181b      	addge	r3, r3, r0
 8004a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a8e:	bfac      	ite	ge
 8004a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a92:	81a3      	strhlt	r3, [r4, #12]
 8004a94:	bd10      	pop	{r4, pc}

08004a96 <__swrite>:
 8004a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9a:	461f      	mov	r7, r3
 8004a9c:	898b      	ldrh	r3, [r1, #12]
 8004a9e:	05db      	lsls	r3, r3, #23
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	d505      	bpl.n	8004ab4 <__swrite+0x1e>
 8004aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aac:	2302      	movs	r3, #2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f000 f8d0 	bl	8004c54 <_lseek_r>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aca:	f000 b8e7 	b.w	8004c9c <_write_r>

08004ace <__sseek>:
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad6:	f000 f8bd 	bl	8004c54 <_lseek_r>
 8004ada:	1c43      	adds	r3, r0, #1
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	bf15      	itete	ne
 8004ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004aea:	81a3      	strheq	r3, [r4, #12]
 8004aec:	bf18      	it	ne
 8004aee:	81a3      	strhne	r3, [r4, #12]
 8004af0:	bd10      	pop	{r4, pc}

08004af2 <__sclose>:
 8004af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af6:	f000 b89d 	b.w	8004c34 <_close_r>

08004afa <__swbuf_r>:
 8004afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afc:	460e      	mov	r6, r1
 8004afe:	4614      	mov	r4, r2
 8004b00:	4605      	mov	r5, r0
 8004b02:	b118      	cbz	r0, 8004b0c <__swbuf_r+0x12>
 8004b04:	6a03      	ldr	r3, [r0, #32]
 8004b06:	b90b      	cbnz	r3, 8004b0c <__swbuf_r+0x12>
 8004b08:	f7ff feda 	bl	80048c0 <__sinit>
 8004b0c:	69a3      	ldr	r3, [r4, #24]
 8004b0e:	60a3      	str	r3, [r4, #8]
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	071a      	lsls	r2, r3, #28
 8004b14:	d501      	bpl.n	8004b1a <__swbuf_r+0x20>
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	b943      	cbnz	r3, 8004b2c <__swbuf_r+0x32>
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f000 f82b 	bl	8004b78 <__swsetup_r>
 8004b22:	b118      	cbz	r0, 8004b2c <__swbuf_r+0x32>
 8004b24:	f04f 37ff 	mov.w	r7, #4294967295
 8004b28:	4638      	mov	r0, r7
 8004b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	6922      	ldr	r2, [r4, #16]
 8004b30:	1a98      	subs	r0, r3, r2
 8004b32:	6963      	ldr	r3, [r4, #20]
 8004b34:	b2f6      	uxtb	r6, r6
 8004b36:	4283      	cmp	r3, r0
 8004b38:	4637      	mov	r7, r6
 8004b3a:	dc05      	bgt.n	8004b48 <__swbuf_r+0x4e>
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 fe90 	bl	8005864 <_fflush_r>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d1ed      	bne.n	8004b24 <__swbuf_r+0x2a>
 8004b48:	68a3      	ldr	r3, [r4, #8]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	60a3      	str	r3, [r4, #8]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	701e      	strb	r6, [r3, #0]
 8004b56:	6962      	ldr	r2, [r4, #20]
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d004      	beq.n	8004b68 <__swbuf_r+0x6e>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	07db      	lsls	r3, r3, #31
 8004b62:	d5e1      	bpl.n	8004b28 <__swbuf_r+0x2e>
 8004b64:	2e0a      	cmp	r6, #10
 8004b66:	d1df      	bne.n	8004b28 <__swbuf_r+0x2e>
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 fe7a 	bl	8005864 <_fflush_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d0d9      	beq.n	8004b28 <__swbuf_r+0x2e>
 8004b74:	e7d6      	b.n	8004b24 <__swbuf_r+0x2a>
	...

08004b78 <__swsetup_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4b29      	ldr	r3, [pc, #164]	@ (8004c20 <__swsetup_r+0xa8>)
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	460c      	mov	r4, r1
 8004b82:	b118      	cbz	r0, 8004b8c <__swsetup_r+0x14>
 8004b84:	6a03      	ldr	r3, [r0, #32]
 8004b86:	b90b      	cbnz	r3, 8004b8c <__swsetup_r+0x14>
 8004b88:	f7ff fe9a 	bl	80048c0 <__sinit>
 8004b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b90:	0719      	lsls	r1, r3, #28
 8004b92:	d422      	bmi.n	8004bda <__swsetup_r+0x62>
 8004b94:	06da      	lsls	r2, r3, #27
 8004b96:	d407      	bmi.n	8004ba8 <__swsetup_r+0x30>
 8004b98:	2209      	movs	r2, #9
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	e033      	b.n	8004c10 <__swsetup_r+0x98>
 8004ba8:	0758      	lsls	r0, r3, #29
 8004baa:	d512      	bpl.n	8004bd2 <__swsetup_r+0x5a>
 8004bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bae:	b141      	cbz	r1, 8004bc2 <__swsetup_r+0x4a>
 8004bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d002      	beq.n	8004bbe <__swsetup_r+0x46>
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 f8af 	bl	8004d1c <_free_r>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6063      	str	r3, [r4, #4]
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	b94b      	cbnz	r3, 8004bf2 <__swsetup_r+0x7a>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be8:	d003      	beq.n	8004bf2 <__swsetup_r+0x7a>
 8004bea:	4621      	mov	r1, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 fe87 	bl	8005900 <__smakebuf_r>
 8004bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf6:	f013 0201 	ands.w	r2, r3, #1
 8004bfa:	d00a      	beq.n	8004c12 <__swsetup_r+0x9a>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60a2      	str	r2, [r4, #8]
 8004c00:	6962      	ldr	r2, [r4, #20]
 8004c02:	4252      	negs	r2, r2
 8004c04:	61a2      	str	r2, [r4, #24]
 8004c06:	6922      	ldr	r2, [r4, #16]
 8004c08:	b942      	cbnz	r2, 8004c1c <__swsetup_r+0xa4>
 8004c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c0e:	d1c5      	bne.n	8004b9c <__swsetup_r+0x24>
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
 8004c12:	0799      	lsls	r1, r3, #30
 8004c14:	bf58      	it	pl
 8004c16:	6962      	ldrpl	r2, [r4, #20]
 8004c18:	60a2      	str	r2, [r4, #8]
 8004c1a:	e7f4      	b.n	8004c06 <__swsetup_r+0x8e>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e7f7      	b.n	8004c10 <__swsetup_r+0x98>
 8004c20:	20000064 	.word	0x20000064

08004c24 <memset>:
 8004c24:	4402      	add	r2, r0
 8004c26:	4603      	mov	r3, r0
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d100      	bne.n	8004c2e <memset+0xa>
 8004c2c:	4770      	bx	lr
 8004c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c32:	e7f9      	b.n	8004c28 <memset+0x4>

08004c34 <_close_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d06      	ldr	r5, [pc, #24]	@ (8004c50 <_close_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fc fc7e 	bl	8001540 <_close>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_close_r+0x1a>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_close_r+0x1a>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	20000434 	.word	0x20000434

08004c54 <_lseek_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d07      	ldr	r5, [pc, #28]	@ (8004c74 <_lseek_r+0x20>)
 8004c58:	4604      	mov	r4, r0
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	602a      	str	r2, [r5, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f7fc fc93 	bl	800158e <_lseek>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_lseek_r+0x1e>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_lseek_r+0x1e>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	20000434 	.word	0x20000434

08004c78 <_read_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d07      	ldr	r5, [pc, #28]	@ (8004c98 <_read_r+0x20>)
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	4608      	mov	r0, r1
 8004c80:	4611      	mov	r1, r2
 8004c82:	2200      	movs	r2, #0
 8004c84:	602a      	str	r2, [r5, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f7fc fc21 	bl	80014ce <_read>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_read_r+0x1e>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_read_r+0x1e>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	20000434 	.word	0x20000434

08004c9c <_write_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d07      	ldr	r5, [pc, #28]	@ (8004cbc <_write_r+0x20>)
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	4608      	mov	r0, r1
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	602a      	str	r2, [r5, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f7fc fc2c 	bl	8001508 <_write>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_write_r+0x1e>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_write_r+0x1e>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	20000434 	.word	0x20000434

08004cc0 <__errno>:
 8004cc0:	4b01      	ldr	r3, [pc, #4]	@ (8004cc8 <__errno+0x8>)
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000064 	.word	0x20000064

08004ccc <__libc_init_array>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4d0d      	ldr	r5, [pc, #52]	@ (8004d04 <__libc_init_array+0x38>)
 8004cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8004d08 <__libc_init_array+0x3c>)
 8004cd2:	1b64      	subs	r4, r4, r5
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	42a6      	cmp	r6, r4
 8004cda:	d109      	bne.n	8004cf0 <__libc_init_array+0x24>
 8004cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8004d0c <__libc_init_array+0x40>)
 8004cde:	4c0c      	ldr	r4, [pc, #48]	@ (8004d10 <__libc_init_array+0x44>)
 8004ce0:	f000 feda 	bl	8005a98 <_init>
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	2600      	movs	r6, #0
 8004cea:	42a6      	cmp	r6, r4
 8004cec:	d105      	bne.n	8004cfa <__libc_init_array+0x2e>
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf4:	4798      	blx	r3
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7ee      	b.n	8004cd8 <__libc_init_array+0xc>
 8004cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfe:	4798      	blx	r3
 8004d00:	3601      	adds	r6, #1
 8004d02:	e7f2      	b.n	8004cea <__libc_init_array+0x1e>
 8004d04:	08005e38 	.word	0x08005e38
 8004d08:	08005e38 	.word	0x08005e38
 8004d0c:	08005e38 	.word	0x08005e38
 8004d10:	08005e3c 	.word	0x08005e3c

08004d14 <__retarget_lock_init_recursive>:
 8004d14:	4770      	bx	lr

08004d16 <__retarget_lock_acquire_recursive>:
 8004d16:	4770      	bx	lr

08004d18 <__retarget_lock_release_recursive>:
 8004d18:	4770      	bx	lr
	...

08004d1c <_free_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4605      	mov	r5, r0
 8004d20:	2900      	cmp	r1, #0
 8004d22:	d041      	beq.n	8004da8 <_free_r+0x8c>
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f0c      	subs	r4, r1, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfb8      	it	lt
 8004d2e:	18e4      	addlt	r4, r4, r3
 8004d30:	f000 f8e0 	bl	8004ef4 <__malloc_lock>
 8004d34:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <_free_r+0x90>)
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	b933      	cbnz	r3, 8004d48 <_free_r+0x2c>
 8004d3a:	6063      	str	r3, [r4, #4]
 8004d3c:	6014      	str	r4, [r2, #0]
 8004d3e:	4628      	mov	r0, r5
 8004d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d44:	f000 b8dc 	b.w	8004f00 <__malloc_unlock>
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d908      	bls.n	8004d5e <_free_r+0x42>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	1821      	adds	r1, r4, r0
 8004d50:	428b      	cmp	r3, r1
 8004d52:	bf01      	itttt	eq
 8004d54:	6819      	ldreq	r1, [r3, #0]
 8004d56:	685b      	ldreq	r3, [r3, #4]
 8004d58:	1809      	addeq	r1, r1, r0
 8004d5a:	6021      	streq	r1, [r4, #0]
 8004d5c:	e7ed      	b.n	8004d3a <_free_r+0x1e>
 8004d5e:	461a      	mov	r2, r3
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	b10b      	cbz	r3, 8004d68 <_free_r+0x4c>
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d9fa      	bls.n	8004d5e <_free_r+0x42>
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	1850      	adds	r0, r2, r1
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d10b      	bne.n	8004d88 <_free_r+0x6c>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	4401      	add	r1, r0
 8004d74:	1850      	adds	r0, r2, r1
 8004d76:	4283      	cmp	r3, r0
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	d1e0      	bne.n	8004d3e <_free_r+0x22>
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	6053      	str	r3, [r2, #4]
 8004d82:	4408      	add	r0, r1
 8004d84:	6010      	str	r0, [r2, #0]
 8004d86:	e7da      	b.n	8004d3e <_free_r+0x22>
 8004d88:	d902      	bls.n	8004d90 <_free_r+0x74>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	e7d6      	b.n	8004d3e <_free_r+0x22>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	1821      	adds	r1, r4, r0
 8004d94:	428b      	cmp	r3, r1
 8004d96:	bf04      	itt	eq
 8004d98:	6819      	ldreq	r1, [r3, #0]
 8004d9a:	685b      	ldreq	r3, [r3, #4]
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	bf04      	itt	eq
 8004da0:	1809      	addeq	r1, r1, r0
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	6054      	str	r4, [r2, #4]
 8004da6:	e7ca      	b.n	8004d3e <_free_r+0x22>
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	20000440 	.word	0x20000440

08004db0 <sbrk_aligned>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4e0f      	ldr	r6, [pc, #60]	@ (8004df0 <sbrk_aligned+0x40>)
 8004db4:	460c      	mov	r4, r1
 8004db6:	6831      	ldr	r1, [r6, #0]
 8004db8:	4605      	mov	r5, r0
 8004dba:	b911      	cbnz	r1, 8004dc2 <sbrk_aligned+0x12>
 8004dbc:	f000 fe18 	bl	80059f0 <_sbrk_r>
 8004dc0:	6030      	str	r0, [r6, #0]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fe13 	bl	80059f0 <_sbrk_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	d103      	bne.n	8004dd6 <sbrk_aligned+0x26>
 8004dce:	f04f 34ff 	mov.w	r4, #4294967295
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
 8004dd6:	1cc4      	adds	r4, r0, #3
 8004dd8:	f024 0403 	bic.w	r4, r4, #3
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d0f8      	beq.n	8004dd2 <sbrk_aligned+0x22>
 8004de0:	1a21      	subs	r1, r4, r0
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 fe04 	bl	80059f0 <_sbrk_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d1f2      	bne.n	8004dd2 <sbrk_aligned+0x22>
 8004dec:	e7ef      	b.n	8004dce <sbrk_aligned+0x1e>
 8004dee:	bf00      	nop
 8004df0:	2000043c 	.word	0x2000043c

08004df4 <_malloc_r>:
 8004df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df8:	1ccd      	adds	r5, r1, #3
 8004dfa:	f025 0503 	bic.w	r5, r5, #3
 8004dfe:	3508      	adds	r5, #8
 8004e00:	2d0c      	cmp	r5, #12
 8004e02:	bf38      	it	cc
 8004e04:	250c      	movcc	r5, #12
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	4606      	mov	r6, r0
 8004e0a:	db01      	blt.n	8004e10 <_malloc_r+0x1c>
 8004e0c:	42a9      	cmp	r1, r5
 8004e0e:	d904      	bls.n	8004e1a <_malloc_r+0x26>
 8004e10:	230c      	movs	r3, #12
 8004e12:	6033      	str	r3, [r6, #0]
 8004e14:	2000      	movs	r0, #0
 8004e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ef0 <_malloc_r+0xfc>
 8004e1e:	f000 f869 	bl	8004ef4 <__malloc_lock>
 8004e22:	f8d8 3000 	ldr.w	r3, [r8]
 8004e26:	461c      	mov	r4, r3
 8004e28:	bb44      	cbnz	r4, 8004e7c <_malloc_r+0x88>
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff ffbf 	bl	8004db0 <sbrk_aligned>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	4604      	mov	r4, r0
 8004e36:	d158      	bne.n	8004eea <_malloc_r+0xf6>
 8004e38:	f8d8 4000 	ldr.w	r4, [r8]
 8004e3c:	4627      	mov	r7, r4
 8004e3e:	2f00      	cmp	r7, #0
 8004e40:	d143      	bne.n	8004eca <_malloc_r+0xd6>
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	d04b      	beq.n	8004ede <_malloc_r+0xea>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	4639      	mov	r1, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	eb04 0903 	add.w	r9, r4, r3
 8004e50:	f000 fdce 	bl	80059f0 <_sbrk_r>
 8004e54:	4581      	cmp	r9, r0
 8004e56:	d142      	bne.n	8004ede <_malloc_r+0xea>
 8004e58:	6821      	ldr	r1, [r4, #0]
 8004e5a:	1a6d      	subs	r5, r5, r1
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ffa6 	bl	8004db0 <sbrk_aligned>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d03a      	beq.n	8004ede <_malloc_r+0xea>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	442b      	add	r3, r5
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	bb62      	cbnz	r2, 8004ed0 <_malloc_r+0xdc>
 8004e76:	f8c8 7000 	str.w	r7, [r8]
 8004e7a:	e00f      	b.n	8004e9c <_malloc_r+0xa8>
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	1b52      	subs	r2, r2, r5
 8004e80:	d420      	bmi.n	8004ec4 <_malloc_r+0xd0>
 8004e82:	2a0b      	cmp	r2, #11
 8004e84:	d917      	bls.n	8004eb6 <_malloc_r+0xc2>
 8004e86:	1961      	adds	r1, r4, r5
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	6025      	str	r5, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	6059      	strne	r1, [r3, #4]
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	bf08      	it	eq
 8004e94:	f8c8 1000 	streq.w	r1, [r8]
 8004e98:	5162      	str	r2, [r4, r5]
 8004e9a:	604b      	str	r3, [r1, #4]
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 f82f 	bl	8004f00 <__malloc_unlock>
 8004ea2:	f104 000b 	add.w	r0, r4, #11
 8004ea6:	1d23      	adds	r3, r4, #4
 8004ea8:	f020 0007 	bic.w	r0, r0, #7
 8004eac:	1ac2      	subs	r2, r0, r3
 8004eae:	bf1c      	itt	ne
 8004eb0:	1a1b      	subne	r3, r3, r0
 8004eb2:	50a3      	strne	r3, [r4, r2]
 8004eb4:	e7af      	b.n	8004e16 <_malloc_r+0x22>
 8004eb6:	6862      	ldr	r2, [r4, #4]
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	bf0c      	ite	eq
 8004ebc:	f8c8 2000 	streq.w	r2, [r8]
 8004ec0:	605a      	strne	r2, [r3, #4]
 8004ec2:	e7eb      	b.n	8004e9c <_malloc_r+0xa8>
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	6864      	ldr	r4, [r4, #4]
 8004ec8:	e7ae      	b.n	8004e28 <_malloc_r+0x34>
 8004eca:	463c      	mov	r4, r7
 8004ecc:	687f      	ldr	r7, [r7, #4]
 8004ece:	e7b6      	b.n	8004e3e <_malloc_r+0x4a>
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d1fb      	bne.n	8004ed0 <_malloc_r+0xdc>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6053      	str	r3, [r2, #4]
 8004edc:	e7de      	b.n	8004e9c <_malloc_r+0xa8>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f000 f80c 	bl	8004f00 <__malloc_unlock>
 8004ee8:	e794      	b.n	8004e14 <_malloc_r+0x20>
 8004eea:	6005      	str	r5, [r0, #0]
 8004eec:	e7d6      	b.n	8004e9c <_malloc_r+0xa8>
 8004eee:	bf00      	nop
 8004ef0:	20000440 	.word	0x20000440

08004ef4 <__malloc_lock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__malloc_lock+0x8>)
 8004ef6:	f7ff bf0e 	b.w	8004d16 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	20000438 	.word	0x20000438

08004f00 <__malloc_unlock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__malloc_unlock+0x8>)
 8004f02:	f7ff bf09 	b.w	8004d18 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	20000438 	.word	0x20000438

08004f0c <__ssputs_r>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	688e      	ldr	r6, [r1, #8]
 8004f12:	461f      	mov	r7, r3
 8004f14:	42be      	cmp	r6, r7
 8004f16:	680b      	ldr	r3, [r1, #0]
 8004f18:	4682      	mov	sl, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4690      	mov	r8, r2
 8004f1e:	d82d      	bhi.n	8004f7c <__ssputs_r+0x70>
 8004f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f28:	d026      	beq.n	8004f78 <__ssputs_r+0x6c>
 8004f2a:	6965      	ldr	r5, [r4, #20]
 8004f2c:	6909      	ldr	r1, [r1, #16]
 8004f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f32:	eba3 0901 	sub.w	r9, r3, r1
 8004f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f3a:	1c7b      	adds	r3, r7, #1
 8004f3c:	444b      	add	r3, r9
 8004f3e:	106d      	asrs	r5, r5, #1
 8004f40:	429d      	cmp	r5, r3
 8004f42:	bf38      	it	cc
 8004f44:	461d      	movcc	r5, r3
 8004f46:	0553      	lsls	r3, r2, #21
 8004f48:	d527      	bpl.n	8004f9a <__ssputs_r+0x8e>
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	f7ff ff52 	bl	8004df4 <_malloc_r>
 8004f50:	4606      	mov	r6, r0
 8004f52:	b360      	cbz	r0, 8004fae <__ssputs_r+0xa2>
 8004f54:	6921      	ldr	r1, [r4, #16]
 8004f56:	464a      	mov	r2, r9
 8004f58:	f000 fd5a 	bl	8005a10 <memcpy>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	6126      	str	r6, [r4, #16]
 8004f6a:	6165      	str	r5, [r4, #20]
 8004f6c:	444e      	add	r6, r9
 8004f6e:	eba5 0509 	sub.w	r5, r5, r9
 8004f72:	6026      	str	r6, [r4, #0]
 8004f74:	60a5      	str	r5, [r4, #8]
 8004f76:	463e      	mov	r6, r7
 8004f78:	42be      	cmp	r6, r7
 8004f7a:	d900      	bls.n	8004f7e <__ssputs_r+0x72>
 8004f7c:	463e      	mov	r6, r7
 8004f7e:	6820      	ldr	r0, [r4, #0]
 8004f80:	4632      	mov	r2, r6
 8004f82:	4641      	mov	r1, r8
 8004f84:	f000 fcf8 	bl	8005978 <memmove>
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	1b9b      	subs	r3, r3, r6
 8004f8c:	60a3      	str	r3, [r4, #8]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	4433      	add	r3, r6
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	2000      	movs	r0, #0
 8004f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9a:	462a      	mov	r2, r5
 8004f9c:	f000 fd46 	bl	8005a2c <_realloc_r>
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d1e0      	bne.n	8004f68 <__ssputs_r+0x5c>
 8004fa6:	6921      	ldr	r1, [r4, #16]
 8004fa8:	4650      	mov	r0, sl
 8004faa:	f7ff feb7 	bl	8004d1c <_free_r>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	f8ca 3000 	str.w	r3, [sl]
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e7e9      	b.n	8004f96 <__ssputs_r+0x8a>
	...

08004fc4 <_svfiprintf_r>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	4698      	mov	r8, r3
 8004fca:	898b      	ldrh	r3, [r1, #12]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	b09d      	sub	sp, #116	@ 0x74
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	d510      	bpl.n	8004ffa <_svfiprintf_r+0x36>
 8004fd8:	690b      	ldr	r3, [r1, #16]
 8004fda:	b973      	cbnz	r3, 8004ffa <_svfiprintf_r+0x36>
 8004fdc:	2140      	movs	r1, #64	@ 0x40
 8004fde:	f7ff ff09 	bl	8004df4 <_malloc_r>
 8004fe2:	6028      	str	r0, [r5, #0]
 8004fe4:	6128      	str	r0, [r5, #16]
 8004fe6:	b930      	cbnz	r0, 8004ff6 <_svfiprintf_r+0x32>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	b01d      	add	sp, #116	@ 0x74
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	2340      	movs	r3, #64	@ 0x40
 8004ff8:	616b      	str	r3, [r5, #20]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffe:	2320      	movs	r3, #32
 8005000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005004:	f8cd 800c 	str.w	r8, [sp, #12]
 8005008:	2330      	movs	r3, #48	@ 0x30
 800500a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051a8 <_svfiprintf_r+0x1e4>
 800500e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005012:	f04f 0901 	mov.w	r9, #1
 8005016:	4623      	mov	r3, r4
 8005018:	469a      	mov	sl, r3
 800501a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800501e:	b10a      	cbz	r2, 8005024 <_svfiprintf_r+0x60>
 8005020:	2a25      	cmp	r2, #37	@ 0x25
 8005022:	d1f9      	bne.n	8005018 <_svfiprintf_r+0x54>
 8005024:	ebba 0b04 	subs.w	fp, sl, r4
 8005028:	d00b      	beq.n	8005042 <_svfiprintf_r+0x7e>
 800502a:	465b      	mov	r3, fp
 800502c:	4622      	mov	r2, r4
 800502e:	4629      	mov	r1, r5
 8005030:	4638      	mov	r0, r7
 8005032:	f7ff ff6b 	bl	8004f0c <__ssputs_r>
 8005036:	3001      	adds	r0, #1
 8005038:	f000 80a7 	beq.w	800518a <_svfiprintf_r+0x1c6>
 800503c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800503e:	445a      	add	r2, fp
 8005040:	9209      	str	r2, [sp, #36]	@ 0x24
 8005042:	f89a 3000 	ldrb.w	r3, [sl]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 809f 	beq.w	800518a <_svfiprintf_r+0x1c6>
 800504c:	2300      	movs	r3, #0
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
 8005052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005056:	f10a 0a01 	add.w	sl, sl, #1
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	9307      	str	r3, [sp, #28]
 800505e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005062:	931a      	str	r3, [sp, #104]	@ 0x68
 8005064:	4654      	mov	r4, sl
 8005066:	2205      	movs	r2, #5
 8005068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506c:	484e      	ldr	r0, [pc, #312]	@ (80051a8 <_svfiprintf_r+0x1e4>)
 800506e:	f7fb f8e7 	bl	8000240 <memchr>
 8005072:	9a04      	ldr	r2, [sp, #16]
 8005074:	b9d8      	cbnz	r0, 80050ae <_svfiprintf_r+0xea>
 8005076:	06d0      	lsls	r0, r2, #27
 8005078:	bf44      	itt	mi
 800507a:	2320      	movmi	r3, #32
 800507c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005080:	0711      	lsls	r1, r2, #28
 8005082:	bf44      	itt	mi
 8005084:	232b      	movmi	r3, #43	@ 0x2b
 8005086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508a:	f89a 3000 	ldrb.w	r3, [sl]
 800508e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005090:	d015      	beq.n	80050be <_svfiprintf_r+0xfa>
 8005092:	9a07      	ldr	r2, [sp, #28]
 8005094:	4654      	mov	r4, sl
 8005096:	2000      	movs	r0, #0
 8005098:	f04f 0c0a 	mov.w	ip, #10
 800509c:	4621      	mov	r1, r4
 800509e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a2:	3b30      	subs	r3, #48	@ 0x30
 80050a4:	2b09      	cmp	r3, #9
 80050a6:	d94b      	bls.n	8005140 <_svfiprintf_r+0x17c>
 80050a8:	b1b0      	cbz	r0, 80050d8 <_svfiprintf_r+0x114>
 80050aa:	9207      	str	r2, [sp, #28]
 80050ac:	e014      	b.n	80050d8 <_svfiprintf_r+0x114>
 80050ae:	eba0 0308 	sub.w	r3, r0, r8
 80050b2:	fa09 f303 	lsl.w	r3, r9, r3
 80050b6:	4313      	orrs	r3, r2
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	46a2      	mov	sl, r4
 80050bc:	e7d2      	b.n	8005064 <_svfiprintf_r+0xa0>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfbb      	ittet	lt
 80050ca:	425b      	neglt	r3, r3
 80050cc:	f042 0202 	orrlt.w	r2, r2, #2
 80050d0:	9307      	strge	r3, [sp, #28]
 80050d2:	9307      	strlt	r3, [sp, #28]
 80050d4:	bfb8      	it	lt
 80050d6:	9204      	strlt	r2, [sp, #16]
 80050d8:	7823      	ldrb	r3, [r4, #0]
 80050da:	2b2e      	cmp	r3, #46	@ 0x2e
 80050dc:	d10a      	bne.n	80050f4 <_svfiprintf_r+0x130>
 80050de:	7863      	ldrb	r3, [r4, #1]
 80050e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e2:	d132      	bne.n	800514a <_svfiprintf_r+0x186>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	9203      	str	r2, [sp, #12]
 80050ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050f0:	3402      	adds	r4, #2
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051b8 <_svfiprintf_r+0x1f4>
 80050f8:	7821      	ldrb	r1, [r4, #0]
 80050fa:	2203      	movs	r2, #3
 80050fc:	4650      	mov	r0, sl
 80050fe:	f7fb f89f 	bl	8000240 <memchr>
 8005102:	b138      	cbz	r0, 8005114 <_svfiprintf_r+0x150>
 8005104:	9b04      	ldr	r3, [sp, #16]
 8005106:	eba0 000a 	sub.w	r0, r0, sl
 800510a:	2240      	movs	r2, #64	@ 0x40
 800510c:	4082      	lsls	r2, r0
 800510e:	4313      	orrs	r3, r2
 8005110:	3401      	adds	r4, #1
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005118:	4824      	ldr	r0, [pc, #144]	@ (80051ac <_svfiprintf_r+0x1e8>)
 800511a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800511e:	2206      	movs	r2, #6
 8005120:	f7fb f88e 	bl	8000240 <memchr>
 8005124:	2800      	cmp	r0, #0
 8005126:	d036      	beq.n	8005196 <_svfiprintf_r+0x1d2>
 8005128:	4b21      	ldr	r3, [pc, #132]	@ (80051b0 <_svfiprintf_r+0x1ec>)
 800512a:	bb1b      	cbnz	r3, 8005174 <_svfiprintf_r+0x1b0>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	3307      	adds	r3, #7
 8005130:	f023 0307 	bic.w	r3, r3, #7
 8005134:	3308      	adds	r3, #8
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800513a:	4433      	add	r3, r6
 800513c:	9309      	str	r3, [sp, #36]	@ 0x24
 800513e:	e76a      	b.n	8005016 <_svfiprintf_r+0x52>
 8005140:	fb0c 3202 	mla	r2, ip, r2, r3
 8005144:	460c      	mov	r4, r1
 8005146:	2001      	movs	r0, #1
 8005148:	e7a8      	b.n	800509c <_svfiprintf_r+0xd8>
 800514a:	2300      	movs	r3, #0
 800514c:	3401      	adds	r4, #1
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	4619      	mov	r1, r3
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	4620      	mov	r0, r4
 8005158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515c:	3a30      	subs	r2, #48	@ 0x30
 800515e:	2a09      	cmp	r2, #9
 8005160:	d903      	bls.n	800516a <_svfiprintf_r+0x1a6>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0c6      	beq.n	80050f4 <_svfiprintf_r+0x130>
 8005166:	9105      	str	r1, [sp, #20]
 8005168:	e7c4      	b.n	80050f4 <_svfiprintf_r+0x130>
 800516a:	fb0c 2101 	mla	r1, ip, r1, r2
 800516e:	4604      	mov	r4, r0
 8005170:	2301      	movs	r3, #1
 8005172:	e7f0      	b.n	8005156 <_svfiprintf_r+0x192>
 8005174:	ab03      	add	r3, sp, #12
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	462a      	mov	r2, r5
 800517a:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <_svfiprintf_r+0x1f0>)
 800517c:	a904      	add	r1, sp, #16
 800517e:	4638      	mov	r0, r7
 8005180:	f3af 8000 	nop.w
 8005184:	1c42      	adds	r2, r0, #1
 8005186:	4606      	mov	r6, r0
 8005188:	d1d6      	bne.n	8005138 <_svfiprintf_r+0x174>
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	065b      	lsls	r3, r3, #25
 800518e:	f53f af2d 	bmi.w	8004fec <_svfiprintf_r+0x28>
 8005192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005194:	e72c      	b.n	8004ff0 <_svfiprintf_r+0x2c>
 8005196:	ab03      	add	r3, sp, #12
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	462a      	mov	r2, r5
 800519c:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <_svfiprintf_r+0x1f0>)
 800519e:	a904      	add	r1, sp, #16
 80051a0:	4638      	mov	r0, r7
 80051a2:	f000 f9bb 	bl	800551c <_printf_i>
 80051a6:	e7ed      	b.n	8005184 <_svfiprintf_r+0x1c0>
 80051a8:	08005dfc 	.word	0x08005dfc
 80051ac:	08005e06 	.word	0x08005e06
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004f0d 	.word	0x08004f0d
 80051b8:	08005e02 	.word	0x08005e02

080051bc <__sfputc_r>:
 80051bc:	6893      	ldr	r3, [r2, #8]
 80051be:	3b01      	subs	r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	b410      	push	{r4}
 80051c4:	6093      	str	r3, [r2, #8]
 80051c6:	da08      	bge.n	80051da <__sfputc_r+0x1e>
 80051c8:	6994      	ldr	r4, [r2, #24]
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	db01      	blt.n	80051d2 <__sfputc_r+0x16>
 80051ce:	290a      	cmp	r1, #10
 80051d0:	d103      	bne.n	80051da <__sfputc_r+0x1e>
 80051d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051d6:	f7ff bc90 	b.w	8004afa <__swbuf_r>
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	1c58      	adds	r0, r3, #1
 80051de:	6010      	str	r0, [r2, #0]
 80051e0:	7019      	strb	r1, [r3, #0]
 80051e2:	4608      	mov	r0, r1
 80051e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <__sfputs_r>:
 80051ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	4614      	mov	r4, r2
 80051f2:	18d5      	adds	r5, r2, r3
 80051f4:	42ac      	cmp	r4, r5
 80051f6:	d101      	bne.n	80051fc <__sfputs_r+0x12>
 80051f8:	2000      	movs	r0, #0
 80051fa:	e007      	b.n	800520c <__sfputs_r+0x22>
 80051fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005200:	463a      	mov	r2, r7
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff ffda 	bl	80051bc <__sfputc_r>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d1f3      	bne.n	80051f4 <__sfputs_r+0xa>
 800520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005210 <_vfiprintf_r>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	460d      	mov	r5, r1
 8005216:	b09d      	sub	sp, #116	@ 0x74
 8005218:	4614      	mov	r4, r2
 800521a:	4698      	mov	r8, r3
 800521c:	4606      	mov	r6, r0
 800521e:	b118      	cbz	r0, 8005228 <_vfiprintf_r+0x18>
 8005220:	6a03      	ldr	r3, [r0, #32]
 8005222:	b90b      	cbnz	r3, 8005228 <_vfiprintf_r+0x18>
 8005224:	f7ff fb4c 	bl	80048c0 <__sinit>
 8005228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800522a:	07d9      	lsls	r1, r3, #31
 800522c:	d405      	bmi.n	800523a <_vfiprintf_r+0x2a>
 800522e:	89ab      	ldrh	r3, [r5, #12]
 8005230:	059a      	lsls	r2, r3, #22
 8005232:	d402      	bmi.n	800523a <_vfiprintf_r+0x2a>
 8005234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005236:	f7ff fd6e 	bl	8004d16 <__retarget_lock_acquire_recursive>
 800523a:	89ab      	ldrh	r3, [r5, #12]
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	d501      	bpl.n	8005244 <_vfiprintf_r+0x34>
 8005240:	692b      	ldr	r3, [r5, #16]
 8005242:	b99b      	cbnz	r3, 800526c <_vfiprintf_r+0x5c>
 8005244:	4629      	mov	r1, r5
 8005246:	4630      	mov	r0, r6
 8005248:	f7ff fc96 	bl	8004b78 <__swsetup_r>
 800524c:	b170      	cbz	r0, 800526c <_vfiprintf_r+0x5c>
 800524e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005250:	07dc      	lsls	r4, r3, #31
 8005252:	d504      	bpl.n	800525e <_vfiprintf_r+0x4e>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	b01d      	add	sp, #116	@ 0x74
 800525a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	0598      	lsls	r0, r3, #22
 8005262:	d4f7      	bmi.n	8005254 <_vfiprintf_r+0x44>
 8005264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005266:	f7ff fd57 	bl	8004d18 <__retarget_lock_release_recursive>
 800526a:	e7f3      	b.n	8005254 <_vfiprintf_r+0x44>
 800526c:	2300      	movs	r3, #0
 800526e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005270:	2320      	movs	r3, #32
 8005272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005276:	f8cd 800c 	str.w	r8, [sp, #12]
 800527a:	2330      	movs	r3, #48	@ 0x30
 800527c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800542c <_vfiprintf_r+0x21c>
 8005280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005284:	f04f 0901 	mov.w	r9, #1
 8005288:	4623      	mov	r3, r4
 800528a:	469a      	mov	sl, r3
 800528c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005290:	b10a      	cbz	r2, 8005296 <_vfiprintf_r+0x86>
 8005292:	2a25      	cmp	r2, #37	@ 0x25
 8005294:	d1f9      	bne.n	800528a <_vfiprintf_r+0x7a>
 8005296:	ebba 0b04 	subs.w	fp, sl, r4
 800529a:	d00b      	beq.n	80052b4 <_vfiprintf_r+0xa4>
 800529c:	465b      	mov	r3, fp
 800529e:	4622      	mov	r2, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7ff ffa1 	bl	80051ea <__sfputs_r>
 80052a8:	3001      	adds	r0, #1
 80052aa:	f000 80a7 	beq.w	80053fc <_vfiprintf_r+0x1ec>
 80052ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052b0:	445a      	add	r2, fp
 80052b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80052b4:	f89a 3000 	ldrb.w	r3, [sl]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 809f 	beq.w	80053fc <_vfiprintf_r+0x1ec>
 80052be:	2300      	movs	r3, #0
 80052c0:	f04f 32ff 	mov.w	r2, #4294967295
 80052c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c8:	f10a 0a01 	add.w	sl, sl, #1
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	9307      	str	r3, [sp, #28]
 80052d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80052d6:	4654      	mov	r4, sl
 80052d8:	2205      	movs	r2, #5
 80052da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052de:	4853      	ldr	r0, [pc, #332]	@ (800542c <_vfiprintf_r+0x21c>)
 80052e0:	f7fa ffae 	bl	8000240 <memchr>
 80052e4:	9a04      	ldr	r2, [sp, #16]
 80052e6:	b9d8      	cbnz	r0, 8005320 <_vfiprintf_r+0x110>
 80052e8:	06d1      	lsls	r1, r2, #27
 80052ea:	bf44      	itt	mi
 80052ec:	2320      	movmi	r3, #32
 80052ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052f2:	0713      	lsls	r3, r2, #28
 80052f4:	bf44      	itt	mi
 80052f6:	232b      	movmi	r3, #43	@ 0x2b
 80052f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005300:	2b2a      	cmp	r3, #42	@ 0x2a
 8005302:	d015      	beq.n	8005330 <_vfiprintf_r+0x120>
 8005304:	9a07      	ldr	r2, [sp, #28]
 8005306:	4654      	mov	r4, sl
 8005308:	2000      	movs	r0, #0
 800530a:	f04f 0c0a 	mov.w	ip, #10
 800530e:	4621      	mov	r1, r4
 8005310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005314:	3b30      	subs	r3, #48	@ 0x30
 8005316:	2b09      	cmp	r3, #9
 8005318:	d94b      	bls.n	80053b2 <_vfiprintf_r+0x1a2>
 800531a:	b1b0      	cbz	r0, 800534a <_vfiprintf_r+0x13a>
 800531c:	9207      	str	r2, [sp, #28]
 800531e:	e014      	b.n	800534a <_vfiprintf_r+0x13a>
 8005320:	eba0 0308 	sub.w	r3, r0, r8
 8005324:	fa09 f303 	lsl.w	r3, r9, r3
 8005328:	4313      	orrs	r3, r2
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	46a2      	mov	sl, r4
 800532e:	e7d2      	b.n	80052d6 <_vfiprintf_r+0xc6>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	1d19      	adds	r1, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	9103      	str	r1, [sp, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	bfbb      	ittet	lt
 800533c:	425b      	neglt	r3, r3
 800533e:	f042 0202 	orrlt.w	r2, r2, #2
 8005342:	9307      	strge	r3, [sp, #28]
 8005344:	9307      	strlt	r3, [sp, #28]
 8005346:	bfb8      	it	lt
 8005348:	9204      	strlt	r2, [sp, #16]
 800534a:	7823      	ldrb	r3, [r4, #0]
 800534c:	2b2e      	cmp	r3, #46	@ 0x2e
 800534e:	d10a      	bne.n	8005366 <_vfiprintf_r+0x156>
 8005350:	7863      	ldrb	r3, [r4, #1]
 8005352:	2b2a      	cmp	r3, #42	@ 0x2a
 8005354:	d132      	bne.n	80053bc <_vfiprintf_r+0x1ac>
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	1d1a      	adds	r2, r3, #4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	9203      	str	r2, [sp, #12]
 800535e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005362:	3402      	adds	r4, #2
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800543c <_vfiprintf_r+0x22c>
 800536a:	7821      	ldrb	r1, [r4, #0]
 800536c:	2203      	movs	r2, #3
 800536e:	4650      	mov	r0, sl
 8005370:	f7fa ff66 	bl	8000240 <memchr>
 8005374:	b138      	cbz	r0, 8005386 <_vfiprintf_r+0x176>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	eba0 000a 	sub.w	r0, r0, sl
 800537c:	2240      	movs	r2, #64	@ 0x40
 800537e:	4082      	lsls	r2, r0
 8005380:	4313      	orrs	r3, r2
 8005382:	3401      	adds	r4, #1
 8005384:	9304      	str	r3, [sp, #16]
 8005386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538a:	4829      	ldr	r0, [pc, #164]	@ (8005430 <_vfiprintf_r+0x220>)
 800538c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005390:	2206      	movs	r2, #6
 8005392:	f7fa ff55 	bl	8000240 <memchr>
 8005396:	2800      	cmp	r0, #0
 8005398:	d03f      	beq.n	800541a <_vfiprintf_r+0x20a>
 800539a:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <_vfiprintf_r+0x224>)
 800539c:	bb1b      	cbnz	r3, 80053e6 <_vfiprintf_r+0x1d6>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	3307      	adds	r3, #7
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	3308      	adds	r3, #8
 80053a8:	9303      	str	r3, [sp, #12]
 80053aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ac:	443b      	add	r3, r7
 80053ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80053b0:	e76a      	b.n	8005288 <_vfiprintf_r+0x78>
 80053b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053b6:	460c      	mov	r4, r1
 80053b8:	2001      	movs	r0, #1
 80053ba:	e7a8      	b.n	800530e <_vfiprintf_r+0xfe>
 80053bc:	2300      	movs	r3, #0
 80053be:	3401      	adds	r4, #1
 80053c0:	9305      	str	r3, [sp, #20]
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 0c0a 	mov.w	ip, #10
 80053c8:	4620      	mov	r0, r4
 80053ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ce:	3a30      	subs	r2, #48	@ 0x30
 80053d0:	2a09      	cmp	r2, #9
 80053d2:	d903      	bls.n	80053dc <_vfiprintf_r+0x1cc>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0c6      	beq.n	8005366 <_vfiprintf_r+0x156>
 80053d8:	9105      	str	r1, [sp, #20]
 80053da:	e7c4      	b.n	8005366 <_vfiprintf_r+0x156>
 80053dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e0:	4604      	mov	r4, r0
 80053e2:	2301      	movs	r3, #1
 80053e4:	e7f0      	b.n	80053c8 <_vfiprintf_r+0x1b8>
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4b12      	ldr	r3, [pc, #72]	@ (8005438 <_vfiprintf_r+0x228>)
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	4630      	mov	r0, r6
 80053f2:	f3af 8000 	nop.w
 80053f6:	4607      	mov	r7, r0
 80053f8:	1c78      	adds	r0, r7, #1
 80053fa:	d1d6      	bne.n	80053aa <_vfiprintf_r+0x19a>
 80053fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053fe:	07d9      	lsls	r1, r3, #31
 8005400:	d405      	bmi.n	800540e <_vfiprintf_r+0x1fe>
 8005402:	89ab      	ldrh	r3, [r5, #12]
 8005404:	059a      	lsls	r2, r3, #22
 8005406:	d402      	bmi.n	800540e <_vfiprintf_r+0x1fe>
 8005408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800540a:	f7ff fc85 	bl	8004d18 <__retarget_lock_release_recursive>
 800540e:	89ab      	ldrh	r3, [r5, #12]
 8005410:	065b      	lsls	r3, r3, #25
 8005412:	f53f af1f 	bmi.w	8005254 <_vfiprintf_r+0x44>
 8005416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005418:	e71e      	b.n	8005258 <_vfiprintf_r+0x48>
 800541a:	ab03      	add	r3, sp, #12
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	462a      	mov	r2, r5
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <_vfiprintf_r+0x228>)
 8005422:	a904      	add	r1, sp, #16
 8005424:	4630      	mov	r0, r6
 8005426:	f000 f879 	bl	800551c <_printf_i>
 800542a:	e7e4      	b.n	80053f6 <_vfiprintf_r+0x1e6>
 800542c:	08005dfc 	.word	0x08005dfc
 8005430:	08005e06 	.word	0x08005e06
 8005434:	00000000 	.word	0x00000000
 8005438:	080051eb 	.word	0x080051eb
 800543c:	08005e02 	.word	0x08005e02

08005440 <_printf_common>:
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	4616      	mov	r6, r2
 8005446:	4698      	mov	r8, r3
 8005448:	688a      	ldr	r2, [r1, #8]
 800544a:	690b      	ldr	r3, [r1, #16]
 800544c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005450:	4293      	cmp	r3, r2
 8005452:	bfb8      	it	lt
 8005454:	4613      	movlt	r3, r2
 8005456:	6033      	str	r3, [r6, #0]
 8005458:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800545c:	4607      	mov	r7, r0
 800545e:	460c      	mov	r4, r1
 8005460:	b10a      	cbz	r2, 8005466 <_printf_common+0x26>
 8005462:	3301      	adds	r3, #1
 8005464:	6033      	str	r3, [r6, #0]
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	0699      	lsls	r1, r3, #26
 800546a:	bf42      	ittt	mi
 800546c:	6833      	ldrmi	r3, [r6, #0]
 800546e:	3302      	addmi	r3, #2
 8005470:	6033      	strmi	r3, [r6, #0]
 8005472:	6825      	ldr	r5, [r4, #0]
 8005474:	f015 0506 	ands.w	r5, r5, #6
 8005478:	d106      	bne.n	8005488 <_printf_common+0x48>
 800547a:	f104 0a19 	add.w	sl, r4, #25
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	6832      	ldr	r2, [r6, #0]
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	42ab      	cmp	r3, r5
 8005486:	dc26      	bgt.n	80054d6 <_printf_common+0x96>
 8005488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	3b00      	subs	r3, #0
 8005490:	bf18      	it	ne
 8005492:	2301      	movne	r3, #1
 8005494:	0692      	lsls	r2, r2, #26
 8005496:	d42b      	bmi.n	80054f0 <_printf_common+0xb0>
 8005498:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800549c:	4641      	mov	r1, r8
 800549e:	4638      	mov	r0, r7
 80054a0:	47c8      	blx	r9
 80054a2:	3001      	adds	r0, #1
 80054a4:	d01e      	beq.n	80054e4 <_printf_common+0xa4>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	6922      	ldr	r2, [r4, #16]
 80054aa:	f003 0306 	and.w	r3, r3, #6
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	bf02      	ittt	eq
 80054b2:	68e5      	ldreq	r5, [r4, #12]
 80054b4:	6833      	ldreq	r3, [r6, #0]
 80054b6:	1aed      	subeq	r5, r5, r3
 80054b8:	68a3      	ldr	r3, [r4, #8]
 80054ba:	bf0c      	ite	eq
 80054bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c0:	2500      	movne	r5, #0
 80054c2:	4293      	cmp	r3, r2
 80054c4:	bfc4      	itt	gt
 80054c6:	1a9b      	subgt	r3, r3, r2
 80054c8:	18ed      	addgt	r5, r5, r3
 80054ca:	2600      	movs	r6, #0
 80054cc:	341a      	adds	r4, #26
 80054ce:	42b5      	cmp	r5, r6
 80054d0:	d11a      	bne.n	8005508 <_printf_common+0xc8>
 80054d2:	2000      	movs	r0, #0
 80054d4:	e008      	b.n	80054e8 <_printf_common+0xa8>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4652      	mov	r2, sl
 80054da:	4641      	mov	r1, r8
 80054dc:	4638      	mov	r0, r7
 80054de:	47c8      	blx	r9
 80054e0:	3001      	adds	r0, #1
 80054e2:	d103      	bne.n	80054ec <_printf_common+0xac>
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ec:	3501      	adds	r5, #1
 80054ee:	e7c6      	b.n	800547e <_printf_common+0x3e>
 80054f0:	18e1      	adds	r1, r4, r3
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	2030      	movs	r0, #48	@ 0x30
 80054f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054fa:	4422      	add	r2, r4
 80054fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005504:	3302      	adds	r3, #2
 8005506:	e7c7      	b.n	8005498 <_printf_common+0x58>
 8005508:	2301      	movs	r3, #1
 800550a:	4622      	mov	r2, r4
 800550c:	4641      	mov	r1, r8
 800550e:	4638      	mov	r0, r7
 8005510:	47c8      	blx	r9
 8005512:	3001      	adds	r0, #1
 8005514:	d0e6      	beq.n	80054e4 <_printf_common+0xa4>
 8005516:	3601      	adds	r6, #1
 8005518:	e7d9      	b.n	80054ce <_printf_common+0x8e>
	...

0800551c <_printf_i>:
 800551c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	7e0f      	ldrb	r7, [r1, #24]
 8005522:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005524:	2f78      	cmp	r7, #120	@ 0x78
 8005526:	4691      	mov	r9, r2
 8005528:	4680      	mov	r8, r0
 800552a:	460c      	mov	r4, r1
 800552c:	469a      	mov	sl, r3
 800552e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005532:	d807      	bhi.n	8005544 <_printf_i+0x28>
 8005534:	2f62      	cmp	r7, #98	@ 0x62
 8005536:	d80a      	bhi.n	800554e <_printf_i+0x32>
 8005538:	2f00      	cmp	r7, #0
 800553a:	f000 80d2 	beq.w	80056e2 <_printf_i+0x1c6>
 800553e:	2f58      	cmp	r7, #88	@ 0x58
 8005540:	f000 80b9 	beq.w	80056b6 <_printf_i+0x19a>
 8005544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800554c:	e03a      	b.n	80055c4 <_printf_i+0xa8>
 800554e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005552:	2b15      	cmp	r3, #21
 8005554:	d8f6      	bhi.n	8005544 <_printf_i+0x28>
 8005556:	a101      	add	r1, pc, #4	@ (adr r1, 800555c <_printf_i+0x40>)
 8005558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800555c:	080055b5 	.word	0x080055b5
 8005560:	080055c9 	.word	0x080055c9
 8005564:	08005545 	.word	0x08005545
 8005568:	08005545 	.word	0x08005545
 800556c:	08005545 	.word	0x08005545
 8005570:	08005545 	.word	0x08005545
 8005574:	080055c9 	.word	0x080055c9
 8005578:	08005545 	.word	0x08005545
 800557c:	08005545 	.word	0x08005545
 8005580:	08005545 	.word	0x08005545
 8005584:	08005545 	.word	0x08005545
 8005588:	080056c9 	.word	0x080056c9
 800558c:	080055f3 	.word	0x080055f3
 8005590:	08005683 	.word	0x08005683
 8005594:	08005545 	.word	0x08005545
 8005598:	08005545 	.word	0x08005545
 800559c:	080056eb 	.word	0x080056eb
 80055a0:	08005545 	.word	0x08005545
 80055a4:	080055f3 	.word	0x080055f3
 80055a8:	08005545 	.word	0x08005545
 80055ac:	08005545 	.word	0x08005545
 80055b0:	0800568b 	.word	0x0800568b
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6032      	str	r2, [r6, #0]
 80055bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c4:	2301      	movs	r3, #1
 80055c6:	e09d      	b.n	8005704 <_printf_i+0x1e8>
 80055c8:	6833      	ldr	r3, [r6, #0]
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	6031      	str	r1, [r6, #0]
 80055d0:	0606      	lsls	r6, r0, #24
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0xbc>
 80055d4:	681d      	ldr	r5, [r3, #0]
 80055d6:	e003      	b.n	80055e0 <_printf_i+0xc4>
 80055d8:	0645      	lsls	r5, r0, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0xb8>
 80055dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	da03      	bge.n	80055ec <_printf_i+0xd0>
 80055e4:	232d      	movs	r3, #45	@ 0x2d
 80055e6:	426d      	negs	r5, r5
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ec:	4859      	ldr	r0, [pc, #356]	@ (8005754 <_printf_i+0x238>)
 80055ee:	230a      	movs	r3, #10
 80055f0:	e011      	b.n	8005616 <_printf_i+0xfa>
 80055f2:	6821      	ldr	r1, [r4, #0]
 80055f4:	6833      	ldr	r3, [r6, #0]
 80055f6:	0608      	lsls	r0, r1, #24
 80055f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055fc:	d402      	bmi.n	8005604 <_printf_i+0xe8>
 80055fe:	0649      	lsls	r1, r1, #25
 8005600:	bf48      	it	mi
 8005602:	b2ad      	uxthmi	r5, r5
 8005604:	2f6f      	cmp	r7, #111	@ 0x6f
 8005606:	4853      	ldr	r0, [pc, #332]	@ (8005754 <_printf_i+0x238>)
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	bf14      	ite	ne
 800560c:	230a      	movne	r3, #10
 800560e:	2308      	moveq	r3, #8
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005616:	6866      	ldr	r6, [r4, #4]
 8005618:	60a6      	str	r6, [r4, #8]
 800561a:	2e00      	cmp	r6, #0
 800561c:	bfa2      	ittt	ge
 800561e:	6821      	ldrge	r1, [r4, #0]
 8005620:	f021 0104 	bicge.w	r1, r1, #4
 8005624:	6021      	strge	r1, [r4, #0]
 8005626:	b90d      	cbnz	r5, 800562c <_printf_i+0x110>
 8005628:	2e00      	cmp	r6, #0
 800562a:	d04b      	beq.n	80056c4 <_printf_i+0x1a8>
 800562c:	4616      	mov	r6, r2
 800562e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005632:	fb03 5711 	mls	r7, r3, r1, r5
 8005636:	5dc7      	ldrb	r7, [r0, r7]
 8005638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800563c:	462f      	mov	r7, r5
 800563e:	42bb      	cmp	r3, r7
 8005640:	460d      	mov	r5, r1
 8005642:	d9f4      	bls.n	800562e <_printf_i+0x112>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10b      	bne.n	8005660 <_printf_i+0x144>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07df      	lsls	r7, r3, #31
 800564c:	d508      	bpl.n	8005660 <_printf_i+0x144>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	6861      	ldr	r1, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	bfde      	ittt	le
 8005656:	2330      	movle	r3, #48	@ 0x30
 8005658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800565c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005660:	1b92      	subs	r2, r2, r6
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	f8cd a000 	str.w	sl, [sp]
 8005668:	464b      	mov	r3, r9
 800566a:	aa03      	add	r2, sp, #12
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fee6 	bl	8005440 <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	d14a      	bne.n	800570e <_printf_i+0x1f2>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b004      	add	sp, #16
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	4833      	ldr	r0, [pc, #204]	@ (8005758 <_printf_i+0x23c>)
 800568c:	2778      	movs	r7, #120	@ 0x78
 800568e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	6831      	ldr	r1, [r6, #0]
 8005696:	061f      	lsls	r7, r3, #24
 8005698:	f851 5b04 	ldr.w	r5, [r1], #4
 800569c:	d402      	bmi.n	80056a4 <_printf_i+0x188>
 800569e:	065f      	lsls	r7, r3, #25
 80056a0:	bf48      	it	mi
 80056a2:	b2ad      	uxthmi	r5, r5
 80056a4:	6031      	str	r1, [r6, #0]
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	bf44      	itt	mi
 80056aa:	f043 0320 	orrmi.w	r3, r3, #32
 80056ae:	6023      	strmi	r3, [r4, #0]
 80056b0:	b11d      	cbz	r5, 80056ba <_printf_i+0x19e>
 80056b2:	2310      	movs	r3, #16
 80056b4:	e7ac      	b.n	8005610 <_printf_i+0xf4>
 80056b6:	4827      	ldr	r0, [pc, #156]	@ (8005754 <_printf_i+0x238>)
 80056b8:	e7e9      	b.n	800568e <_printf_i+0x172>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	f023 0320 	bic.w	r3, r3, #32
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	e7f6      	b.n	80056b2 <_printf_i+0x196>
 80056c4:	4616      	mov	r6, r2
 80056c6:	e7bd      	b.n	8005644 <_printf_i+0x128>
 80056c8:	6833      	ldr	r3, [r6, #0]
 80056ca:	6825      	ldr	r5, [r4, #0]
 80056cc:	6961      	ldr	r1, [r4, #20]
 80056ce:	1d18      	adds	r0, r3, #4
 80056d0:	6030      	str	r0, [r6, #0]
 80056d2:	062e      	lsls	r6, r5, #24
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	d501      	bpl.n	80056dc <_printf_i+0x1c0>
 80056d8:	6019      	str	r1, [r3, #0]
 80056da:	e002      	b.n	80056e2 <_printf_i+0x1c6>
 80056dc:	0668      	lsls	r0, r5, #25
 80056de:	d5fb      	bpl.n	80056d8 <_printf_i+0x1bc>
 80056e0:	8019      	strh	r1, [r3, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	4616      	mov	r6, r2
 80056e8:	e7bc      	b.n	8005664 <_printf_i+0x148>
 80056ea:	6833      	ldr	r3, [r6, #0]
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	6032      	str	r2, [r6, #0]
 80056f0:	681e      	ldr	r6, [r3, #0]
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4630      	mov	r0, r6
 80056f8:	f7fa fda2 	bl	8000240 <memchr>
 80056fc:	b108      	cbz	r0, 8005702 <_printf_i+0x1e6>
 80056fe:	1b80      	subs	r0, r0, r6
 8005700:	6060      	str	r0, [r4, #4]
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	2300      	movs	r3, #0
 8005708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800570c:	e7aa      	b.n	8005664 <_printf_i+0x148>
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	4632      	mov	r2, r6
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d0ad      	beq.n	8005678 <_printf_i+0x15c>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	079b      	lsls	r3, r3, #30
 8005720:	d413      	bmi.n	800574a <_printf_i+0x22e>
 8005722:	68e0      	ldr	r0, [r4, #12]
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	4298      	cmp	r0, r3
 8005728:	bfb8      	it	lt
 800572a:	4618      	movlt	r0, r3
 800572c:	e7a6      	b.n	800567c <_printf_i+0x160>
 800572e:	2301      	movs	r3, #1
 8005730:	4632      	mov	r2, r6
 8005732:	4649      	mov	r1, r9
 8005734:	4640      	mov	r0, r8
 8005736:	47d0      	blx	sl
 8005738:	3001      	adds	r0, #1
 800573a:	d09d      	beq.n	8005678 <_printf_i+0x15c>
 800573c:	3501      	adds	r5, #1
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	9903      	ldr	r1, [sp, #12]
 8005742:	1a5b      	subs	r3, r3, r1
 8005744:	42ab      	cmp	r3, r5
 8005746:	dcf2      	bgt.n	800572e <_printf_i+0x212>
 8005748:	e7eb      	b.n	8005722 <_printf_i+0x206>
 800574a:	2500      	movs	r5, #0
 800574c:	f104 0619 	add.w	r6, r4, #25
 8005750:	e7f5      	b.n	800573e <_printf_i+0x222>
 8005752:	bf00      	nop
 8005754:	08005e0d 	.word	0x08005e0d
 8005758:	08005e1e 	.word	0x08005e1e

0800575c <__sflush_r>:
 800575c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005764:	0716      	lsls	r6, r2, #28
 8005766:	4605      	mov	r5, r0
 8005768:	460c      	mov	r4, r1
 800576a:	d454      	bmi.n	8005816 <__sflush_r+0xba>
 800576c:	684b      	ldr	r3, [r1, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	dc02      	bgt.n	8005778 <__sflush_r+0x1c>
 8005772:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	dd48      	ble.n	800580a <__sflush_r+0xae>
 8005778:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800577a:	2e00      	cmp	r6, #0
 800577c:	d045      	beq.n	800580a <__sflush_r+0xae>
 800577e:	2300      	movs	r3, #0
 8005780:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005784:	682f      	ldr	r7, [r5, #0]
 8005786:	6a21      	ldr	r1, [r4, #32]
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	d030      	beq.n	80057ee <__sflush_r+0x92>
 800578c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	0759      	lsls	r1, r3, #29
 8005792:	d505      	bpl.n	80057a0 <__sflush_r+0x44>
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800579a:	b10b      	cbz	r3, 80057a0 <__sflush_r+0x44>
 800579c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057a4:	6a21      	ldr	r1, [r4, #32]
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b0      	blx	r6
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	d106      	bne.n	80057be <__sflush_r+0x62>
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	291d      	cmp	r1, #29
 80057b4:	d82b      	bhi.n	800580e <__sflush_r+0xb2>
 80057b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005860 <__sflush_r+0x104>)
 80057b8:	410a      	asrs	r2, r1
 80057ba:	07d6      	lsls	r6, r2, #31
 80057bc:	d427      	bmi.n	800580e <__sflush_r+0xb2>
 80057be:	2200      	movs	r2, #0
 80057c0:	6062      	str	r2, [r4, #4]
 80057c2:	04d9      	lsls	r1, r3, #19
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	6022      	str	r2, [r4, #0]
 80057c8:	d504      	bpl.n	80057d4 <__sflush_r+0x78>
 80057ca:	1c42      	adds	r2, r0, #1
 80057cc:	d101      	bne.n	80057d2 <__sflush_r+0x76>
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	b903      	cbnz	r3, 80057d4 <__sflush_r+0x78>
 80057d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80057d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057d6:	602f      	str	r7, [r5, #0]
 80057d8:	b1b9      	cbz	r1, 800580a <__sflush_r+0xae>
 80057da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057de:	4299      	cmp	r1, r3
 80057e0:	d002      	beq.n	80057e8 <__sflush_r+0x8c>
 80057e2:	4628      	mov	r0, r5
 80057e4:	f7ff fa9a 	bl	8004d1c <_free_r>
 80057e8:	2300      	movs	r3, #0
 80057ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80057ec:	e00d      	b.n	800580a <__sflush_r+0xae>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b0      	blx	r6
 80057f4:	4602      	mov	r2, r0
 80057f6:	1c50      	adds	r0, r2, #1
 80057f8:	d1c9      	bne.n	800578e <__sflush_r+0x32>
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0c6      	beq.n	800578e <__sflush_r+0x32>
 8005800:	2b1d      	cmp	r3, #29
 8005802:	d001      	beq.n	8005808 <__sflush_r+0xac>
 8005804:	2b16      	cmp	r3, #22
 8005806:	d11e      	bne.n	8005846 <__sflush_r+0xea>
 8005808:	602f      	str	r7, [r5, #0]
 800580a:	2000      	movs	r0, #0
 800580c:	e022      	b.n	8005854 <__sflush_r+0xf8>
 800580e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005812:	b21b      	sxth	r3, r3
 8005814:	e01b      	b.n	800584e <__sflush_r+0xf2>
 8005816:	690f      	ldr	r7, [r1, #16]
 8005818:	2f00      	cmp	r7, #0
 800581a:	d0f6      	beq.n	800580a <__sflush_r+0xae>
 800581c:	0793      	lsls	r3, r2, #30
 800581e:	680e      	ldr	r6, [r1, #0]
 8005820:	bf08      	it	eq
 8005822:	694b      	ldreq	r3, [r1, #20]
 8005824:	600f      	str	r7, [r1, #0]
 8005826:	bf18      	it	ne
 8005828:	2300      	movne	r3, #0
 800582a:	eba6 0807 	sub.w	r8, r6, r7
 800582e:	608b      	str	r3, [r1, #8]
 8005830:	f1b8 0f00 	cmp.w	r8, #0
 8005834:	dde9      	ble.n	800580a <__sflush_r+0xae>
 8005836:	6a21      	ldr	r1, [r4, #32]
 8005838:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800583a:	4643      	mov	r3, r8
 800583c:	463a      	mov	r2, r7
 800583e:	4628      	mov	r0, r5
 8005840:	47b0      	blx	r6
 8005842:	2800      	cmp	r0, #0
 8005844:	dc08      	bgt.n	8005858 <__sflush_r+0xfc>
 8005846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005858:	4407      	add	r7, r0
 800585a:	eba8 0800 	sub.w	r8, r8, r0
 800585e:	e7e7      	b.n	8005830 <__sflush_r+0xd4>
 8005860:	dfbffffe 	.word	0xdfbffffe

08005864 <_fflush_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	4605      	mov	r5, r0
 800586a:	460c      	mov	r4, r1
 800586c:	b913      	cbnz	r3, 8005874 <_fflush_r+0x10>
 800586e:	2500      	movs	r5, #0
 8005870:	4628      	mov	r0, r5
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	b118      	cbz	r0, 800587e <_fflush_r+0x1a>
 8005876:	6a03      	ldr	r3, [r0, #32]
 8005878:	b90b      	cbnz	r3, 800587e <_fflush_r+0x1a>
 800587a:	f7ff f821 	bl	80048c0 <__sinit>
 800587e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f3      	beq.n	800586e <_fflush_r+0xa>
 8005886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005888:	07d0      	lsls	r0, r2, #31
 800588a:	d404      	bmi.n	8005896 <_fflush_r+0x32>
 800588c:	0599      	lsls	r1, r3, #22
 800588e:	d402      	bmi.n	8005896 <_fflush_r+0x32>
 8005890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005892:	f7ff fa40 	bl	8004d16 <__retarget_lock_acquire_recursive>
 8005896:	4628      	mov	r0, r5
 8005898:	4621      	mov	r1, r4
 800589a:	f7ff ff5f 	bl	800575c <__sflush_r>
 800589e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058a0:	07da      	lsls	r2, r3, #31
 80058a2:	4605      	mov	r5, r0
 80058a4:	d4e4      	bmi.n	8005870 <_fflush_r+0xc>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	059b      	lsls	r3, r3, #22
 80058aa:	d4e1      	bmi.n	8005870 <_fflush_r+0xc>
 80058ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058ae:	f7ff fa33 	bl	8004d18 <__retarget_lock_release_recursive>
 80058b2:	e7dd      	b.n	8005870 <_fflush_r+0xc>

080058b4 <__swhatbuf_r>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	460c      	mov	r4, r1
 80058b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058bc:	2900      	cmp	r1, #0
 80058be:	b096      	sub	sp, #88	@ 0x58
 80058c0:	4615      	mov	r5, r2
 80058c2:	461e      	mov	r6, r3
 80058c4:	da0d      	bge.n	80058e2 <__swhatbuf_r+0x2e>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058cc:	f04f 0100 	mov.w	r1, #0
 80058d0:	bf14      	ite	ne
 80058d2:	2340      	movne	r3, #64	@ 0x40
 80058d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058d8:	2000      	movs	r0, #0
 80058da:	6031      	str	r1, [r6, #0]
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	b016      	add	sp, #88	@ 0x58
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	466a      	mov	r2, sp
 80058e4:	f000 f862 	bl	80059ac <_fstat_r>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	dbec      	blt.n	80058c6 <__swhatbuf_r+0x12>
 80058ec:	9901      	ldr	r1, [sp, #4]
 80058ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058f6:	4259      	negs	r1, r3
 80058f8:	4159      	adcs	r1, r3
 80058fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058fe:	e7eb      	b.n	80058d8 <__swhatbuf_r+0x24>

08005900 <__smakebuf_r>:
 8005900:	898b      	ldrh	r3, [r1, #12]
 8005902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005904:	079d      	lsls	r5, r3, #30
 8005906:	4606      	mov	r6, r0
 8005908:	460c      	mov	r4, r1
 800590a:	d507      	bpl.n	800591c <__smakebuf_r+0x1c>
 800590c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	2301      	movs	r3, #1
 8005916:	6163      	str	r3, [r4, #20]
 8005918:	b003      	add	sp, #12
 800591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591c:	ab01      	add	r3, sp, #4
 800591e:	466a      	mov	r2, sp
 8005920:	f7ff ffc8 	bl	80058b4 <__swhatbuf_r>
 8005924:	9f00      	ldr	r7, [sp, #0]
 8005926:	4605      	mov	r5, r0
 8005928:	4639      	mov	r1, r7
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff fa62 	bl	8004df4 <_malloc_r>
 8005930:	b948      	cbnz	r0, 8005946 <__smakebuf_r+0x46>
 8005932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005936:	059a      	lsls	r2, r3, #22
 8005938:	d4ee      	bmi.n	8005918 <__smakebuf_r+0x18>
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	e7e2      	b.n	800590c <__smakebuf_r+0xc>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	6020      	str	r0, [r4, #0]
 800594a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	9b01      	ldr	r3, [sp, #4]
 8005952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005956:	b15b      	cbz	r3, 8005970 <__smakebuf_r+0x70>
 8005958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f837 	bl	80059d0 <_isatty_r>
 8005962:	b128      	cbz	r0, 8005970 <__smakebuf_r+0x70>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	431d      	orrs	r5, r3
 8005974:	81a5      	strh	r5, [r4, #12]
 8005976:	e7cf      	b.n	8005918 <__smakebuf_r+0x18>

08005978 <memmove>:
 8005978:	4288      	cmp	r0, r1
 800597a:	b510      	push	{r4, lr}
 800597c:	eb01 0402 	add.w	r4, r1, r2
 8005980:	d902      	bls.n	8005988 <memmove+0x10>
 8005982:	4284      	cmp	r4, r0
 8005984:	4623      	mov	r3, r4
 8005986:	d807      	bhi.n	8005998 <memmove+0x20>
 8005988:	1e43      	subs	r3, r0, #1
 800598a:	42a1      	cmp	r1, r4
 800598c:	d008      	beq.n	80059a0 <memmove+0x28>
 800598e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005996:	e7f8      	b.n	800598a <memmove+0x12>
 8005998:	4402      	add	r2, r0
 800599a:	4601      	mov	r1, r0
 800599c:	428a      	cmp	r2, r1
 800599e:	d100      	bne.n	80059a2 <memmove+0x2a>
 80059a0:	bd10      	pop	{r4, pc}
 80059a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059aa:	e7f7      	b.n	800599c <memmove+0x24>

080059ac <_fstat_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d07      	ldr	r5, [pc, #28]	@ (80059cc <_fstat_r+0x20>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	f7fb fdcd 	bl	8001558 <_fstat>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d102      	bne.n	80059c8 <_fstat_r+0x1c>
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	b103      	cbz	r3, 80059c8 <_fstat_r+0x1c>
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	20000434 	.word	0x20000434

080059d0 <_isatty_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	@ (80059ec <_isatty_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb fdcc 	bl	8001578 <_isatty>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_isatty_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_isatty_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20000434 	.word	0x20000434

080059f0 <_sbrk_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	@ (8005a0c <_sbrk_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fb fdd4 	bl	80015a8 <_sbrk>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_sbrk_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_sbrk_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20000434 	.word	0x20000434

08005a10 <memcpy>:
 8005a10:	440a      	add	r2, r1
 8005a12:	4291      	cmp	r1, r2
 8005a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a18:	d100      	bne.n	8005a1c <memcpy+0xc>
 8005a1a:	4770      	bx	lr
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a26:	4291      	cmp	r1, r2
 8005a28:	d1f9      	bne.n	8005a1e <memcpy+0xe>
 8005a2a:	bd10      	pop	{r4, pc}

08005a2c <_realloc_r>:
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	4680      	mov	r8, r0
 8005a32:	4615      	mov	r5, r2
 8005a34:	460c      	mov	r4, r1
 8005a36:	b921      	cbnz	r1, 8005a42 <_realloc_r+0x16>
 8005a38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	f7ff b9d9 	b.w	8004df4 <_malloc_r>
 8005a42:	b92a      	cbnz	r2, 8005a50 <_realloc_r+0x24>
 8005a44:	f7ff f96a 	bl	8004d1c <_free_r>
 8005a48:	2400      	movs	r4, #0
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a50:	f000 f81a 	bl	8005a88 <_malloc_usable_size_r>
 8005a54:	4285      	cmp	r5, r0
 8005a56:	4606      	mov	r6, r0
 8005a58:	d802      	bhi.n	8005a60 <_realloc_r+0x34>
 8005a5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a5e:	d8f4      	bhi.n	8005a4a <_realloc_r+0x1e>
 8005a60:	4629      	mov	r1, r5
 8005a62:	4640      	mov	r0, r8
 8005a64:	f7ff f9c6 	bl	8004df4 <_malloc_r>
 8005a68:	4607      	mov	r7, r0
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d0ec      	beq.n	8005a48 <_realloc_r+0x1c>
 8005a6e:	42b5      	cmp	r5, r6
 8005a70:	462a      	mov	r2, r5
 8005a72:	4621      	mov	r1, r4
 8005a74:	bf28      	it	cs
 8005a76:	4632      	movcs	r2, r6
 8005a78:	f7ff ffca 	bl	8005a10 <memcpy>
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f7ff f94c 	bl	8004d1c <_free_r>
 8005a84:	463c      	mov	r4, r7
 8005a86:	e7e0      	b.n	8005a4a <_realloc_r+0x1e>

08005a88 <_malloc_usable_size_r>:
 8005a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8c:	1f18      	subs	r0, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfbc      	itt	lt
 8005a92:	580b      	ldrlt	r3, [r1, r0]
 8005a94:	18c0      	addlt	r0, r0, r3
 8005a96:	4770      	bx	lr

08005a98 <_init>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr

08005aa4 <_fini>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr
